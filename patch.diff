From 6ca8cbf109bd6ea19f946de9d420464bd30e1246 Mon Sep 17 00:00:00 2001
From: ciciplusplus <ciciplusplus@gmail.com>
Date: Sat, 4 Mar 2023 22:15:01 +0100
Subject: [PATCH] ported code

---
 .gitignore                                    |   9 +
 CHAP_11/BLACK11.C                             | 455 +++++++++-------
 CHAP_11/BLACK11.H                             |  32 +-
 .../HostApp/CHAP11.xcodeproj/project.pbxproj  | 348 ++++++++++++
 .../contents.xcworkspacedata                  |   7 +
 .../xcshareddata/IDEWorkspaceChecks.plist     |   8 +
 .../xcshareddata/xcschemes/CHAP11.xcscheme    |  85 +++
 CHAP_11/HostApp/HostApp/HostApp.entitlements  |   8 +
 CHAP_11/HostApp/HostApp/LINEDEMO.h            |  13 +
 CHAP_11/HostApp/HostApp/WIREDEMO.h            |  13 +
 CHAP_11/HostApp/HostApp/ega.h                 |  63 +++
 CHAP_11/HostApp/HostApp/font.h                | 313 +++++++++++
 CHAP_11/HostApp/HostApp/main.cpp              |  59 ++
 CHAP_11/HostApp/HostApp/sdl.h                 | 144 +++++
 CHAP_11/LINEDEMO.C                            |  33 +-
 CHAP_11/WIREDEMO.C                            |  64 ++-
 CHAP_12/GOURDEMO.C                            | 146 +++--
 .../HostApp/CHAP12.xcodeproj/project.pbxproj  | 360 +++++++++++++
 .../contents.xcworkspacedata                  |   7 +
 .../xcshareddata/IDEWorkspaceChecks.plist     |   8 +
 .../xcshareddata/xcschemes/CHAP12.xcscheme    |  85 +++
 CHAP_12/HostApp/HostApp/GOURDEMO.h            |  13 +
 CHAP_12/HostApp/HostApp/HostApp.entitlements  |   8 +
 CHAP_12/HostApp/HostApp/SOLIDEMO.h            |  13 +
 CHAP_12/HostApp/HostApp/TEXTDEMO.h            |  13 +
 CHAP_12/HostApp/HostApp/TRIDEMO.h             |  13 +
 CHAP_12/HostApp/HostApp/ega.h                 |  63 +++
 CHAP_12/HostApp/HostApp/font.h                | 313 +++++++++++
 CHAP_12/HostApp/HostApp/main.cpp              |  58 ++
 CHAP_12/HostApp/HostApp/sdl.h                 | 144 +++++
 CHAP_12/SOLIDEMO.C                            |  87 +--
 CHAP_12/TEXTDEMO.C                            |  63 +--
 CHAP_12/TRIDEMO.C                             |  31 +-
 .../HostApp/CHAP13.xcodeproj/project.pbxproj  | 336 ++++++++++++
 .../contents.xcworkspacedata                  |   7 +
 .../xcshareddata/IDEWorkspaceChecks.plist     |   8 +
 .../xcshareddata/xcschemes/CHAP13.xcscheme    |  85 +++
 CHAP_13/HostApp/HostApp/HostApp.entitlements  |   8 +
 CHAP_13/HostApp/HostApp/SOL2DEMO.h            |  13 +
 CHAP_13/HostApp/HostApp/ega.h                 |  63 +++
 CHAP_13/HostApp/HostApp/font.h                | 313 +++++++++++
 CHAP_13/HostApp/HostApp/main.cpp              |  58 ++
 CHAP_13/HostApp/HostApp/sdl.h                 | 144 +++++
 CHAP_13/SOL2DEMO.C                            |  69 +--
 .../HostApp/CHAP14.xcodeproj/project.pbxproj  | 352 ++++++++++++
 .../contents.xcworkspacedata                  |   7 +
 .../xcshareddata/IDEWorkspaceChecks.plist     |   8 +
 .../xcshareddata/xcschemes/CHAP13.xcscheme    |  85 +++
 CHAP_14/HostApp/HostApp/HostApp.entitlements  |   8 +
 CHAP_14/{ => HostApp/HostApp}/OBJECTS.C       |  72 +--
 CHAP_14/HostApp/HostApp/OBJECTS.h             |  13 +
 CHAP_14/HostApp/HostApp/ega.h                 |  63 +++
 CHAP_14/HostApp/HostApp/font.h                | 313 +++++++++++
 CHAP_14/HostApp/HostApp/main.cpp              |  58 ++
 CHAP_14/HostApp/HostApp/sdl.h                 | 144 +++++
 CHAP_15/BLACK15.C                             | 158 +++---
 CHAP_15/BLACK15.H                             |   8 +-
 CHAP_15/BSPDEMO.C                             |  98 +++-
 .../HostApp/CHAP15.xcodeproj/project.pbxproj  | 362 +++++++++++++
 .../contents.xcworkspacedata                  |   7 +
 .../xcshareddata/IDEWorkspaceChecks.plist     |   8 +
 .../xcshareddata/xcschemes/CHAP13.xcscheme    |  85 +++
 CHAP_15/HostApp/HostApp/BSPDEMO.h             |  13 +
 CHAP_15/HostApp/HostApp/HostApp.entitlements  |   8 +
 CHAP_15/HostApp/HostApp/OBJECTS.C             | 278 ++++++++++
 CHAP_15/HostApp/HostApp/SOLZDEMO.h            |  13 +
 CHAP_15/HostApp/HostApp/SORTDEMO.h            |  13 +
 CHAP_15/HostApp/HostApp/ZDEMO.h               |  13 +
 CHAP_15/HostApp/HostApp/ega.h                 |  63 +++
 CHAP_15/HostApp/HostApp/font.h                | 313 +++++++++++
 CHAP_15/HostApp/HostApp/main.cpp              |  58 ++
 CHAP_15/HostApp/HostApp/sdl.h                 | 144 +++++
 CHAP_15/SOLZDEMO.C                            |  90 ++--
 CHAP_15/SORTDEMO.C                            |  80 +--
 CHAP_15/ZDEMO.C                               |  32 +-
 .../HostApp/CHAP16.xcodeproj/project.pbxproj  | 350 ++++++++++++
 .../contents.xcworkspacedata                  |   7 +
 .../xcshareddata/IDEWorkspaceChecks.plist     |   8 +
 .../xcshareddata/xcschemes/CHAP16.xcscheme    |  89 +++
 CHAP_16/HostApp/HostApp/BSPDEMO.h             |  13 +
 CHAP_16/HostApp/HostApp/HostApp.entitlements  |   8 +
 CHAP_16/HostApp/HostApp/VOXEL.h               |  13 +
 CHAP_16/HostApp/HostApp/ega.h                 |  63 +++
 CHAP_16/HostApp/HostApp/font.h                | 313 +++++++++++
 CHAP_16/HostApp/HostApp/main.cpp              |  58 ++
 CHAP_16/HostApp/HostApp/sdl.h                 | 144 +++++
 CHAP_16/VOXEL.C                               |  51 +-
 CHAP_17/BLACK17.C                             |  28 +-
 CHAP_17/BLACK17.H                             |  17 +-
 CHAP_17/BLAZE3D.C                             |  65 +--
 .../HostApp/CHAP17.xcodeproj/project.pbxproj  | 368 +++++++++++++
 .../contents.xcworkspacedata                  |   7 +
 .../xcshareddata/IDEWorkspaceChecks.plist     |   8 +
 .../xcshareddata/xcschemes/CHAP17.xcscheme    |  79 +++
 CHAP_17/HostApp/HostApp/BLAZE3D.h             |  13 +
 CHAP_17/HostApp/HostApp/BSPDEMO.h             |  13 +
 CHAP_17/HostApp/HostApp/HostApp.entitlements  |   8 +
 CHAP_17/HostApp/HostApp/ega.h                 |  63 +++
 CHAP_17/HostApp/HostApp/font.h                | 313 +++++++++++
 CHAP_17/HostApp/HostApp/main.cpp              |  58 ++
 CHAP_17/HostApp/HostApp/sdl.h                 | 144 +++++
 .../HostApp/CHAP18.xcodeproj/project.pbxproj  | 440 +++++++++++++++
 .../contents.xcworkspacedata                  |   7 +
 .../xcshareddata/IDEWorkspaceChecks.plist     |   8 +
 .../xcshareddata/xcschemes/CHAP18.xcscheme    |  79 +++
 CHAP_18/HostApp/HostApp/HostApp.entitlements  |   8 +
 CHAP_18/HostApp/HostApp/KRK.h                 |  13 +
 CHAP_18/HostApp/HostApp/ega.h                 |  62 +++
 CHAP_18/HostApp/HostApp/font.h                | 313 +++++++++++
 CHAP_18/HostApp/HostApp/main.cpp              |  58 ++
 CHAP_18/HostApp/HostApp/sdl.h                 | 147 +++++
 CHAP_18/KRK.C                                 | 509 +++++++++---------
 CHAP_3/BLACK3.C                               | 343 ++++++------
 CHAP_3/BLACK3.H                               |  21 +-
 .../HostApp/CHAP3.xcodeproj/project.pbxproj   | 325 +++++++++++
 .../contents.xcworkspacedata                  |   7 +
 .../xcshareddata/IDEWorkspaceChecks.plist     |   8 +
 CHAP_3/HostApp/HostApp/HostApp.entitlements   |   8 +
 CHAP_3/HostApp/HostApp/cpu.cpp                | 316 +++++++++++
 CHAP_3/HostApp/HostApp/ega.h                  |  61 +++
 CHAP_3/HostApp/HostApp/font.h                 | 315 +++++++++++
 CHAP_3/HostApp/HostApp/main.cpp               |  58 ++
 CHAP_3/HostApp/HostApp/sdl.h                  | 145 +++++
 CHAP_3/MODE13.C                               |  52 +-
 CHAP_3/MODE13.H                               |  13 +
 CHAP_4/ALIEN.C                                |  32 +-
 CHAP_4/BLACK4.C                               | 376 ++++++-------
 CHAP_4/BLACK4.H                               |  57 +-
 .../HostApp/CHAP4.xcodeproj/project.pbxproj   | 363 +++++++++++++
 .../contents.xcworkspacedata                  |   7 +
 .../xcshareddata/IDEWorkspaceChecks.plist     |   8 +
 CHAP_4/HostApp/HostApp/ALIEN.h                |  13 +
 CHAP_4/HostApp/HostApp/HostApp.entitlements   |   8 +
 CHAP_4/HostApp/HostApp/PCXDEMO.h              |  13 +
 CHAP_4/HostApp/HostApp/SPEED.h                |  13 +
 CHAP_4/HostApp/HostApp/WORMS.h                |  13 +
 CHAP_4/HostApp/HostApp/cpu.cpp                | 316 +++++++++++
 CHAP_4/HostApp/HostApp/ega.h                  |  62 +++
 CHAP_4/HostApp/HostApp/font.h                 | 313 +++++++++++
 CHAP_4/HostApp/HostApp/main.cpp               |  61 +++
 CHAP_4/HostApp/HostApp/sdl.h                  | 144 +++++
 CHAP_4/PCXDEMO.C                              |  29 +-
 CHAP_4/SPEED.C                                |  30 +-
 CHAP_4/WORMS.C                                |  31 +-
 CHAP_7/CRITTERS.C                             |  31 +-
 CHAP_7/FLOATER.C                              |  32 +-
 .../HostApp/CHAP7.xcodeproj/project.pbxproj   | 375 +++++++++++++
 .../contents.xcworkspacedata                  |   7 +
 .../xcshareddata/IDEWorkspaceChecks.plist     |   8 +
 CHAP_7/HostApp/HostApp/CRITTERS.h             |  13 +
 CHAP_7/HostApp/HostApp/FLOATER.h              |  13 +
 CHAP_7/HostApp/HostApp/HostApp.entitlements   |   8 +
 CHAP_7/HostApp/HostApp/JUMPER.h               |  13 +
 CHAP_7/HostApp/HostApp/LOCKON.h               |  13 +
 CHAP_7/HostApp/HostApp/LOSTNSPC.h             |  13 +
 CHAP_7/HostApp/HostApp/ega.h                  |  62 +++
 CHAP_7/HostApp/HostApp/font.h                 | 313 +++++++++++
 CHAP_7/HostApp/HostApp/main.cpp               |  62 +++
 CHAP_7/HostApp/HostApp/sdl.h                  | 144 +++++
 CHAP_7/JUMPER.C                               |  33 +-
 CHAP_7/LOCKON.C                               | 450 ++++++++--------
 CHAP_7/LOSTNSPC.C                             |  31 +-
 CHAP_8/BLACK8.C                               |  41 +-
 CHAP_8/BLACK8.H                               |   2 -
 .../HostApp/CHAP8.xcodeproj/project.pbxproj   | 327 +++++++++++
 .../contents.xcworkspacedata                  |   7 +
 .../xcshareddata/IDEWorkspaceChecks.plist     |   8 +
 CHAP_8/HostApp/HostApp/HostApp.entitlements   |   8 +
 CHAP_8/HostApp/HostApp/VOCLANO.h              |  13 +
 CHAP_8/HostApp/HostApp/ega.h                  |  62 +++
 CHAP_8/HostApp/HostApp/font.h                 | 313 +++++++++++
 CHAP_8/HostApp/HostApp/main.cpp               |  58 ++
 CHAP_8/HostApp/HostApp/sdl.h                  | 144 +++++
 CHAP_8/VOLCANO.C                              |  32 +-
 174 files changed, 15531 insertions(+), 1761 deletions(-)
 create mode 100644 .gitignore
 create mode 100644 CHAP_11/HostApp/CHAP11.xcodeproj/project.pbxproj
 create mode 100644 CHAP_11/HostApp/CHAP11.xcodeproj/project.xcworkspace/contents.xcworkspacedata
 create mode 100644 CHAP_11/HostApp/CHAP11.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
 create mode 100644 CHAP_11/HostApp/CHAP11.xcodeproj/xcshareddata/xcschemes/CHAP11.xcscheme
 create mode 100644 CHAP_11/HostApp/HostApp/HostApp.entitlements
 create mode 100644 CHAP_11/HostApp/HostApp/LINEDEMO.h
 create mode 100644 CHAP_11/HostApp/HostApp/WIREDEMO.h
 create mode 100644 CHAP_11/HostApp/HostApp/ega.h
 create mode 100644 CHAP_11/HostApp/HostApp/font.h
 create mode 100644 CHAP_11/HostApp/HostApp/main.cpp
 create mode 100644 CHAP_11/HostApp/HostApp/sdl.h
 create mode 100644 CHAP_12/HostApp/CHAP12.xcodeproj/project.pbxproj
 create mode 100644 CHAP_12/HostApp/CHAP12.xcodeproj/project.xcworkspace/contents.xcworkspacedata
 create mode 100644 CHAP_12/HostApp/CHAP12.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
 create mode 100644 CHAP_12/HostApp/CHAP12.xcodeproj/xcshareddata/xcschemes/CHAP12.xcscheme
 create mode 100644 CHAP_12/HostApp/HostApp/GOURDEMO.h
 create mode 100644 CHAP_12/HostApp/HostApp/HostApp.entitlements
 create mode 100644 CHAP_12/HostApp/HostApp/SOLIDEMO.h
 create mode 100644 CHAP_12/HostApp/HostApp/TEXTDEMO.h
 create mode 100644 CHAP_12/HostApp/HostApp/TRIDEMO.h
 create mode 100644 CHAP_12/HostApp/HostApp/ega.h
 create mode 100644 CHAP_12/HostApp/HostApp/font.h
 create mode 100644 CHAP_12/HostApp/HostApp/main.cpp
 create mode 100644 CHAP_12/HostApp/HostApp/sdl.h
 create mode 100644 CHAP_13/HostApp/CHAP13.xcodeproj/project.pbxproj
 create mode 100644 CHAP_13/HostApp/CHAP13.xcodeproj/project.xcworkspace/contents.xcworkspacedata
 create mode 100644 CHAP_13/HostApp/CHAP13.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
 create mode 100644 CHAP_13/HostApp/CHAP13.xcodeproj/xcshareddata/xcschemes/CHAP13.xcscheme
 create mode 100644 CHAP_13/HostApp/HostApp/HostApp.entitlements
 create mode 100644 CHAP_13/HostApp/HostApp/SOL2DEMO.h
 create mode 100644 CHAP_13/HostApp/HostApp/ega.h
 create mode 100644 CHAP_13/HostApp/HostApp/font.h
 create mode 100644 CHAP_13/HostApp/HostApp/main.cpp
 create mode 100644 CHAP_13/HostApp/HostApp/sdl.h
 create mode 100644 CHAP_14/HostApp/CHAP14.xcodeproj/project.pbxproj
 create mode 100644 CHAP_14/HostApp/CHAP14.xcodeproj/project.xcworkspace/contents.xcworkspacedata
 create mode 100644 CHAP_14/HostApp/CHAP14.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
 create mode 100644 CHAP_14/HostApp/CHAP14.xcodeproj/xcshareddata/xcschemes/CHAP13.xcscheme
 create mode 100644 CHAP_14/HostApp/HostApp/HostApp.entitlements
 rename CHAP_14/{ => HostApp/HostApp}/OBJECTS.C (76%)
 create mode 100644 CHAP_14/HostApp/HostApp/OBJECTS.h
 create mode 100644 CHAP_14/HostApp/HostApp/ega.h
 create mode 100644 CHAP_14/HostApp/HostApp/font.h
 create mode 100644 CHAP_14/HostApp/HostApp/main.cpp
 create mode 100644 CHAP_14/HostApp/HostApp/sdl.h
 create mode 100644 CHAP_15/HostApp/CHAP15.xcodeproj/project.pbxproj
 create mode 100644 CHAP_15/HostApp/CHAP15.xcodeproj/project.xcworkspace/contents.xcworkspacedata
 create mode 100644 CHAP_15/HostApp/CHAP15.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
 create mode 100644 CHAP_15/HostApp/CHAP15.xcodeproj/xcshareddata/xcschemes/CHAP13.xcscheme
 create mode 100644 CHAP_15/HostApp/HostApp/BSPDEMO.h
 create mode 100644 CHAP_15/HostApp/HostApp/HostApp.entitlements
 create mode 100755 CHAP_15/HostApp/HostApp/OBJECTS.C
 create mode 100644 CHAP_15/HostApp/HostApp/SOLZDEMO.h
 create mode 100644 CHAP_15/HostApp/HostApp/SORTDEMO.h
 create mode 100644 CHAP_15/HostApp/HostApp/ZDEMO.h
 create mode 100644 CHAP_15/HostApp/HostApp/ega.h
 create mode 100644 CHAP_15/HostApp/HostApp/font.h
 create mode 100644 CHAP_15/HostApp/HostApp/main.cpp
 create mode 100644 CHAP_15/HostApp/HostApp/sdl.h
 create mode 100644 CHAP_16/HostApp/CHAP16.xcodeproj/project.pbxproj
 create mode 100644 CHAP_16/HostApp/CHAP16.xcodeproj/project.xcworkspace/contents.xcworkspacedata
 create mode 100644 CHAP_16/HostApp/CHAP16.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
 create mode 100644 CHAP_16/HostApp/CHAP16.xcodeproj/xcshareddata/xcschemes/CHAP16.xcscheme
 create mode 100644 CHAP_16/HostApp/HostApp/BSPDEMO.h
 create mode 100644 CHAP_16/HostApp/HostApp/HostApp.entitlements
 create mode 100644 CHAP_16/HostApp/HostApp/VOXEL.h
 create mode 100644 CHAP_16/HostApp/HostApp/ega.h
 create mode 100644 CHAP_16/HostApp/HostApp/font.h
 create mode 100644 CHAP_16/HostApp/HostApp/main.cpp
 create mode 100644 CHAP_16/HostApp/HostApp/sdl.h
 create mode 100644 CHAP_17/HostApp/CHAP17.xcodeproj/project.pbxproj
 create mode 100644 CHAP_17/HostApp/CHAP17.xcodeproj/project.xcworkspace/contents.xcworkspacedata
 create mode 100644 CHAP_17/HostApp/CHAP17.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
 create mode 100644 CHAP_17/HostApp/CHAP17.xcodeproj/xcshareddata/xcschemes/CHAP17.xcscheme
 create mode 100644 CHAP_17/HostApp/HostApp/BLAZE3D.h
 create mode 100644 CHAP_17/HostApp/HostApp/BSPDEMO.h
 create mode 100644 CHAP_17/HostApp/HostApp/HostApp.entitlements
 create mode 100644 CHAP_17/HostApp/HostApp/ega.h
 create mode 100644 CHAP_17/HostApp/HostApp/font.h
 create mode 100644 CHAP_17/HostApp/HostApp/main.cpp
 create mode 100644 CHAP_17/HostApp/HostApp/sdl.h
 create mode 100644 CHAP_18/HostApp/CHAP18.xcodeproj/project.pbxproj
 create mode 100644 CHAP_18/HostApp/CHAP18.xcodeproj/project.xcworkspace/contents.xcworkspacedata
 create mode 100644 CHAP_18/HostApp/CHAP18.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
 create mode 100644 CHAP_18/HostApp/CHAP18.xcodeproj/xcshareddata/xcschemes/CHAP18.xcscheme
 create mode 100644 CHAP_18/HostApp/HostApp/HostApp.entitlements
 create mode 100644 CHAP_18/HostApp/HostApp/KRK.h
 create mode 100644 CHAP_18/HostApp/HostApp/ega.h
 create mode 100644 CHAP_18/HostApp/HostApp/font.h
 create mode 100644 CHAP_18/HostApp/HostApp/main.cpp
 create mode 100644 CHAP_18/HostApp/HostApp/sdl.h
 create mode 100644 CHAP_3/HostApp/CHAP3.xcodeproj/project.pbxproj
 create mode 100644 CHAP_3/HostApp/CHAP3.xcodeproj/project.xcworkspace/contents.xcworkspacedata
 create mode 100644 CHAP_3/HostApp/CHAP3.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
 create mode 100644 CHAP_3/HostApp/HostApp/HostApp.entitlements
 create mode 100644 CHAP_3/HostApp/HostApp/cpu.cpp
 create mode 100644 CHAP_3/HostApp/HostApp/ega.h
 create mode 100644 CHAP_3/HostApp/HostApp/font.h
 create mode 100644 CHAP_3/HostApp/HostApp/main.cpp
 create mode 100644 CHAP_3/HostApp/HostApp/sdl.h
 create mode 100644 CHAP_3/MODE13.H
 create mode 100644 CHAP_4/HostApp/CHAP4.xcodeproj/project.pbxproj
 create mode 100644 CHAP_4/HostApp/CHAP4.xcodeproj/project.xcworkspace/contents.xcworkspacedata
 create mode 100644 CHAP_4/HostApp/CHAP4.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
 create mode 100644 CHAP_4/HostApp/HostApp/ALIEN.h
 create mode 100644 CHAP_4/HostApp/HostApp/HostApp.entitlements
 create mode 100644 CHAP_4/HostApp/HostApp/PCXDEMO.h
 create mode 100644 CHAP_4/HostApp/HostApp/SPEED.h
 create mode 100644 CHAP_4/HostApp/HostApp/WORMS.h
 create mode 100644 CHAP_4/HostApp/HostApp/cpu.cpp
 create mode 100644 CHAP_4/HostApp/HostApp/ega.h
 create mode 100644 CHAP_4/HostApp/HostApp/font.h
 create mode 100644 CHAP_4/HostApp/HostApp/main.cpp
 create mode 100644 CHAP_4/HostApp/HostApp/sdl.h
 create mode 100644 CHAP_7/HostApp/CHAP7.xcodeproj/project.pbxproj
 create mode 100644 CHAP_7/HostApp/CHAP7.xcodeproj/project.xcworkspace/contents.xcworkspacedata
 create mode 100644 CHAP_7/HostApp/CHAP7.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
 create mode 100644 CHAP_7/HostApp/HostApp/CRITTERS.h
 create mode 100644 CHAP_7/HostApp/HostApp/FLOATER.h
 create mode 100644 CHAP_7/HostApp/HostApp/HostApp.entitlements
 create mode 100644 CHAP_7/HostApp/HostApp/JUMPER.h
 create mode 100644 CHAP_7/HostApp/HostApp/LOCKON.h
 create mode 100644 CHAP_7/HostApp/HostApp/LOSTNSPC.h
 create mode 100644 CHAP_7/HostApp/HostApp/ega.h
 create mode 100644 CHAP_7/HostApp/HostApp/font.h
 create mode 100644 CHAP_7/HostApp/HostApp/main.cpp
 create mode 100644 CHAP_7/HostApp/HostApp/sdl.h
 create mode 100644 CHAP_8/HostApp/CHAP8.xcodeproj/project.pbxproj
 create mode 100644 CHAP_8/HostApp/CHAP8.xcodeproj/project.xcworkspace/contents.xcworkspacedata
 create mode 100644 CHAP_8/HostApp/CHAP8.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
 create mode 100644 CHAP_8/HostApp/HostApp/HostApp.entitlements
 create mode 100644 CHAP_8/HostApp/HostApp/VOCLANO.h
 create mode 100644 CHAP_8/HostApp/HostApp/ega.h
 create mode 100644 CHAP_8/HostApp/HostApp/font.h
 create mode 100644 CHAP_8/HostApp/HostApp/main.cpp
 create mode 100644 CHAP_8/HostApp/HostApp/sdl.h

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..9f6b526
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,9 @@
+## User settings
+xcuserdata/
+
+## Xcode 8 and earlier
+*.xcscmblueprint
+*.xccheckout
+
+Build/
+DerivedData/
\ No newline at end of file
diff --git a/CHAP_11/BLACK11.C b/CHAP_11/BLACK11.C
index 599c229..ed7ced5 100755
--- a/CHAP_11/BLACK11.C
+++ b/CHAP_11/BLACK11.C
@@ -1,15 +1,10 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 #include <search.h>             // this one is needed for qsort()
@@ -18,20 +13,16 @@
 
 #include "black3.h"
 #include "black4.h"
-#include "black5.h"
-#include "black6.h"
-#include "black8.h"
-#include "black9.h"
 #include "black11.h"
 
 // G L O B A L S //////////////////////////////////////////////////////////////
 
 float  clip_near_z   = 100,        // the near or hither clipping plane
-       clip_far_z    = 3000,       // the far or yon clipping plane
+       clip_far_z    = 3200,       // the far or yon clipping plane
        screen_width  = 320,        // dimensions of the screen
        screen_heigth = 200;
 
-int viewing_distance = 200;         // distance of projection plane from camera
+float viewing_distance = 200;         // distance of projection plane from camera
 
 point_3d view_point  = {0,0,0,1};  // position of camera
 
@@ -88,7 +79,7 @@ RGB_color color;
 
 // generate 64 shades of grey
 
-for (index=0; index<64; index++)
+for (index=0; index<255-16; index++)
     {
     // grey equals equal percentage of Red, Green and Blue
 
@@ -110,7 +101,7 @@ for (index=0; index<64; index++)
 void Draw_Triangle_2D_Text(int x1,int y1,
                            int x2,int y2,
                            int x3,int y3,
-                           unsigned char far *buffer,
+                           unsigned char *buffer,
                            int texture_index)
 {
 // this function draws a textured triangle, but doesn't perform any clipping
@@ -134,9 +125,9 @@ float a,b,c,d,det,          // texture mapping inverse matrix elements
       u_start,v_start,      // the starting u,v coordinates on each line
       u_curr,v_curr;        // the current u,v texture coordinates
 
-unsigned char far *dest_addr;   // final destination address of memory write
+unsigned char *dest_addr;   // final destination address of memory write
 
-unsigned char far *text;        // texture memory
+unsigned char *text;        // texture memory
 
 // assign text pointer to current texture map
 
@@ -315,7 +306,7 @@ for (y--; y<=bottom_2; y++,dest_addr+=320)
 void Draw_Triangle_2D_Gouraud(int x1,int y1,
                               int x2,int y2,
                               int x3,int y3,
-                              unsigned char far *buffer,
+                              unsigned char *buffer,
                               int intensity_1,
                               int intensity_2,
                               int intensity_3)
@@ -341,7 +332,7 @@ float intensity_right,   // the intensity of the right edge of the triangle
       intensity_mid,     // the average between the right and left
       delta_y21,delta_y31;  // the y delta's
 
-unsigned char far *dest_addr; // pointer to memory space of video write
+unsigned char *dest_addr; // pointer to memory space of video write
 
 // compute height of sub triangles
 
@@ -467,11 +458,14 @@ for (y--; y<=bottom_2; y++,dest_addr+=320)
 
 ////////////////////////////////////////////////////////////////////////////////
 
-void Triangle_Line(unsigned char far *dest_addr,
+void Triangle_Line(unsigned char *dest_addr,
                    unsigned int xs,
                    unsigned int xe,
                    int color)
 {
+    memset((unsigned char *)dest_addr+(unsigned int)xs,
+            color,
+            (unsigned int)(xe-xs+1));
 
 // this function draws a fast horizontal line by using WORD size writes
 // it's speed can be doubled by use of an external 32 bit DWORD version in
@@ -479,44 +473,44 @@ void Triangle_Line(unsigned char far *dest_addr,
 
 // plot pixels at ends of line first
 
-if (xs & 0x0001)
-   {
-   // plot a single starting pixel and move xs to an even boundary
-
-   dest_addr[xs++] = (unsigned char)color;
-
-   } // end if
-
-if (!(xe & 0x0001))
-   {
-   // plot a single terminating pixel and move xe back to an odd boundary
-
-   dest_addr[xe--] = (unsigned char)color;
-
-   } // end if
-
-// now plot the line
-
-dest_addr+=xs;
-
-// now blast the middle part of the line a WORD at a time, later use
-// an external assembly program to do it a DOUBLE WORD at a time!
-
-_asm
-   {
-   les di,dest_addr      ; point es:di at data area
-
-   mov al,BYTE PTR color ; move into al and ah the color
-   mov ah,al
-
-   mov cx,xe             ; compute number of words to move  (xe-xs+1)/2
-   sub cx,xs
-   inc cx
-   shr cx,1              ; divide by 2
-
-   rep stosw             ; draw the line
-
-   } // end asm
+//if (xs & 0x0001)
+//   {
+//   // plot a single starting pixel and move xs to an even boundary
+//
+//   dest_addr[xs++] = (unsigned char)color;
+//
+//   } // end if
+//
+//if (!(xe & 0x0001))
+//   {
+//   // plot a single terminating pixel and move xe back to an odd boundary
+//
+//   dest_addr[xe--] = (unsigned char)color;
+//
+//   } // end if
+//
+//// now plot the line
+//
+//dest_addr+=xs;
+//
+//// now blast the middle part of the line a WORD at a time, later use
+//// an external assembly program to do it a DOUBLE WORD at a time!
+//
+//_asm
+//   {
+//   les di,dest_addr      ; point es:di at data area
+//
+//   mov al,BYTE PTR color ; move into al and ah the color
+//   mov ah,al
+//
+//   mov cx,xe             ; compute number of words to move  (xe-xs+1)/2
+//   sub cx,xs
+//   inc cx
+//   shr cx,1              ; divide by 2
+//
+//   rep stosw             ; draw the line
+//
+//   } // end asm
 
 } // end Triangle_Line
 
@@ -536,7 +530,7 @@ int temp_x,        // used during sorting as temps
     right,         // used by clipping
     left;
 
-unsigned char far *dest_addr;
+unsigned char *dest_addr;
 
 // test order of x1 and x2
 
@@ -596,7 +590,7 @@ if (x1>=poly_clip_min_x && x1<=poly_clip_max_x &&
 
          Triangle_Line(dest_addr,(unsigned int)xs,(unsigned int)xe,color);
 
-        //_fmemset((unsigned char far *)dest_addr+(unsigned int)xs,
+        //_fmemset((unsigned char *)dest_addr+(unsigned int)xs,
         //        color,
         //        (unsigned int)(xe-xs));
 
@@ -650,7 +644,7 @@ else
 
         Triangle_Line(dest_addr,(unsigned int)left,(unsigned int)right,color);
 
-       //_fmemset((unsigned char far *)dest_addr+(unsigned int)left,
+       //_fmemset((unsigned char *)dest_addr+(unsigned int)left,
        //        color,
        //        (unsigned int)(right-left));
 
@@ -677,7 +671,7 @@ int temp_x,        // used during sorting as temps
     right,         // used by clipping
     left;
 
-unsigned char far *dest_addr;
+unsigned char *dest_addr;
 
 // test order of x1 and x2
 
@@ -736,7 +730,7 @@ if (x1>=poly_clip_min_x && x1<=poly_clip_max_x &&
 
         Triangle_Line(dest_addr,(unsigned int)xs,(unsigned int)xe,color);
 
-        //_fmemset((unsigned char far *)dest_addr+(unsigned int)xs,
+        //_fmemset((unsigned char *)dest_addr+(unsigned int)xs,
         //        color,
         //        (unsigned int)(xe-xs));
 
@@ -787,7 +781,7 @@ else
 
        Triangle_Line(dest_addr,(unsigned int)left,(unsigned int)right,color);
 
-       //_fmemset((unsigned char far *)dest_addr+(unsigned int)left,
+       //_fmemset((unsigned char *)dest_addr+(unsigned int)left,
        //        color,
        //       (unsigned int)(right-left));
 
@@ -1216,7 +1210,7 @@ float rad;
 for (angle=0; angle<=360; angle++)
     {
 
-    rad = (float) (3.14159*(float)angle/(float)180);
+    rad = (float) (M_PI*(float)angle/(float)180);
 
     cos_look[angle] = (float)cos(rad);
     sin_look[angle] = (float)sin(rad);
@@ -1915,7 +1909,7 @@ while(1)
 
      // eat leading white space
 
-     while(buffer[index]==' ')
+     while(buffer[index]==' ' || buffer[index]=='\r')
            index++;
 
      // read line into buffer, if "#" arrives in data stream then disregard
@@ -2452,12 +2446,18 @@ else
 
 //////////////////////////////////////////////////////////////////////////////
 
-void Remove_Backfaces_And_Shade(object_ptr the_object)
+void Remove_Backfaces_And_Shade(object_ptr the_object, int force_color)
 {
-// this function removes all the backfaces of an object by setting the removed
+// this function removes all the backfaces of an object by setting the visibility
 // flag. This function assumes that the object has been transformed into
-// camera coordinates. Also, the function computes the flat shading of the
-// object
+// camera coordinates. Also, the function takes into consideration is the
+// polygons are one or two sided and executed the minimum amount of code
+// in addition to perform the shading calculations
+
+// also, this function has been altered from the standard function found in
+// black17.c by the addition of the parameter force_color, this is used
+// to force all the polys to a specific color. this is needed for the
+// explosion vaporization effect
 
 int vertex_0,         // vertex indices
     vertex_1,
@@ -2467,9 +2467,9 @@ int vertex_0,         // vertex indices
 float dp,             // the result of the dot product
       intensity;      // the final intensity of the surface
 
-vector_3d u,v,           // general working vectors
-          normal,        // the normal to the surface begin processed
-          sight;         // line of sight vector
+vector_3d u,v,        // general working vectors
+          normal,     // the normal to the surface begin processed
+          sight;      // line of sight vector
 
 // for each polygon in the object determine if it is pointing away from the
 // viewpoint and direction
@@ -2477,54 +2477,171 @@ vector_3d u,v,           // general working vectors
 for (curr_poly=0; curr_poly<the_object->num_polys; curr_poly++)
     {
 
-    // compute two vectors on polygon that have the same intial points
+    // is this polygon two sised or one sided
 
-    vertex_0 = the_object->polys[curr_poly].vertex_list[0];
-    vertex_1 = the_object->polys[curr_poly].vertex_list[1];
-    vertex_2 = the_object->polys[curr_poly].vertex_list[2];
+    if (the_object->polys[curr_poly].two_sided == ONE_SIDED)
+       {
 
-    // the vector u = vo->v1
+       // compute two vectors on polygon that have the same intial points
 
-    Make_Vector_3D((point_3d_ptr)&the_object->vertices_world[vertex_0],
-                   (point_3d_ptr)&the_object->vertices_world[vertex_1],
-                   (vector_3d_ptr)&u);
+       vertex_0 = the_object->polys[curr_poly].vertex_list[0];
+       vertex_1 = the_object->polys[curr_poly].vertex_list[1];
+       vertex_2 = the_object->polys[curr_poly].vertex_list[2];
 
-    // the vector v = vo-v2
+       // the vector u = vo->v1
 
-    Make_Vector_3D((point_3d_ptr)&the_object->vertices_world[vertex_0],
-                   (point_3d_ptr)&the_object->vertices_world[vertex_2],
-                   (vector_3d_ptr)&v);
+       Make_Vector_3D((point_3d_ptr)&the_object->vertices_world[vertex_0],
+                      (point_3d_ptr)&the_object->vertices_world[vertex_1],
+                      (vector_3d_ptr)&u);
 
-    // compute the normal to polygon v x u
+       // the vector v = vo-v2
 
-    Cross_Product_3D((vector_3d_ptr)&v,
-                     (vector_3d_ptr)&u,
-                     (vector_3d_ptr)&normal);
+       Make_Vector_3D((point_3d_ptr)&the_object->vertices_world[vertex_0],
+                      (point_3d_ptr)&the_object->vertices_world[vertex_2],
+                      (vector_3d_ptr)&v);
+
+       // compute the normal to polygon v x u
+
+       Cross_Product_3D((vector_3d_ptr)&v,
+                        (vector_3d_ptr)&u,
+                        (vector_3d_ptr)&normal);
 
-    // compute the line of sight vector, since all coordinates are world all
-    // object vertices are already relative to (0,0,0), thus
+       // compute the line of sight vector, since all coordinates are world all
+       // object vertices are already relative to (0,0,0), thus
 
-    sight.x = view_point.x-the_object->vertices_world[vertex_0].x;
-    sight.y = view_point.y-the_object->vertices_world[vertex_0].y;
-    sight.z = view_point.z-the_object->vertices_world[vertex_0].z;
+       sight.x = view_point.x-the_object->vertices_world[vertex_0].x;
+       sight.y = view_point.y-the_object->vertices_world[vertex_0].y;
+       sight.z = view_point.z-the_object->vertices_world[vertex_0].z;
 
-    // compute the dot product between line of sight vector and normal to surface
+       // compute the dot product between line of sight vector and normal to surface
 
-    dp = Dot_Product_3D((vector_3d_ptr)&normal,(vector_3d_ptr)&sight);
+       dp = Dot_Product_3D((vector_3d_ptr)&normal,(vector_3d_ptr)&sight);
+
+       // is surface visible
+
+       if (dp>0)
+          {
+          // set visible flag
 
-    // set the clip flagged appropriately
+          the_object->polys[curr_poly].visible = 1;
 
-    if (dp>0)
+
+// a little cludge
+
+          // first test for a forced color
+
+          if (force_color>-1)
+             {
+             the_object->polys[curr_poly].shade = force_color;
+             continue;
+
+             } // end if forced color
+
+// end a little cludge
+
+          // compute light intensity if needed
+
+          if (the_object->polys[curr_poly].shading==FLAT_SHADING)
+             {
+
+             // compute the dot product between the light source vector
+             // and normal vector to surface
+
+             dp = Dot_Product_3D((vector_3d_ptr)&normal,
+                                 (vector_3d_ptr)&light_source);
+
+             // test if light ray is reflecting off surface
+
+             if (dp>0)
+                {
+                // now cos 0 = (u.v)/|u||v| or
+
+                intensity = ambient_light + (dp*(the_object->polys[curr_poly].normal_length));
+
+                // test if intensity has overflowed
+
+                if (intensity > 15)
+                    intensity = 15;
+
+                // intensity now varies from 0-1, 0 being black or grazing and 1 being
+                // totally illuminated. use the value to index into color table
+
+                the_object->polys[curr_poly].shade =
+                           the_object->polys[curr_poly].color - (int)intensity;
+
+                } // end if light is reflecting off surface
+             else
+                the_object->polys[curr_poly].shade =
+                the_object->polys[curr_poly].color - (int)ambient_light;
+
+             } // end if use flat shading
+          else
+             {
+             // assume constant shading and simply assign color to shade
+
+             the_object->polys[curr_poly].shade = the_object->polys[curr_poly].color;
+
+             } // end else constant shading
+
+          } // end if dp>0
+       else
+          the_object->polys[curr_poly].visible = 0;
+
+
+       } // end if one sided
+    else
        {
+       // else polygon is always visible i.e. two sided, set visibility flag
+       // so engine renders it
+
        // set visibility
 
        the_object->polys[curr_poly].visible = 1;
 
-       // compute light intensity if needed
 
+// a little cludge
+
+       // first test for a forced color
+
+       if (force_color>-1)
+          {
+          the_object->polys[curr_poly].shade = force_color;
+          continue;
+
+          } // end if forced color
+
+// end a little cludge
+
+       // perform shading calculation
 
        if (the_object->polys[curr_poly].shading==FLAT_SHADING)
           {
+          // compute normal
+
+          // compute two vectors on polygon that have the same intial points
+
+          vertex_0 = the_object->polys[curr_poly].vertex_list[0];
+          vertex_1 = the_object->polys[curr_poly].vertex_list[1];
+          vertex_2 = the_object->polys[curr_poly].vertex_list[2];
+
+          // the vector u = vo->v1
+
+          Make_Vector_3D((point_3d_ptr)&the_object->vertices_world[vertex_0],
+                         (point_3d_ptr)&the_object->vertices_world[vertex_1],
+                         (vector_3d_ptr)&u);
+
+          // the vector v = vo-v2
+
+          Make_Vector_3D((point_3d_ptr)&the_object->vertices_world[vertex_0],
+                         (point_3d_ptr)&the_object->vertices_world[vertex_2],
+                         (vector_3d_ptr)&v);
+
+          // compute the normal to polygon v x u
+
+          Cross_Product_3D((vector_3d_ptr)&v,
+                           (vector_3d_ptr)&u,
+                           (vector_3d_ptr)&normal);
+
 
           // compute the dot product between the light source vector
           // and normal vector to surface
@@ -2538,11 +2655,11 @@ for (curr_poly=0; curr_poly<the_object->num_polys; curr_poly++)
              {
              // now cos 0 = (u.v)/|u||v| or
 
-             intensity = ambient_light + (15*dp/(the_object->polys[curr_poly].normal_length));
+             intensity = ambient_light + (dp*(the_object->polys[curr_poly].normal_length));
 
              // test if intensity has overflowed
 
-             if (intensity >15)
+             if (intensity > 15)
                  intensity = 15;
 
              // intensity now varies from 0-1, 0 being black or grazing and 1 being
@@ -2551,8 +2668,6 @@ for (curr_poly=0; curr_poly<the_object->num_polys; curr_poly++)
              the_object->polys[curr_poly].shade =
                         the_object->polys[curr_poly].color - (int)intensity;
 
-             // printf("\nintensity of polygon %d is %f",curr_poly,intensity);
-
              } // end if light is reflecting off surface
           else
              the_object->polys[curr_poly].shade =
@@ -2565,22 +2680,9 @@ for (curr_poly=0; curr_poly<the_object->num_polys; curr_poly++)
 
           the_object->polys[curr_poly].shade = the_object->polys[curr_poly].color;
 
-          } // end else constat shading
-
-       } // end if face is visible
-    else
-       the_object->polys[curr_poly].visible = 0; // set invisible flag
-
-#if DEBUG
+          } // end else constant shading
 
-    printf("\npolygon #%d",curr_poly);
-    printf("\nu      = [%f,%f,%f]",u.x,u.y,u.z);
-    printf("\nv      = [%f,%f,%f]",v.x,v.y,v.z);
-    printf("\nnormal = [%f,%f,%f]",normal.x,normal.y,normal.z);
-    printf("\nsight  = [%f,%f,%f]",sight.x,sight.y,sight.z);
-    printf("\ndp     = %f\n",dp);
-
-#endif
+       } // end else two sided
 
     } // end for curr_poly
 
@@ -2768,7 +2870,7 @@ void Project_Polys(void)
 
 //////////////////////////////////////////////////////////////////////////////
 
-void Draw_Line(int xo, int yo, int x1,int y1, unsigned char color,unsigned char far *vb_start)
+void Draw_Line(int xo, int yo, int x1,int y1, unsigned char color,unsigned char *vb_start)
 {
 // this function draws a line from xo,yo to x1,y1 using differential error
 // terms (based on Bresenahams work)
@@ -2896,7 +2998,7 @@ else
 
 ///////////////////////////////////////////////////////////////////////////////
 
-void Draw_Object_Wire(object_ptr the_object)
+void Draw_Object_Wire(object_ptr the_object, int color)
 {
 // this function draws an object out of wires
 
@@ -2930,15 +3032,15 @@ for (curr_poly=0; curr_poly<the_object->num_polys; curr_poly++)
 
         vertex=the_object->polys[curr_poly].vertex_list[curr_vertex];
 
-        x1 = the_object->vertices_camera[vertex].x;
-        y1 = the_object->vertices_camera[vertex].y;
-        z1 = the_object->vertices_camera[vertex].z;
+        x1 = the_object->vertices_world[vertex].x;
+        y1 = the_object->vertices_world[vertex].y;
+        z1 = the_object->vertices_world[vertex].z;
 
         vertex=the_object->polys[curr_poly].vertex_list[curr_vertex+1];
 
-        x2 = the_object->vertices_camera[vertex].x;
-        y2 = the_object->vertices_camera[vertex].y;
-        z2 = the_object->vertices_camera[vertex].z;
+        x2 = the_object->vertices_world[vertex].x;
+        y2 = the_object->vertices_world[vertex].y;
+        z2 = the_object->vertices_world[vertex].z;
 
         // convert to screen ccordinates
 
@@ -2962,7 +3064,7 @@ for (curr_poly=0; curr_poly<the_object->num_polys; curr_poly++)
         if (Clip_Line(&ix1,&iy1,&ix2,&iy2))
            {
            Draw_Line((int)ix1,(int)iy1,(int)ix2,(int)iy2,
-                     (unsigned char)the_object->polys[curr_poly].color,
+                     (unsigned char)color,
                      double_buffer);
 
            } // end if clip
@@ -2978,9 +3080,9 @@ for (curr_poly=0; curr_poly<the_object->num_polys; curr_poly++)
 
     vertex=the_object->polys[curr_poly].vertex_list[0];
 
-    x2 = the_object->vertices_camera[vertex].x;
-    y2 = the_object->vertices_camera[vertex].y;
-    z2 = the_object->vertices_camera[vertex].z;
+    x2 = the_object->vertices_world[vertex].x;
+    y2 = the_object->vertices_world[vertex].y;
+    z2 = the_object->vertices_world[vertex].z;
 
     // compute screen coordinates
 
@@ -2997,7 +3099,7 @@ for (curr_poly=0; curr_poly<the_object->num_polys; curr_poly++)
     if (Clip_Line(&ix1,&iy1,&ix2,&iy2))
        {
        Draw_Line((int)ix1,(int)iy1,(int)ix2,(int)iy2,
-                 (unsigned char)the_object->polys[curr_poly].color,
+                 (unsigned char)color,
                  double_buffer);
 
        } // end if clip
@@ -3242,73 +3344,63 @@ for (curr_poly=0; curr_poly<num_polys_frame; curr_poly++)
 
 } // end Draw_Poly_List
 
-//////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////
 
-int Poly_Compare(facet **arg1, facet **arg2)
+void Compute_Average_Z(void)
 {
-// this function comapares the average z's of two polygons and is used by the
-// depth sort surface ordering algorithm
-
-float z1,z2;
-
-facet_ptr poly_1,poly_2;
-
-// dereference the poly pointers
+// this function pre-computes the average z of each polygon, so that the
+// polygon sorter doesn't compute each z more than once
 
-poly_1 = (facet_ptr)*arg1;
-poly_2 = (facet_ptr)*arg2;
+int index;
 
-// compute z average of each polygon
+for (index=0; index<num_polys_frame; index++)
+    {
 
-if (poly_1->num_points==3)
-   {
-   // compute average of 3 point polygon
+    if (world_poly_storage[index].num_points==3)
+       {
+       world_poly_storage[index].average_z =
 
-   z1 = (float)0.33333*(poly_1->vertex_list[0].z+
-                        poly_1->vertex_list[1].z+
-                        poly_1->vertex_list[2].z);
-   }
-else
-   {
-   // compute average of 4 point polygon
+                   (int)(0.3333*(world_poly_storage[index].vertex_list[0].z+
+                                 world_poly_storage[index].vertex_list[1].z+
+                                 world_poly_storage[index].vertex_list[2].z));
 
-   z1 = (float)0.25*(poly_1->vertex_list[0].z+
-                     poly_1->vertex_list[1].z+
-                     poly_1->vertex_list[2].z+
-                     poly_1->vertex_list[3].z);
+       } // end if
+    else
+       {
+       world_poly_storage[index].average_z =
 
-   } // end else
+                      (int)(0.25*(world_poly_storage[index].vertex_list[0].z+
+                                  world_poly_storage[index].vertex_list[1].z+
+                                  world_poly_storage[index].vertex_list[2].z+
+                                  world_poly_storage[index].vertex_list[3].z));
 
+       } // end if
 
+    } // end for index
 
+} // end Compute_Average_Z
 
-// now polygon 2
+//////////////////////////////////////////////////////////////////////////////
 
-if (poly_2->num_points==3)
-   {
-   // compute average of 3 point polygon
+int Poly_Compare(const void *v1, const void *v2)
+{
+// this function comapares the average z's of two polygons and is used by the
+// depth sort surface ordering algorithm
 
-   z2 =(float)0.33333*(poly_2->vertex_list[0].z+
-                       poly_2->vertex_list[1].z+
-                       poly_2->vertex_list[2].z);
-   }
-else
-   {
-   // compute average of 4 point polygon
+facet **arg1 = (facet **)v1;
+facet **arg2 = (facet **)v2;
 
-   z2 = (float)0.25*(poly_2->vertex_list[0].z+
-                     poly_2->vertex_list[1].z+
-                     poly_2->vertex_list[2].z+
-                     poly_2->vertex_list[3].z);
+facet_ptr poly_1,poly_2;
 
-   } // end else
+// dereference the poly pointers
 
-// compare z1 and z2, such that polys' will be sorted in descending Z order
+poly_1 = (facet_ptr)*arg1;
+poly_2 = (facet_ptr)*arg2;
 
-if (z1>z2)
+if (poly_1->average_z>poly_2->average_z)
    return(-1);
 else
-if (z1<z2)
+if (poly_1->average_z<poly_2->average_z)
    return(1);
 else
    return(0);
@@ -3359,6 +3451,8 @@ void Sort_Poly_List(void)
 // this function does a simple z sort on the poly list to order surfaces
 // the list is sorted in descending order, i.e. farther polygons first
 
+Compute_Average_Z();
+
 qsort((void *)world_polys,num_polys_frame, sizeof(facet_ptr), Poly_Compare);
 
 } // end Sort_Poly_List
@@ -3390,9 +3484,9 @@ for (index=0; index<=255; index++)
 
     // store the color in next element of palette
 
-    the_palette->colors[index].red   = color.red;
-    the_palette->colors[index].green = color.green;
-    the_palette->colors[index].blue  = color.blue;
+    the_palette->colors[index].red   = color.red / 63.0 * 255;
+    the_palette->colors[index].green = color.green / 63.0 * 255;
+    the_palette->colors[index].blue  = color.blue / 63.0 * 255;
 
     } // end for index
 
@@ -3451,6 +3545,3 @@ fclose(fp);
 return(1);
 
 } // end Save_Palette_Disk
-
-
-
\ No newline at end of file
diff --git a/CHAP_11/BLACK11.H b/CHAP_11/BLACK11.H
index 7011333..8b2c23f 100755
--- a/CHAP_11/BLACK11.H
+++ b/CHAP_11/BLACK11.H
@@ -1,5 +1,5 @@
 
-// BLACK11.H - header file
+// BLACK11_.H - header file
 
 
 // D E F I N E S /////////////////////////////////////////////////////////////
@@ -13,6 +13,17 @@
 
 // polygon shading specifiers for PLG files
 
+// format = 0xh3 h2 h1h0
+// h3   = shading type
+// h2   = special attributes= d3d2d1d0
+
+// d3,d2,d1 unused, d0 = two sided flag, 0 = 1 sided, 1 = 2 sided
+
+// h1h0 = color 0-255
+
+#define ONE_SIDED               0 // number of sides polygon has
+#define TWO_SIDED               1
+
 #define CONSTANT_SHADING        0
 #define FLAT_SHADING            1
 #define GOURAUD_SHADING         2 (actually metallic under PLG defintion)
@@ -157,6 +168,8 @@ typedef struct facet_typ
 
         float normal_length;  // holds pre-computed length of normal
 
+        int average_z;        // holds average z, used in sorting
+
         } facet, *facet_ptr;
 
 // this structure holds an object
@@ -251,7 +264,7 @@ int PLG_Load_Object(object_ptr the_object,char *filename,float scale);
 
 void Clip_Object_3D(object_ptr the_object, int mode);
 
-void Remove_Backfaces_And_Shade(object_ptr the_object);
+void Remove_Backfaces_And_Shade(object_ptr the_object, int force_color);
 
 int Remove_Object(object_ptr the_object, int mode);
 
@@ -265,9 +278,9 @@ void Print_Poly_List(void);
 
 void Project_Polys(void);
 
-void Draw_Line(int xo, int yo, int x1,int y1, unsigned char color,unsigned char far *vb_start);
+void Draw_Line(int xo, int yo, int x1,int y1, unsigned char color,unsigned char *vb_start);
 
-void Draw_Object_Wire(object_ptr the_object);
+void Draw_Object_Wire(object_ptr the_object, int color);
 
 void Draw_Object_Solid(object_ptr the_object);
 
@@ -281,7 +294,7 @@ void Draw_Top_Triangle(int x1,int y1, int x2,int y2, int x3,int y3,int color);
 
 void Draw_Bottom_Triangle(int x1,int y1, int x2,int y2, int x3,int y3,int color);
 
-void Triangle_Line(unsigned char far *dest_addr,
+void Triangle_Line(unsigned char *dest_addr,
                    unsigned int xs,
                    unsigned int xe,
                    int color);
@@ -296,7 +309,7 @@ void Make_Grey_Palette(void);
 void Draw_Triangle_2D_Gouraud(int x1,int y1,
                               int x2,int y2,
                               int x3,int y3,
-                              unsigned char far *buffer,
+                              unsigned char *buffer,
                               int intensity_1,
                               int intensity_2,
                               int intensity_3);
@@ -305,7 +318,7 @@ void Draw_Triangle_2D_Gouraud(int x1,int y1,
 void Draw_Triangle_2D_Text(int x1,int y1,
                            int x2,int y2,
                            int x3,int y3,
-                           unsigned char far *buffer,
+                           unsigned char *buffer,
                            int texture_index);
 
 
@@ -316,7 +329,7 @@ extern float  clip_near_z,         // the near or hither clipping plane
               screen_width,        // dimensions of the screen
               screen_heigth;
 
-extern int viewing_distance;       // distance of projection plane from camera
+extern float viewing_distance;       // distance of projection plane from camera
 
 extern point_3d view_point;        // position of camera
 
@@ -357,6 +370,3 @@ extern int poly_clip_min_x,
            poly_clip_max_y;
 
 extern sprite textures;              // this holds the textures
-
-
-
\ No newline at end of file
diff --git a/CHAP_11/HostApp/CHAP11.xcodeproj/project.pbxproj b/CHAP_11/HostApp/CHAP11.xcodeproj/project.pbxproj
new file mode 100644
index 0000000..e64016d
--- /dev/null
+++ b/CHAP_11/HostApp/CHAP11.xcodeproj/project.pbxproj
@@ -0,0 +1,348 @@
+// !$*UTF8*$!
+{
+	archiveVersion = 1;
+	classes = {
+	};
+	objectVersion = 50;
+	objects = {
+
+/* Begin PBXBuildFile section */
+		2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 2DA6C5AF258AA66B002B1931 /* main.cpp */; };
+		3E017B4128ECB2DD00D286E9 /* WIREDEMO.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E017B4028ECB2DD00D286E9 /* WIREDEMO.C */; };
+		3E017B4428ECB33A00D286E9 /* BLACK8.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E017B4328ECB33A00D286E9 /* BLACK8.C */; };
+		3E017B4828ECB5A000D286E9 /* CUBEW.PLG in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3E017B4728ECB59600D286E9 /* CUBEW.PLG */; };
+		3E017B4928ECB5A100D286E9 /* PYRAMIDW.PLG in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3E017B4628ECB59600D286E9 /* PYRAMIDW.PLG */; };
+		3E3C579628E883D700637704 /* BLACK3.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E3C579528E883D300637704 /* BLACK3.C */; };
+		3EA2534228EB872400E2BA35 /* BLACK11.C in Sources */ = {isa = PBXBuildFile; fileRef = 3EA2534028EB872400E2BA35 /* BLACK11.C */; };
+		3EF00A5928E9A177000AC74A /* BLACK4.C in Sources */ = {isa = PBXBuildFile; fileRef = 3EF00A4F28E99F84000AC74A /* BLACK4.C */; };
+/* End PBXBuildFile section */
+
+/* Begin PBXCopyFilesBuildPhase section */
+		2DA6C5AA258AA66B002B1931 /* CopyFiles */ = {
+			isa = PBXCopyFilesBuildPhase;
+			buildActionMask = 12;
+			dstPath = "";
+			dstSubfolderSpec = 16;
+			files = (
+				3E017B4828ECB5A000D286E9 /* CUBEW.PLG in CopyFiles */,
+				3E017B4928ECB5A100D286E9 /* PYRAMIDW.PLG in CopyFiles */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXCopyFilesBuildPhase section */
+
+/* Begin PBXFileReference section */
+		2D2793D725AD90B500DEC620 /* font.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = font.h; sourceTree = "<group>"; };
+		2D9EAF1F258E6A4300297C9C /* sdl.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = sdl.h; sourceTree = "<group>"; };
+		2D9EAF26258E750E00297C9C /* HostApp.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = HostApp.entitlements; sourceTree = "<group>"; };
+		2DA6C5AC258AA66B002B1931 /* CHAP11 */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = CHAP11; sourceTree = BUILT_PRODUCTS_DIR; };
+		2DA6C5AF258AA66B002B1931 /* main.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = main.cpp; sourceTree = "<group>"; };
+		2DB9F18C258EA679000A3299 /* ega.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = ega.h; sourceTree = "<group>"; };
+		3E017B4028ECB2DD00D286E9 /* WIREDEMO.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = WIREDEMO.C; path = ../../WIREDEMO.C; sourceTree = "<group>"; };
+		3E017B4228ECB33A00D286E9 /* BLACK8.H */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.h; name = BLACK8.H; path = ../../../CHAP_8/BLACK8.H; sourceTree = "<group>"; };
+		3E017B4328ECB33A00D286E9 /* BLACK8.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK8.C; path = ../../../CHAP_8/BLACK8.C; sourceTree = "<group>"; };
+		3E017B4528ECB4CE00D286E9 /* WIREDEMO.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = WIREDEMO.h; sourceTree = "<group>"; };
+		3E017B4628ECB59600D286E9 /* PYRAMIDW.PLG */ = {isa = PBXFileReference; lastKnownFileType = text; name = PYRAMIDW.PLG; path = ../../PYRAMIDW.PLG; sourceTree = "<group>"; };
+		3E017B4728ECB59600D286E9 /* CUBEW.PLG */ = {isa = PBXFileReference; lastKnownFileType = text; name = CUBEW.PLG; path = ../../CUBEW.PLG; sourceTree = "<group>"; };
+		3E3C579428E883D300637704 /* BLACK3.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK3.H; path = ../../../CHAP_3/BLACK3.H; sourceTree = "<group>"; };
+		3E3C579528E883D300637704 /* BLACK3.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK3.C; path = ../../../CHAP_3/BLACK3.C; sourceTree = "<group>"; };
+		3EA2534028EB872400E2BA35 /* BLACK11.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK11.C; path = ../../BLACK11.C; sourceTree = "<group>"; };
+		3EA2534128EB872400E2BA35 /* BLACK11.H */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.h; name = BLACK11.H; path = ../../BLACK11.H; sourceTree = "<group>"; };
+		3EA2534328EB88A500E2BA35 /* LINEDEMO.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = LINEDEMO.C; path = ../../LINEDEMO.C; sourceTree = "<group>"; };
+		3EA2534528EB892000E2BA35 /* LINEDEMO.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = LINEDEMO.h; sourceTree = "<group>"; };
+		3EF00A4E28E99F84000AC74A /* BLACK4.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK4.H; path = ../../../CHAP_4/BLACK4.H; sourceTree = "<group>"; };
+		3EF00A4F28E99F84000AC74A /* BLACK4.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK4.C; path = ../../../CHAP_4/BLACK4.C; sourceTree = "<group>"; };
+/* End PBXFileReference section */
+
+/* Begin PBXFrameworksBuildPhase section */
+		2DA6C5A9258AA66B002B1931 /* Frameworks */ = {
+			isa = PBXFrameworksBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXFrameworksBuildPhase section */
+
+/* Begin PBXGroup section */
+		2DA6C5A3258AA66B002B1931 = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AE258AA66B002B1931 /* HostApp */,
+				2DA6C5AD258AA66B002B1931 /* Products */,
+			);
+			sourceTree = "<group>";
+		};
+		2DA6C5AD258AA66B002B1931 /* Products */ = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AC258AA66B002B1931 /* CHAP11 */,
+			);
+			name = Products;
+			sourceTree = "<group>";
+		};
+		2DA6C5AE258AA66B002B1931 /* HostApp */ = {
+			isa = PBXGroup;
+			children = (
+				2D9EAF26258E750E00297C9C /* HostApp.entitlements */,
+				2DA6C5AF258AA66B002B1931 /* main.cpp */,
+				2D9EAF1F258E6A4300297C9C /* sdl.h */,
+				2DB9F18C258EA679000A3299 /* ega.h */,
+				2D2793D725AD90B500DEC620 /* font.h */,
+				3E3C579528E883D300637704 /* BLACK3.C */,
+				3E3C579428E883D300637704 /* BLACK3.H */,
+				3EF00A4F28E99F84000AC74A /* BLACK4.C */,
+				3EF00A4E28E99F84000AC74A /* BLACK4.H */,
+				3E017B4328ECB33A00D286E9 /* BLACK8.C */,
+				3E017B4228ECB33A00D286E9 /* BLACK8.H */,
+				3EA2534028EB872400E2BA35 /* BLACK11.C */,
+				3EA2534128EB872400E2BA35 /* BLACK11.H */,
+				3EA2534328EB88A500E2BA35 /* LINEDEMO.C */,
+				3EA2534528EB892000E2BA35 /* LINEDEMO.h */,
+				3E017B4028ECB2DD00D286E9 /* WIREDEMO.C */,
+				3E017B4528ECB4CE00D286E9 /* WIREDEMO.h */,
+				3E017B4728ECB59600D286E9 /* CUBEW.PLG */,
+				3E017B4628ECB59600D286E9 /* PYRAMIDW.PLG */,
+			);
+			path = HostApp;
+			sourceTree = "<group>";
+		};
+/* End PBXGroup section */
+
+/* Begin PBXNativeTarget section */
+		2DA6C5AB258AA66B002B1931 /* CHAP11 */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = 2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP11" */;
+			buildPhases = (
+				2DA6C5A8258AA66B002B1931 /* Sources */,
+				2DA6C5A9258AA66B002B1931 /* Frameworks */,
+				2DA6C5AA258AA66B002B1931 /* CopyFiles */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+			);
+			name = CHAP11;
+			productName = CicParserSim;
+			productReference = 2DA6C5AC258AA66B002B1931 /* CHAP11 */;
+			productType = "com.apple.product-type.tool";
+		};
+/* End PBXNativeTarget section */
+
+/* Begin PBXProject section */
+		2DA6C5A4258AA66B002B1931 /* Project object */ = {
+			isa = PBXProject;
+			attributes = {
+				LastUpgradeCheck = 1240;
+				TargetAttributes = {
+					2DA6C5AB258AA66B002B1931 = {
+						CreatedOnToolsVersion = 12.2;
+					};
+				};
+			};
+			buildConfigurationList = 2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP11" */;
+			compatibilityVersion = "Xcode 9.3";
+			developmentRegion = en;
+			hasScannedForEncodings = 0;
+			knownRegions = (
+				en,
+				Base,
+			);
+			mainGroup = 2DA6C5A3258AA66B002B1931;
+			productRefGroup = 2DA6C5AD258AA66B002B1931 /* Products */;
+			projectDirPath = "";
+			projectRoot = "";
+			targets = (
+				2DA6C5AB258AA66B002B1931 /* CHAP11 */,
+			);
+		};
+/* End PBXProject section */
+
+/* Begin PBXSourcesBuildPhase section */
+		2DA6C5A8258AA66B002B1931 /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				3E017B4428ECB33A00D286E9 /* BLACK8.C in Sources */,
+				2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */,
+				3EA2534228EB872400E2BA35 /* BLACK11.C in Sources */,
+				3EF00A5928E9A177000AC74A /* BLACK4.C in Sources */,
+				3E3C579628E883D700637704 /* BLACK3.C in Sources */,
+				3E017B4128ECB2DD00D286E9 /* WIREDEMO.C in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXSourcesBuildPhase section */
+
+/* Begin XCBuildConfiguration section */
+		2DA6C5B1258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = dwarf;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				ENABLE_TESTABILITY = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_OPTIMIZATION_LEVEL = 0;
+				GCC_PREPROCESSOR_DEFINITIONS = (
+					"DEBUG=1",
+					"$(inherited)",
+				);
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Debug;
+		};
+		2DA6C5B2258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				ENABLE_NS_ASSERTIONS = NO;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = NO;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Release;
+		};
+		2DA6C5B4258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = /opt/homebrew/Cellar/sdl2/2.24.0/include/SDL2;
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/Cellar/sdl2/2.24.0/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Debug;
+		};
+		2DA6C5B5258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = /opt/homebrew/Cellar/sdl2/2.24.0/include/SDL2;
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/Cellar/sdl2/2.24.0/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Release;
+		};
+/* End XCBuildConfiguration section */
+
+/* Begin XCConfigurationList section */
+		2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP11" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B1258AA66B002B1931 /* Debug */,
+				2DA6C5B2258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP11" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B4258AA66B002B1931 /* Debug */,
+				2DA6C5B5258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+/* End XCConfigurationList section */
+	};
+	rootObject = 2DA6C5A4258AA66B002B1931 /* Project object */;
+}
diff --git a/CHAP_11/HostApp/CHAP11.xcodeproj/project.xcworkspace/contents.xcworkspacedata b/CHAP_11/HostApp/CHAP11.xcodeproj/project.xcworkspace/contents.xcworkspacedata
new file mode 100644
index 0000000..8b5106f
--- /dev/null
+++ b/CHAP_11/HostApp/CHAP11.xcodeproj/project.xcworkspace/contents.xcworkspacedata
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "self:/Users/ac27/Dev/black_art/black_art_3d_revival/CHAP_11/HostApp/CHAP11.xcodeproj">
+   </FileRef>
+</Workspace>
diff --git a/CHAP_11/HostApp/CHAP11.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist b/CHAP_11/HostApp/CHAP11.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
new file mode 100644
index 0000000..18d9810
--- /dev/null
+++ b/CHAP_11/HostApp/CHAP11.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IDEDidComputeMac32BitWarning</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_11/HostApp/CHAP11.xcodeproj/xcshareddata/xcschemes/CHAP11.xcscheme b/CHAP_11/HostApp/CHAP11.xcodeproj/xcshareddata/xcschemes/CHAP11.xcscheme
new file mode 100644
index 0000000..a9041a3
--- /dev/null
+++ b/CHAP_11/HostApp/CHAP11.xcodeproj/xcshareddata/xcschemes/CHAP11.xcscheme
@@ -0,0 +1,85 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "1400"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+               BuildableName = "CHAP11"
+               BlueprintName = "CHAP11"
+               ReferencedContainer = "container:CHAP11.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES">
+      <Testables>
+      </Testables>
+   </TestAction>
+   <LaunchAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      debugServiceExtension = "internal"
+      allowLocationSimulation = "YES"
+      viewDebuggingEnabled = "No">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+            BuildableName = "CHAP11"
+            BlueprintName = "CHAP11"
+            ReferencedContainer = "container:CHAP11.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+      <CommandLineArguments>
+         <CommandLineArgument
+            argument = "PYRAMIDW.PLG"
+            isEnabled = "YES">
+         </CommandLineArgument>
+      </CommandLineArguments>
+   </LaunchAction>
+   <ProfileAction
+      buildConfiguration = "Release"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      debugDocumentVersioning = "YES">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+            BuildableName = "CHAP11"
+            BlueprintName = "CHAP11"
+            ReferencedContainer = "container:CHAP11.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff --git a/CHAP_11/HostApp/HostApp/HostApp.entitlements b/CHAP_11/HostApp/HostApp/HostApp.entitlements
new file mode 100644
index 0000000..8cc185a
--- /dev/null
+++ b/CHAP_11/HostApp/HostApp/HostApp.entitlements
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>com.apple.security.cs.disable-library-validation</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_11/HostApp/HostApp/LINEDEMO.h b/CHAP_11/HostApp/HostApp/LINEDEMO.h
new file mode 100644
index 0000000..8daf46f
--- /dev/null
+++ b/CHAP_11/HostApp/HostApp/LINEDEMO.h
@@ -0,0 +1,13 @@
+//
+//  LINEDEMO.h
+//  CHAP11
+//
+//  Created by Tosha on 03/10/2022.
+//
+
+#ifndef LINEDEMO_h
+#define LINEDEMO_h
+
+void start_linedemo(CEga* ega);
+
+#endif /* LINEDEMO_h */
diff --git a/CHAP_11/HostApp/HostApp/WIREDEMO.h b/CHAP_11/HostApp/HostApp/WIREDEMO.h
new file mode 100644
index 0000000..c5fd9b4
--- /dev/null
+++ b/CHAP_11/HostApp/HostApp/WIREDEMO.h
@@ -0,0 +1,13 @@
+//
+//  WIREDEMO.h
+//  CHAP11
+//
+//  Created by Tosha on 04/10/2022.
+//
+
+#ifndef WIREDEMO_h
+#define WIREDEMO_h
+
+void start_wiredemo(int argc, char **argv, CEga *ega);
+
+#endif /* WIREDEMO_h */
diff --git a/CHAP_11/HostApp/HostApp/ega.h b/CHAP_11/HostApp/HostApp/ega.h
new file mode 100644
index 0000000..b19dc71
--- /dev/null
+++ b/CHAP_11/HostApp/HostApp/ega.h
@@ -0,0 +1,63 @@
+#ifndef EGA_h
+#define EGA_h
+
+#include "font.h"
+
+typedef uint16_t WORD;
+typedef uint8_t BYTE;
+typedef uint8_t FLAG;
+typedef uint16_t WORD;
+
+typedef uint32_t DWORD;
+
+class CVideoAdapter
+{
+public:
+	virtual DWORD GetPixel(int x, int y, int p) = 0;
+};
+
+class CEga : public CVideoAdapter
+{
+	enum {
+		MemSize = 0x10000*2
+	};
+
+public:
+	DWORD memory[MemSize];
+
+    // https://www.ditig.com/256-colors-cheat-sheet
+    // Note: first 16 colors are from VGA palette, rest is from Xterm
+    DWORD palette[256] = {
+        0x000000, 0x0000b0, 0x00b000, 0x00b0b0, 0xb00000, 0xb000b0, 0xb0b000, 0xb0b0b0,
+        0x808080, 0x0000ff, 0x00ff00, 0x00ffff, 0xff0000, 0xff00ff, 0xffff00, 0xffffff, 0x000000, 0x00005f, 0x000087, 0x0000af, 0x0000d7, 0x0000ff, 0x005f00, 0x005f5f, 0x005f87, 0x005faf, 0x005fd7, 0x005fff, 0x008700, 0x00875f, 0x008787, 0x0087af, 0x0087d7, 0x0087ff, 0x00af00, 0x00af5f, 0x00af87, 0x00afaf, 0x00afd7, 0x00afff, 0x00d700, 0x00d75f, 0x00d787, 0x00d7af, 0x00d7d7, 0x00d7ff, 0x00ff00, 0x00ff5f, 0x00ff87, 0x00ffaf, 0x00ffd7, 0x00ffff, 0x5f0000, 0x5f005f, 0x5f0087, 0x5f00af, 0x5f00d7, 0x5f00ff, 0x5f5f00, 0x5f5f5f, 0x5f5f87, 0x5f5faf, 0x5f5fd7, 0x5f5fff, 0x5f8700, 0x5f875f, 0x5f8787, 0x5f87af, 0x5f87d7, 0x5f87ff, 0x5faf00, 0x5faf5f, 0x5faf87, 0x5fafaf, 0x5fafd7, 0x5fafff, 0x5fd700, 0x5fd75f, 0x5fd787, 0x5fd7af, 0x5fd7d7, 0x5fd7ff, 0x5fff00, 0x5fff5f, 0x5fff87, 0x5fffaf, 0x5fffd7, 0x5fffff, 0x870000, 0x87005f, 0x870087, 0x8700af, 0x8700d7, 0x8700ff, 0x875f00, 0x875f5f, 0x875f87, 0x875faf, 0x875fd7, 0x875fff, 0x878700, 0x87875f, 0x878787, 0x8787af, 0x8787d7, 0x8787ff, 0x87af00, 0x87af5f, 0x87af87, 0x87afaf, 0x87afd7, 0x87afff, 0x87d700, 0x87d75f, 0x87d787, 0x87d7af, 0x87d7d7, 0x87d7ff, 0x87ff00, 0x87ff5f, 0x87ff87, 0x87ffaf, 0x87ffd7, 0x87ffff, 0xaf0000, 0xaf005f, 0xaf0087, 0xaf00af, 0xaf00d7, 0xaf00ff, 0xaf5f00, 0xaf5f5f, 0xaf5f87, 0xaf5faf, 0xaf5fd7, 0xaf5fff, 0xaf8700, 0xaf875f, 0xaf8787, 0xaf87af, 0xaf87d7, 0xaf87ff, 0xafaf00, 0xafaf5f, 0xafaf87, 0xafafaf, 0xafafd7, 0xafafff, 0xafd700, 0xafd75f, 0xafd787, 0xafd7af, 0xafd7d7, 0xafd7ff, 0xafff00, 0xafff5f, 0xafff87, 0xafffaf, 0xafffd7, 0xafffff, 0xd70000, 0xd7005f, 0xd70087, 0xd700af, 0xd700d7, 0xd700ff, 0xd75f00, 0xd75f5f, 0xd75f87, 0xd75faf, 0xd75fd7, 0xd75fff, 0xd78700, 0xd7875f, 0xd78787, 0xd787af, 0xd787d7, 0xd787ff, 0xd7af00, 0xd7af5f, 0xd7af87, 0xd7afaf, 0xd7afd7, 0xd7afff, 0xd7d700, 0xd7d75f, 0xd7d787, 0xd7d7af, 0xd7d7d7, 0xd7d7ff, 0xd7ff00, 0xd7ff5f, 0xd7ff87, 0xd7ffaf, 0xd7ffd7, 0xd7ffff, 0xff0000, 0xff005f, 0xff0087, 0xff00af, 0xff00d7, 0xff00ff, 0xff5f00, 0xff5f5f, 0xff5f87, 0xff5faf, 0xff5fd7, 0xff5fff, 0xff8700, 0xff875f, 0xff8787, 0xff87af, 0xff87d7, 0xff87ff, 0xffaf00, 0xffaf5f, 0xffaf87, 0xffafaf, 0xffafd7, 0xffafff, 0xffd700, 0xffd75f, 0xffd787, 0xffd7af, 0xffd7d7, 0xffd7ff, 0xffff00, 0xffff5f, 0xffff87, 0xffffaf, 0xffffd7, 0xffffff, 0x080808, 0x121212, 0x1c1c1c, 0x262626, 0x303030, 0x3a3a3a, 0x444444, 0x4e4e4e, 0x585858, 0x626262, 0x6c6c6c, 0x767676, 0x808080, 0x8a8a8a, 0x949494, 0x9e9e9e, 0xa8a8a8, 0xb2b2b2, 0xbcbcbc, 0xc6c6c6, 0xd0d0d0, 0xdadada, 0xe4e4e4, 0xeeeeee
+    };
+
+public:
+	CEga()
+	{
+        memset(memory, 0, sizeof(memory));
+	}
+	
+    void SetPaletteIndex(int index, int rgb)
+    {
+        int r = ((rgb & 4) ? 2 : 0) + ((rgb & 32) ? 1 : 0);
+        int g = ((rgb & 2) ? 2 : 0) + ((rgb & 16) ? 1 : 0);
+        int b = ((rgb & 1) ? 2 : 0) + ((rgb & 8) ? 1 : 0);
+        r = r * 255 / 3;
+        g = g * 255 / 3;
+        b = b * 255 / 3;
+        palette[index] = b | (g << 8) | (r << 16);
+
+    }
+    
+	virtual DWORD GetPixel(int x, int y, int page = -1) override
+	{
+        BYTE* _video = (BYTE*)memory;
+        int idx = (int)_video[((y<<8) + (y<<6)) + x];
+        return palette[idx];
+	}
+};
+
+void _sync();
+
+#endif
diff --git a/CHAP_11/HostApp/HostApp/font.h b/CHAP_11/HostApp/HostApp/font.h
new file mode 100644
index 0000000..8be86b2
--- /dev/null
+++ b/CHAP_11/HostApp/HostApp/font.h
@@ -0,0 +1,313 @@
+#ifndef FONT_h
+#define FONT_h
+
+#pragma once
+
+// http://www.hampa.ch/pce/download.html
+// genoa-ega-2.41.rom
+// dd if=genoa-ega-2.41.rom of=font bs=1 skip=8224 count=3584
+// xxd -i font > font.h
+
+static const uint8_t font[] = {
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81,
+  0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xff,
+  0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
+  0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
+  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff,
+  0xff, 0xff, 0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc,
+  0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30,
+  0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x63,
+  0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06,
+  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66,
+  0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xdb,
+  0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c,
+  0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c,
+  0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c,
+  0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06,
+  0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6,
+  0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c,
+  0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x30,
+  0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c,
+  0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38, 0x78, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c,
+  0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66,
+  0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0,
+  0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x6c,
+  0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66,
+  0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x0c,
+  0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66,
+  0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
+  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60,
+  0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x30, 0x30, 0x30,
+  0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0,
+  0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
+  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xff, 0x00, 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76,
+  0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66,
+  0x3c, 0x00, 0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66,
+  0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec,
+  0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60,
+  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c,
+  0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30,
+  0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38,
+  0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38,
+  0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66,
+  0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00, 0x00,
+  0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc,
+  0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x38,
+  0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
+  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe,
+  0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x38,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x66,
+  0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x60,
+  0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c,
+  0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x76,
+  0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x6c,
+  0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00, 0x10,
+  0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00, 0x00, 0xc6,
+  0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60,
+  0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xcc, 0xcc,
+  0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x0e,
+  0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
+  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
+  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
+  0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
+  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06,
+  0x06, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c,
+  0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c,
+  0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x44, 0x11, 0x44,
+  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x55, 0xaa,
+  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
+  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
+  0xdd, 0x77, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
+  0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff,
+  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
+  0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
+  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
+  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30,
+  0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c,
+  0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c,
+  0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00,
+  0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e,
+  0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18,
+  0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00,
+  0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c,
+  0x1c, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8,
+  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+};
+
+#endif
diff --git a/CHAP_11/HostApp/HostApp/main.cpp b/CHAP_11/HostApp/HostApp/main.cpp
new file mode 100644
index 0000000..bcd4a5b
--- /dev/null
+++ b/CHAP_11/HostApp/HostApp/main.cpp
@@ -0,0 +1,59 @@
+//
+//  main.cpp
+//  HostApp
+//
+//
+
+#include <iostream>
+#include <vector>
+#include <sstream>
+#include <iomanip>
+#include <list>
+
+#include "sdl.h"
+#include "ega.h"
+
+//#include "LINEDEMO.h"
+#include "WIREDEMO.h"
+
+CEga mVideo;
+CSdl mSdl;
+std::list<int> keyboardBuffer;
+
+void onKey(int k, int p)
+{
+    if (!p)
+        return;
+
+    int key = 0;
+    switch (k)
+    {
+        case SDL_SCANCODE_UP: key = 0x4800; break;
+        case SDL_SCANCODE_DOWN: key = 0x5000; break;
+        case SDL_SCANCODE_LEFT: key = 0x4b00; break;
+        case SDL_SCANCODE_RIGHT: key = 0x4d00; break;
+        case SDL_SCANCODE_SPACE: key = 0x3920; break;
+        case SDL_SCANCODE_RETURN: key = 0x1c0d; break;
+    }
+
+    if (key)
+    {
+        keyboardBuffer.push_back(key);
+    }
+}
+
+void _sync()
+{
+    for (int y=0; y<mSdl.Height; y++)
+      for (int x=0; x<mSdl.Width; x++)
+        mSdl.SetPixel(x, y, mVideo.GetPixel(x, y));
+    
+    mSdl.Loop();
+}
+
+int main(int argc, char * argv[]) {
+    mSdl.Init();
+    start_wiredemo(argc, argv, &mVideo);
+    mSdl.Deinit();
+    return 0;
+}
diff --git a/CHAP_11/HostApp/HostApp/sdl.h b/CHAP_11/HostApp/HostApp/sdl.h
new file mode 100644
index 0000000..5cb08a1
--- /dev/null
+++ b/CHAP_11/HostApp/HostApp/sdl.h
@@ -0,0 +1,144 @@
+#ifndef SDL_h
+#define SDL_h
+
+typedef uint32_t Uint32;
+#include <SDL.h>
+#include <SDL_render.h>
+
+void onKey(int k, int p);
+
+class CSdl
+{
+    
+    std::vector< unsigned char > pixels;
+    const int pixelSize = 2;
+
+    SDL_Renderer* renderer{nullptr};
+    SDL_Texture* texture{nullptr};
+    SDL_Window* window{nullptr};
+    bool running{true};
+    int lastKey{0};
+
+public:
+    enum {
+        Width = 320,//640,
+        Height = 200//350
+    };
+
+    void Init()
+    {
+        pixels.resize(Width*Height*4);
+        SDL_Init( SDL_INIT_EVERYTHING );
+        atexit( SDL_Quit );
+        
+        window = SDL_CreateWindow
+        (
+         "BlackArt simulator",
+         SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
+         Width*pixelSize, Height*pixelSize,
+         SDL_WINDOW_SHOWN
+         );
+        
+        renderer = SDL_CreateRenderer
+        (
+         window,
+         -1,
+         SDL_RENDERER_ACCELERATED
+         );
+
+        texture = SDL_CreateTexture
+        (
+         renderer,
+         SDL_PIXELFORMAT_ARGB8888,
+         SDL_TEXTUREACCESS_STREAMING,
+         Width, Height
+         );
+    }
+    
+    void Blit()
+    {
+        SDL_SetRenderDrawColor( renderer, 0, 0, 0, SDL_ALPHA_OPAQUE );
+        SDL_RenderClear( renderer );
+        
+        SDL_UpdateTexture
+        (
+         texture,
+         NULL,
+         &pixels[0],
+         Width * 4
+         );
+        
+        SDL_RenderCopy( renderer, texture, NULL, NULL );
+        SDL_RenderPresent( renderer );
+    }
+    
+    void Loop()
+    {
+//        SDL_Event event;
+//
+//        while( SDL_PollEvent( &event ) )
+//        {
+//            if (SDL_KEYDOWN == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 1);
+//            }
+//
+//            if (SDL_KEYUP == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 0);
+//            }
+//
+//            if( ( SDL_QUIT == event.type ) ||
+//               ( SDL_KEYDOWN == event.type && SDL_SCANCODE_ESCAPE == event.key.keysym.scancode ) )
+//            {
+//                running = false;
+//                break;
+//            }
+//        }
+        
+        Blit();
+
+        //const Uint64 end = SDL_GetPerformanceCounter();
+        //const static Uint64 freq = SDL_GetPerformanceFrequency();
+        //const double seconds = ( end - start ) / static_cast< double >( freq );
+        //std::cout << "Frame time: " << seconds * 1000.0 << "ms" << std::endl;
+//        if (running)
+//            SDL_Delay(20);
+    }
+    
+    void Deinit()
+    {
+        SDL_DestroyRenderer( renderer );
+        SDL_DestroyWindow( window );
+        SDL_Quit();
+    }
+    
+    void SetPixel(int x, int y, uint32_t c)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        pixels[ offset + 0 ] = (uint8_t)c;
+        pixels[ offset + 1 ] = (uint8_t)(c >> 8);
+        pixels[ offset + 2 ] = (uint8_t)(c >> 16);
+        pixels[ offset + 3 ] = SDL_ALPHA_OPAQUE;
+    }
+
+    uint32_t GetPixel(int x, int y)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        int b = pixels[ offset + 0 ];
+        int g = pixels[ offset + 1 ];
+        int r = pixels[ offset + 2 ];
+        return r | (g << 8) | (b << 16);
+    }
+
+};
+
+#endif
diff --git a/CHAP_11/LINEDEMO.C b/CHAP_11/LINEDEMO.C
index 5d00bdc..89d3500 100755
--- a/CHAP_11/LINEDEMO.C
+++ b/CHAP_11/LINEDEMO.C
@@ -1,15 +1,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 #include <search.h>             // this one is needed for qsort()
@@ -18,36 +15,42 @@
 
 #include "black3.h"
 #include "black4.h"
-#include "black5.h"
-#include "black6.h"
-#include "black8.h"
-#include "black9.h"
 #include "black11.h"
 
 // M A I N ////////////////////////////////////////////////////////////////////
 
-void main(void)
+void start_linedemo(CEga* ega)
 {
 
 // set graphics mode to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // draw randomly positioned lines until user hits a key
 
-while(!kbhit())
+bool done = false;
+while(!done)
+{
+     SDL_Event event;
+     while( SDL_PollEvent( &event ) )
      {
+         if (SDL_KEYDOWN == event.type) {
+             done = true;
+             break;
+         }
+     }
+
      // draw the line with random (xo,yo) - (x1,y1) with a random color
      Draw_Line(rand()%320,rand()%200,
                rand()%320,rand()%200,
                rand()%256,video_buffer);
 
+    _sync();
+    
      } // end while
 
 // restore graphics mode back to text
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 } // end main
-
-
\ No newline at end of file
diff --git a/CHAP_11/WIREDEMO.C b/CHAP_11/WIREDEMO.C
index 9d12886..893d4e8 100755
--- a/CHAP_11/WIREDEMO.C
+++ b/CHAP_11/WIREDEMO.C
@@ -1,15 +1,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 #include <search.h>             // this one is needed for qsort()
@@ -18,10 +15,7 @@
 
 #include "black3.h"
 #include "black4.h"
-#include "black5.h"
-#include "black6.h"
 #include "black8.h"
-#include "black9.h"
 #include "black11.h"
 
 // G L O B A L S /////////////////////////////////////////////////////////////
@@ -30,7 +24,7 @@ object test_object;   // the test object
 
 // M A I N ////////////////////////////////////////////////////////////////////
 
-void main(int argc,char **argv)
+void start_wiredemo(int argc, char **argv, CEga *ega)
 {
 
 int index,   // looping variable
@@ -59,7 +53,7 @@ Build_Look_Up_Tables();
 
 // set graphics to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // allocate double buffer
 
@@ -67,7 +61,7 @@ Create_Double_Buffer(200);
 
 // install the isr keyboard driver
 
-Keyboard_Install_Driver();
+//Keyboard_Install_Driver();
 
 // set viewing distance
 
@@ -81,6 +75,28 @@ while(!done)
      // compute starting time of this frame
 
      starting_time = Timer_Query();
+         
+     SDL_Scancode last_key = SDL_SCANCODE_UNKNOWN;
+     SDL_Event event;
+     while( SDL_PollEvent( &event ) )
+     {
+         if (SDL_KEYDOWN == event.type) {
+             switch (event.key.keysym.scancode) {
+                 case SDL_SCANCODE_RIGHT:
+                 case SDL_SCANCODE_LEFT:
+                 case SDL_SCANCODE_UP:
+                 case SDL_SCANCODE_DOWN:
+                 case SDL_SCANCODE_EQUALS:
+                 case SDL_SCANCODE_MINUS:
+                 case SDL_SCANCODE_ESCAPE:
+                     last_key = event.key.keysym.scancode;
+                     break;
+                     
+                 default:
+                     break;
+             }
+         }
+     }
 
      // erase the screen
 
@@ -90,37 +106,37 @@ while(!done)
 
      // test if user is moving object to right
 
-     if (keyboard_state[MAKE_RIGHT])
+     if (last_key == SDL_SCANCODE_RIGHT)
         test_object.world_pos.x+=5;
 
      // test if user is moving object to left
 
-     if (keyboard_state[MAKE_LEFT])
+     if (last_key == SDL_SCANCODE_LEFT)
         test_object.world_pos.x-=5;
 
      // test if user is moving object up
 
-     if (keyboard_state[MAKE_UP])
+     if (last_key == SDL_SCANCODE_UP)
         test_object.world_pos.y-=5;
 
      // test if user is moving object down
 
-     if (keyboard_state[MAKE_DOWN])
+     if (last_key == SDL_SCANCODE_DOWN)
         test_object.world_pos.y+=5;
 
      // test if user is moving object farther
 
-     if (keyboard_state[MAKE_PGUP])
+     if (last_key == SDL_SCANCODE_EQUALS)
         test_object.world_pos.z+=15;
 
      // test if user is moving object nearer
 
-     if (keyboard_state[MAKE_PGDWN])
+     if (last_key == SDL_SCANCODE_MINUS)
         test_object.world_pos.z-=15;
 
      // test for exit key
 
-     if (keyboard_state[MAKE_ESC])
+     if (last_key == SDL_SCANCODE_ESCAPE)
         done=1;
 
 
@@ -167,21 +183,17 @@ while(!done)
      Display_Double_Buffer(double_buffer,0);
 
      // lock onto 18 frames per second max
-
-     while((Timer_Query()-starting_time)<1);
+     _sync();
+     while((Timer_Query()-starting_time)<CLOCKS_PER_SEC/18);
 
      } // end while
 
 // restore graphics mode back to text
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 // restore the old keyboard driver
 
-Keyboard_Remove_Driver();
+//Keyboard_Remove_Driver();
 
 } // end main
-
-
-
-
\ No newline at end of file
diff --git a/CHAP_12/GOURDEMO.C b/CHAP_12/GOURDEMO.C
index 31167f7..1656ae3 100755
--- a/CHAP_12/GOURDEMO.C
+++ b/CHAP_12/GOURDEMO.C
@@ -1,15 +1,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 
@@ -17,15 +14,12 @@
 
 #include "black3.h"
 #include "black4.h"
-#include "black5.h"
-#include "black6.h"
 #include "black8.h"
-#include "black9.h"
 #include "black11.h"
 
 // M A I N /////////////////////////////////////////////////////////////////////
 
-void main(void)
+void start_gourdemo(CEga *ega)
 {
 
 int done=0,         // exit flag
@@ -39,7 +33,7 @@ char buffer[80]; // output string buffer
 
 // set graphics mode to 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // alter the palette and introduce some greys
 
@@ -48,7 +42,7 @@ Make_Grey_Palette();
 // draw gouraud shaded traingle
 
 Draw_Triangle_2D_Gouraud(x,y,x-50,y+60,x+30,y+80,video_buffer,
-                        intensity_1,intensity_2,intensity_3);
+                         intensity_1*238/63,intensity_2*238/63,intensity_3*238/63);
 
 // label vertices
 
@@ -62,68 +56,66 @@ while(!done)
      {
      // test for key
 
-     if (kbhit())
-        {
-
-        // get the key
-
-        switch(getch())
-              {
-
-              case 27: // escape key
-                 {
-                 // exit system
-                 done=1;
-
-                 } break;
-
-              case '7': // increase vertex 1 intensity
-                 {
-                 if (++intensity_1>63)
-                    intensity_1=63;
-                 } break;
-
-              case '4': // decrease vertex 1 intensity
-                 {
-                 if (--intensity_1<0)
-                    intensity_1=0;
-                 } break;
-
-              case '8': // increase vertex 2 intensity
-                 {
-                 if (++intensity_2>63)
-                    intensity_2=63;
-                 } break;
-
-              case '5': // decrease vertex 2 intensity
-                 {
-                 if (--intensity_2<0)
-                    intensity_2=0;
-                 } break;
-
-              case '9': // increase vertex 31 intensity
-                 {
-                 if (++intensity_3>63)
-                    intensity_3=63;
-                 } break;
-
-              case '6': // decrease vertex 3 intensity
-                 {
-                 if (--intensity_3<0)
-                    intensity_3=0;
-                 } break;
-
-              default:break;
-
+     SDL_Event event;
+     while( SDL_PollEvent( &event ) )
+    {
+          if (SDL_KEYDOWN == event.type) {
+              switch (event.key.keysym.scancode) {
+                      
+                  case SDL_SCANCODE_ESCAPE: // escape key
+                  {
+                      // exit system
+                      done=1;
+                      
+                  } break;
+                      
+                  case SDL_SCANCODE_7: // increase vertex 1 intensity
+                  {
+                      if (++intensity_1>63)
+                          intensity_1=63;
+                  } break;
+                      
+                  case SDL_SCANCODE_4: // decrease vertex 1 intensity
+                  {
+                      if (--intensity_1<0)
+                          intensity_1=0;
+                  } break;
+                      
+                  case SDL_SCANCODE_8: // increase vertex 2 intensity
+                  {
+                      if (++intensity_2>63)
+                          intensity_2=63;
+                  } break;
+                      
+                  case SDL_SCANCODE_5: // decrease vertex 2 intensity
+                  {
+                      if (--intensity_2<0)
+                          intensity_2=0;
+                  } break;
+                      
+                  case SDL_SCANCODE_9: // increase vertex 3 intensity
+                  {
+                      if (++intensity_3>63)
+                          intensity_3=63;
+                  } break;
+                      
+                  case SDL_SCANCODE_6: // decrease vertex 3 intensity
+                  {
+                      if (--intensity_3<0)
+                          intensity_3=0;
+                  } break;
+                      
+                  default:break;
+                      
               } // end switch
-
-        // draw gouraud shaded triangle
-
-        Draw_Triangle_2D_Gouraud(x,y,x-50,y+60,x+30,y+80,video_buffer,
-                                 intensity_1,intensity_2,intensity_3);
-
-        } // end kbhit
-
+              
+              // draw gouraud shaded triangle
+              
+              Draw_Triangle_2D_Gouraud(x,y,x-50,y+60,x+30,y+80,video_buffer,
+                                       intensity_1*238/63,intensity_2*238/63,intensity_3*238/63);
+              
+          } // end kbhit
+      }
 
      // print out vertex intensities
 
@@ -131,17 +123,17 @@ while(!done)
      Print_String(0,0,12,buffer,0);
 
      sprintf(buffer,"Vertex 2 = %d  ",intensity_2);
-     Print_String(0,10,12,buffer,0);
+     Print_String(0,ROM_CHAR_HEIGHT+2,12,buffer,0);
 
      sprintf(buffer,"Vertex 3 = %d  ",intensity_3);
-     Print_String(0,20,12,buffer,0);
+     Print_String(0,2*(ROM_CHAR_HEIGHT+2),12,buffer,0);
+         
+     _sync();
 
      } // end while
 
 // restore text mode
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 } // end main
-
-
\ No newline at end of file
diff --git a/CHAP_12/HostApp/CHAP12.xcodeproj/project.pbxproj b/CHAP_12/HostApp/CHAP12.xcodeproj/project.pbxproj
new file mode 100644
index 0000000..16d3c81
--- /dev/null
+++ b/CHAP_12/HostApp/CHAP12.xcodeproj/project.pbxproj
@@ -0,0 +1,360 @@
+// !$*UTF8*$!
+{
+	archiveVersion = 1;
+	classes = {
+	};
+	objectVersion = 50;
+	objects = {
+
+/* Begin PBXBuildFile section */
+		2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 2DA6C5AF258AA66B002B1931 /* main.cpp */; };
+		3E017B4428ECB33A00D286E9 /* BLACK8.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E017B4328ECB33A00D286E9 /* BLACK8.C */; };
+		3E2CDEB828F0BA0A00594EB2 /* BLACK11.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E2CDEB328F0B76F00594EB2 /* BLACK11.C */; };
+		3E2CDEBD28F0D6B800594EB2 /* CUBE.PLG in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3E2CDEBC28F0D6B000594EB2 /* CUBE.PLG */; };
+		3E2CDEBF28F0D75C00594EB2 /* STANDARD.PAL in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3E2CDEBE28F0D75800594EB2 /* STANDARD.PAL */; };
+		3E3C579628E883D700637704 /* BLACK3.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E3C579528E883D300637704 /* BLACK3.C */; };
+		3E9AC70128F30B080009A7D5 /* TEXTDEMO.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E9AC70028F30B080009A7D5 /* TEXTDEMO.C */; };
+		3E9AC70428F30BEF0009A7D5 /* TEXTURES.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3E9AC70328F30BDF0009A7D5 /* TEXTURES.PCX */; };
+		3EF00A5928E9A177000AC74A /* BLACK4.C in Sources */ = {isa = PBXBuildFile; fileRef = 3EF00A4F28E99F84000AC74A /* BLACK4.C */; };
+/* End PBXBuildFile section */
+
+/* Begin PBXCopyFilesBuildPhase section */
+		2DA6C5AA258AA66B002B1931 /* CopyFiles */ = {
+			isa = PBXCopyFilesBuildPhase;
+			buildActionMask = 12;
+			dstPath = "";
+			dstSubfolderSpec = 16;
+			files = (
+				3E2CDEBD28F0D6B800594EB2 /* CUBE.PLG in CopyFiles */,
+				3E2CDEBF28F0D75C00594EB2 /* STANDARD.PAL in CopyFiles */,
+				3E9AC70428F30BEF0009A7D5 /* TEXTURES.PCX in CopyFiles */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXCopyFilesBuildPhase section */
+
+/* Begin PBXFileReference section */
+		2D2793D725AD90B500DEC620 /* font.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = font.h; sourceTree = "<group>"; };
+		2D9EAF1F258E6A4300297C9C /* sdl.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = sdl.h; sourceTree = "<group>"; };
+		2D9EAF26258E750E00297C9C /* HostApp.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = HostApp.entitlements; sourceTree = "<group>"; };
+		2DA6C5AC258AA66B002B1931 /* CHAP12 */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = CHAP12; sourceTree = BUILT_PRODUCTS_DIR; };
+		2DA6C5AF258AA66B002B1931 /* main.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = main.cpp; sourceTree = "<group>"; };
+		2DB9F18C258EA679000A3299 /* ega.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = ega.h; sourceTree = "<group>"; };
+		3E017B4228ECB33A00D286E9 /* BLACK8.H */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.h; name = BLACK8.H; path = ../../../CHAP_8/BLACK8.H; sourceTree = "<group>"; };
+		3E017B4328ECB33A00D286E9 /* BLACK8.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK8.C; path = ../../../CHAP_8/BLACK8.C; sourceTree = "<group>"; };
+		3E2CDEB328F0B76F00594EB2 /* BLACK11.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK11.C; path = ../../../CHAP_11/BLACK11.C; sourceTree = "<group>"; };
+		3E2CDEB428F0B76F00594EB2 /* BLACK11.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK11.H; path = ../../../CHAP_11/BLACK11.H; sourceTree = "<group>"; };
+		3E2CDEB528F0B8CE00594EB2 /* TRIDEMO.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = TRIDEMO.C; path = ../../TRIDEMO.C; sourceTree = "<group>"; };
+		3E2CDEB728F0B8DD00594EB2 /* TRIDEMO.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = TRIDEMO.h; sourceTree = "<group>"; };
+		3E2CDEB928F0D4D200594EB2 /* SOLIDEMO.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = SOLIDEMO.C; path = ../../SOLIDEMO.C; sourceTree = "<group>"; };
+		3E2CDEBB28F0D5F900594EB2 /* SOLIDEMO.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = SOLIDEMO.h; sourceTree = "<group>"; };
+		3E2CDEBC28F0D6B000594EB2 /* CUBE.PLG */ = {isa = PBXFileReference; lastKnownFileType = text; name = CUBE.PLG; path = ../../CUBE.PLG; sourceTree = "<group>"; };
+		3E2CDEBE28F0D75800594EB2 /* STANDARD.PAL */ = {isa = PBXFileReference; lastKnownFileType = text; name = STANDARD.PAL; path = ../../STANDARD.PAL; sourceTree = "<group>"; };
+		3E3C579428E883D300637704 /* BLACK3.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK3.H; path = ../../../CHAP_3/BLACK3.H; sourceTree = "<group>"; };
+		3E3C579528E883D300637704 /* BLACK3.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK3.C; path = ../../../CHAP_3/BLACK3.C; sourceTree = "<group>"; };
+		3E40C93628F20AA800144BFB /* GOURDEMO.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GOURDEMO.h; sourceTree = "<group>"; };
+		3E40C93728F20ACE00144BFB /* GOURDEMO.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = GOURDEMO.C; path = ../../GOURDEMO.C; sourceTree = "<group>"; };
+		3E9AC70028F30B080009A7D5 /* TEXTDEMO.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = TEXTDEMO.C; path = ../../TEXTDEMO.C; sourceTree = "<group>"; };
+		3E9AC70228F30B2E0009A7D5 /* TEXTDEMO.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = TEXTDEMO.h; sourceTree = "<group>"; };
+		3E9AC70328F30BDF0009A7D5 /* TEXTURES.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = TEXTURES.PCX; path = ../../TEXTURES.PCX; sourceTree = "<group>"; };
+		3EF00A4E28E99F84000AC74A /* BLACK4.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK4.H; path = ../../../CHAP_4/BLACK4.H; sourceTree = "<group>"; };
+		3EF00A4F28E99F84000AC74A /* BLACK4.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK4.C; path = ../../../CHAP_4/BLACK4.C; sourceTree = "<group>"; };
+/* End PBXFileReference section */
+
+/* Begin PBXFrameworksBuildPhase section */
+		2DA6C5A9258AA66B002B1931 /* Frameworks */ = {
+			isa = PBXFrameworksBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXFrameworksBuildPhase section */
+
+/* Begin PBXGroup section */
+		2DA6C5A3258AA66B002B1931 = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AE258AA66B002B1931 /* HostApp */,
+				2DA6C5AD258AA66B002B1931 /* Products */,
+			);
+			sourceTree = "<group>";
+		};
+		2DA6C5AD258AA66B002B1931 /* Products */ = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AC258AA66B002B1931 /* CHAP12 */,
+			);
+			name = Products;
+			sourceTree = "<group>";
+		};
+		2DA6C5AE258AA66B002B1931 /* HostApp */ = {
+			isa = PBXGroup;
+			children = (
+				2D9EAF26258E750E00297C9C /* HostApp.entitlements */,
+				2DA6C5AF258AA66B002B1931 /* main.cpp */,
+				2D9EAF1F258E6A4300297C9C /* sdl.h */,
+				2DB9F18C258EA679000A3299 /* ega.h */,
+				2D2793D725AD90B500DEC620 /* font.h */,
+				3E3C579528E883D300637704 /* BLACK3.C */,
+				3E3C579428E883D300637704 /* BLACK3.H */,
+				3EF00A4F28E99F84000AC74A /* BLACK4.C */,
+				3EF00A4E28E99F84000AC74A /* BLACK4.H */,
+				3E017B4328ECB33A00D286E9 /* BLACK8.C */,
+				3E017B4228ECB33A00D286E9 /* BLACK8.H */,
+				3E2CDEB328F0B76F00594EB2 /* BLACK11.C */,
+				3E2CDEB428F0B76F00594EB2 /* BLACK11.H */,
+				3E2CDEB528F0B8CE00594EB2 /* TRIDEMO.C */,
+				3E2CDEB728F0B8DD00594EB2 /* TRIDEMO.h */,
+				3E2CDEB928F0D4D200594EB2 /* SOLIDEMO.C */,
+				3E2CDEBB28F0D5F900594EB2 /* SOLIDEMO.h */,
+				3E2CDEBC28F0D6B000594EB2 /* CUBE.PLG */,
+				3E2CDEBE28F0D75800594EB2 /* STANDARD.PAL */,
+				3E40C93728F20ACE00144BFB /* GOURDEMO.C */,
+				3E40C93628F20AA800144BFB /* GOURDEMO.h */,
+				3E9AC70028F30B080009A7D5 /* TEXTDEMO.C */,
+				3E9AC70228F30B2E0009A7D5 /* TEXTDEMO.h */,
+				3E9AC70328F30BDF0009A7D5 /* TEXTURES.PCX */,
+			);
+			path = HostApp;
+			sourceTree = "<group>";
+		};
+/* End PBXGroup section */
+
+/* Begin PBXNativeTarget section */
+		2DA6C5AB258AA66B002B1931 /* CHAP12 */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = 2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP12" */;
+			buildPhases = (
+				2DA6C5A8258AA66B002B1931 /* Sources */,
+				2DA6C5A9258AA66B002B1931 /* Frameworks */,
+				2DA6C5AA258AA66B002B1931 /* CopyFiles */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+			);
+			name = CHAP12;
+			productName = CicParserSim;
+			productReference = 2DA6C5AC258AA66B002B1931 /* CHAP12 */;
+			productType = "com.apple.product-type.tool";
+		};
+/* End PBXNativeTarget section */
+
+/* Begin PBXProject section */
+		2DA6C5A4258AA66B002B1931 /* Project object */ = {
+			isa = PBXProject;
+			attributes = {
+				LastUpgradeCheck = 1240;
+				TargetAttributes = {
+					2DA6C5AB258AA66B002B1931 = {
+						CreatedOnToolsVersion = 12.2;
+					};
+				};
+			};
+			buildConfigurationList = 2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP12" */;
+			compatibilityVersion = "Xcode 9.3";
+			developmentRegion = en;
+			hasScannedForEncodings = 0;
+			knownRegions = (
+				en,
+				Base,
+			);
+			mainGroup = 2DA6C5A3258AA66B002B1931;
+			productRefGroup = 2DA6C5AD258AA66B002B1931 /* Products */;
+			projectDirPath = "";
+			projectRoot = "";
+			targets = (
+				2DA6C5AB258AA66B002B1931 /* CHAP12 */,
+			);
+		};
+/* End PBXProject section */
+
+/* Begin PBXSourcesBuildPhase section */
+		2DA6C5A8258AA66B002B1931 /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				3E017B4428ECB33A00D286E9 /* BLACK8.C in Sources */,
+				3E9AC70128F30B080009A7D5 /* TEXTDEMO.C in Sources */,
+				3E2CDEB828F0BA0A00594EB2 /* BLACK11.C in Sources */,
+				2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */,
+				3EF00A5928E9A177000AC74A /* BLACK4.C in Sources */,
+				3E3C579628E883D700637704 /* BLACK3.C in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXSourcesBuildPhase section */
+
+/* Begin XCBuildConfiguration section */
+		2DA6C5B1258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = dwarf;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				ENABLE_TESTABILITY = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_OPTIMIZATION_LEVEL = 0;
+				GCC_PREPROCESSOR_DEFINITIONS = (
+					"DEBUG=1",
+					"$(inherited)",
+				);
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Debug;
+		};
+		2DA6C5B2258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				ENABLE_NS_ASSERTIONS = NO;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = NO;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Release;
+		};
+		2DA6C5B4258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = /opt/homebrew/Cellar/sdl2/2.24.0/include/SDL2;
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/Cellar/sdl2/2.24.0/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Debug;
+		};
+		2DA6C5B5258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = /opt/homebrew/Cellar/sdl2/2.24.0/include/SDL2;
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/Cellar/sdl2/2.24.0/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Release;
+		};
+/* End XCBuildConfiguration section */
+
+/* Begin XCConfigurationList section */
+		2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP12" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B1258AA66B002B1931 /* Debug */,
+				2DA6C5B2258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP12" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B4258AA66B002B1931 /* Debug */,
+				2DA6C5B5258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+/* End XCConfigurationList section */
+	};
+	rootObject = 2DA6C5A4258AA66B002B1931 /* Project object */;
+}
diff --git a/CHAP_12/HostApp/CHAP12.xcodeproj/project.xcworkspace/contents.xcworkspacedata b/CHAP_12/HostApp/CHAP12.xcodeproj/project.xcworkspace/contents.xcworkspacedata
new file mode 100644
index 0000000..2652d85
--- /dev/null
+++ b/CHAP_12/HostApp/CHAP12.xcodeproj/project.xcworkspace/contents.xcworkspacedata
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "self:/Users/ac27/Dev/black_art/black_art_3d_revival/CHAP_12/HostApp/CHAP12.xcodeproj">
+   </FileRef>
+</Workspace>
diff --git a/CHAP_12/HostApp/CHAP12.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist b/CHAP_12/HostApp/CHAP12.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
new file mode 100644
index 0000000..18d9810
--- /dev/null
+++ b/CHAP_12/HostApp/CHAP12.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IDEDidComputeMac32BitWarning</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_12/HostApp/CHAP12.xcodeproj/xcshareddata/xcschemes/CHAP12.xcscheme b/CHAP_12/HostApp/CHAP12.xcodeproj/xcshareddata/xcschemes/CHAP12.xcscheme
new file mode 100644
index 0000000..54d79ca
--- /dev/null
+++ b/CHAP_12/HostApp/CHAP12.xcodeproj/xcshareddata/xcschemes/CHAP12.xcscheme
@@ -0,0 +1,85 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "1400"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+               BuildableName = "CHAP12"
+               BlueprintName = "CHAP12"
+               ReferencedContainer = "container:CHAP12.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES">
+      <Testables>
+      </Testables>
+   </TestAction>
+   <LaunchAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      debugServiceExtension = "internal"
+      allowLocationSimulation = "YES"
+      viewDebuggingEnabled = "No">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+            BuildableName = "CHAP12"
+            BlueprintName = "CHAP12"
+            ReferencedContainer = "container:CHAP12.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+      <CommandLineArguments>
+         <CommandLineArgument
+            argument = "CUBE.PLG"
+            isEnabled = "YES">
+         </CommandLineArgument>
+      </CommandLineArguments>
+   </LaunchAction>
+   <ProfileAction
+      buildConfiguration = "Release"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      debugDocumentVersioning = "YES">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+            BuildableName = "CHAP12"
+            BlueprintName = "CHAP12"
+            ReferencedContainer = "container:CHAP12.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff --git a/CHAP_12/HostApp/HostApp/GOURDEMO.h b/CHAP_12/HostApp/HostApp/GOURDEMO.h
new file mode 100644
index 0000000..2de93b4
--- /dev/null
+++ b/CHAP_12/HostApp/HostApp/GOURDEMO.h
@@ -0,0 +1,13 @@
+//
+//  GOURDEMO.h
+//  CHAP12
+//
+//  Created by Tosha on 08/10/2022.
+//
+
+#ifndef GOURDEMO_h
+#define GOURDEMO_h
+
+void start_gourdemo(CEga *ega);
+
+#endif /* GOURDEMO_h */
diff --git a/CHAP_12/HostApp/HostApp/HostApp.entitlements b/CHAP_12/HostApp/HostApp/HostApp.entitlements
new file mode 100644
index 0000000..8cc185a
--- /dev/null
+++ b/CHAP_12/HostApp/HostApp/HostApp.entitlements
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>com.apple.security.cs.disable-library-validation</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_12/HostApp/HostApp/SOLIDEMO.h b/CHAP_12/HostApp/HostApp/SOLIDEMO.h
new file mode 100644
index 0000000..ba8aa34
--- /dev/null
+++ b/CHAP_12/HostApp/HostApp/SOLIDEMO.h
@@ -0,0 +1,13 @@
+//
+//  SOLIDEMO.h
+//  CHAP12
+//
+//  Created by Tosha on 07/10/2022.
+//
+
+#ifndef SOLIDEMO_h
+#define SOLIDEMO_h
+
+void start_solidemo(int argc, char **argv, CEga *ega);
+
+#endif /* SOLIDEMO_h */
diff --git a/CHAP_12/HostApp/HostApp/TEXTDEMO.h b/CHAP_12/HostApp/HostApp/TEXTDEMO.h
new file mode 100644
index 0000000..2cd609b
--- /dev/null
+++ b/CHAP_12/HostApp/HostApp/TEXTDEMO.h
@@ -0,0 +1,13 @@
+//
+//  TEXTDEMO.h
+//  CHAP12
+//
+//  Created by Tosha on 09/10/2022.
+//
+
+#ifndef TEXTDEMO_h
+#define TEXTDEMO_h
+
+void start_textdemo(CEga *ega);
+
+#endif /* TEXTDEMO_h */
diff --git a/CHAP_12/HostApp/HostApp/TRIDEMO.h b/CHAP_12/HostApp/HostApp/TRIDEMO.h
new file mode 100644
index 0000000..812a2fe
--- /dev/null
+++ b/CHAP_12/HostApp/HostApp/TRIDEMO.h
@@ -0,0 +1,13 @@
+//
+//  TRIDEMO.h
+//  CHAP12
+//
+//  Created by Tosha on 07/10/2022.
+//
+
+#ifndef TRIDEMO_h
+#define TRIDEMO_h
+
+void start_tridemo(CEga *ega);
+
+#endif /* TRIDEMO_h */
diff --git a/CHAP_12/HostApp/HostApp/ega.h b/CHAP_12/HostApp/HostApp/ega.h
new file mode 100644
index 0000000..b19dc71
--- /dev/null
+++ b/CHAP_12/HostApp/HostApp/ega.h
@@ -0,0 +1,63 @@
+#ifndef EGA_h
+#define EGA_h
+
+#include "font.h"
+
+typedef uint16_t WORD;
+typedef uint8_t BYTE;
+typedef uint8_t FLAG;
+typedef uint16_t WORD;
+
+typedef uint32_t DWORD;
+
+class CVideoAdapter
+{
+public:
+	virtual DWORD GetPixel(int x, int y, int p) = 0;
+};
+
+class CEga : public CVideoAdapter
+{
+	enum {
+		MemSize = 0x10000*2
+	};
+
+public:
+	DWORD memory[MemSize];
+
+    // https://www.ditig.com/256-colors-cheat-sheet
+    // Note: first 16 colors are from VGA palette, rest is from Xterm
+    DWORD palette[256] = {
+        0x000000, 0x0000b0, 0x00b000, 0x00b0b0, 0xb00000, 0xb000b0, 0xb0b000, 0xb0b0b0,
+        0x808080, 0x0000ff, 0x00ff00, 0x00ffff, 0xff0000, 0xff00ff, 0xffff00, 0xffffff, 0x000000, 0x00005f, 0x000087, 0x0000af, 0x0000d7, 0x0000ff, 0x005f00, 0x005f5f, 0x005f87, 0x005faf, 0x005fd7, 0x005fff, 0x008700, 0x00875f, 0x008787, 0x0087af, 0x0087d7, 0x0087ff, 0x00af00, 0x00af5f, 0x00af87, 0x00afaf, 0x00afd7, 0x00afff, 0x00d700, 0x00d75f, 0x00d787, 0x00d7af, 0x00d7d7, 0x00d7ff, 0x00ff00, 0x00ff5f, 0x00ff87, 0x00ffaf, 0x00ffd7, 0x00ffff, 0x5f0000, 0x5f005f, 0x5f0087, 0x5f00af, 0x5f00d7, 0x5f00ff, 0x5f5f00, 0x5f5f5f, 0x5f5f87, 0x5f5faf, 0x5f5fd7, 0x5f5fff, 0x5f8700, 0x5f875f, 0x5f8787, 0x5f87af, 0x5f87d7, 0x5f87ff, 0x5faf00, 0x5faf5f, 0x5faf87, 0x5fafaf, 0x5fafd7, 0x5fafff, 0x5fd700, 0x5fd75f, 0x5fd787, 0x5fd7af, 0x5fd7d7, 0x5fd7ff, 0x5fff00, 0x5fff5f, 0x5fff87, 0x5fffaf, 0x5fffd7, 0x5fffff, 0x870000, 0x87005f, 0x870087, 0x8700af, 0x8700d7, 0x8700ff, 0x875f00, 0x875f5f, 0x875f87, 0x875faf, 0x875fd7, 0x875fff, 0x878700, 0x87875f, 0x878787, 0x8787af, 0x8787d7, 0x8787ff, 0x87af00, 0x87af5f, 0x87af87, 0x87afaf, 0x87afd7, 0x87afff, 0x87d700, 0x87d75f, 0x87d787, 0x87d7af, 0x87d7d7, 0x87d7ff, 0x87ff00, 0x87ff5f, 0x87ff87, 0x87ffaf, 0x87ffd7, 0x87ffff, 0xaf0000, 0xaf005f, 0xaf0087, 0xaf00af, 0xaf00d7, 0xaf00ff, 0xaf5f00, 0xaf5f5f, 0xaf5f87, 0xaf5faf, 0xaf5fd7, 0xaf5fff, 0xaf8700, 0xaf875f, 0xaf8787, 0xaf87af, 0xaf87d7, 0xaf87ff, 0xafaf00, 0xafaf5f, 0xafaf87, 0xafafaf, 0xafafd7, 0xafafff, 0xafd700, 0xafd75f, 0xafd787, 0xafd7af, 0xafd7d7, 0xafd7ff, 0xafff00, 0xafff5f, 0xafff87, 0xafffaf, 0xafffd7, 0xafffff, 0xd70000, 0xd7005f, 0xd70087, 0xd700af, 0xd700d7, 0xd700ff, 0xd75f00, 0xd75f5f, 0xd75f87, 0xd75faf, 0xd75fd7, 0xd75fff, 0xd78700, 0xd7875f, 0xd78787, 0xd787af, 0xd787d7, 0xd787ff, 0xd7af00, 0xd7af5f, 0xd7af87, 0xd7afaf, 0xd7afd7, 0xd7afff, 0xd7d700, 0xd7d75f, 0xd7d787, 0xd7d7af, 0xd7d7d7, 0xd7d7ff, 0xd7ff00, 0xd7ff5f, 0xd7ff87, 0xd7ffaf, 0xd7ffd7, 0xd7ffff, 0xff0000, 0xff005f, 0xff0087, 0xff00af, 0xff00d7, 0xff00ff, 0xff5f00, 0xff5f5f, 0xff5f87, 0xff5faf, 0xff5fd7, 0xff5fff, 0xff8700, 0xff875f, 0xff8787, 0xff87af, 0xff87d7, 0xff87ff, 0xffaf00, 0xffaf5f, 0xffaf87, 0xffafaf, 0xffafd7, 0xffafff, 0xffd700, 0xffd75f, 0xffd787, 0xffd7af, 0xffd7d7, 0xffd7ff, 0xffff00, 0xffff5f, 0xffff87, 0xffffaf, 0xffffd7, 0xffffff, 0x080808, 0x121212, 0x1c1c1c, 0x262626, 0x303030, 0x3a3a3a, 0x444444, 0x4e4e4e, 0x585858, 0x626262, 0x6c6c6c, 0x767676, 0x808080, 0x8a8a8a, 0x949494, 0x9e9e9e, 0xa8a8a8, 0xb2b2b2, 0xbcbcbc, 0xc6c6c6, 0xd0d0d0, 0xdadada, 0xe4e4e4, 0xeeeeee
+    };
+
+public:
+	CEga()
+	{
+        memset(memory, 0, sizeof(memory));
+	}
+	
+    void SetPaletteIndex(int index, int rgb)
+    {
+        int r = ((rgb & 4) ? 2 : 0) + ((rgb & 32) ? 1 : 0);
+        int g = ((rgb & 2) ? 2 : 0) + ((rgb & 16) ? 1 : 0);
+        int b = ((rgb & 1) ? 2 : 0) + ((rgb & 8) ? 1 : 0);
+        r = r * 255 / 3;
+        g = g * 255 / 3;
+        b = b * 255 / 3;
+        palette[index] = b | (g << 8) | (r << 16);
+
+    }
+    
+	virtual DWORD GetPixel(int x, int y, int page = -1) override
+	{
+        BYTE* _video = (BYTE*)memory;
+        int idx = (int)_video[((y<<8) + (y<<6)) + x];
+        return palette[idx];
+	}
+};
+
+void _sync();
+
+#endif
diff --git a/CHAP_12/HostApp/HostApp/font.h b/CHAP_12/HostApp/HostApp/font.h
new file mode 100644
index 0000000..8be86b2
--- /dev/null
+++ b/CHAP_12/HostApp/HostApp/font.h
@@ -0,0 +1,313 @@
+#ifndef FONT_h
+#define FONT_h
+
+#pragma once
+
+// http://www.hampa.ch/pce/download.html
+// genoa-ega-2.41.rom
+// dd if=genoa-ega-2.41.rom of=font bs=1 skip=8224 count=3584
+// xxd -i font > font.h
+
+static const uint8_t font[] = {
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81,
+  0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xff,
+  0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
+  0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
+  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff,
+  0xff, 0xff, 0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc,
+  0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30,
+  0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x63,
+  0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06,
+  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66,
+  0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xdb,
+  0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c,
+  0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c,
+  0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c,
+  0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06,
+  0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6,
+  0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c,
+  0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x30,
+  0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c,
+  0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38, 0x78, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c,
+  0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66,
+  0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0,
+  0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x6c,
+  0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66,
+  0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x0c,
+  0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66,
+  0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
+  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60,
+  0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x30, 0x30, 0x30,
+  0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0,
+  0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
+  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xff, 0x00, 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76,
+  0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66,
+  0x3c, 0x00, 0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66,
+  0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec,
+  0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60,
+  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c,
+  0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30,
+  0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38,
+  0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38,
+  0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66,
+  0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00, 0x00,
+  0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc,
+  0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x38,
+  0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
+  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe,
+  0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x38,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x66,
+  0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x60,
+  0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c,
+  0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x76,
+  0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x6c,
+  0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00, 0x10,
+  0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00, 0x00, 0xc6,
+  0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60,
+  0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xcc, 0xcc,
+  0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x0e,
+  0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
+  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
+  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
+  0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
+  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06,
+  0x06, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c,
+  0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c,
+  0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x44, 0x11, 0x44,
+  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x55, 0xaa,
+  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
+  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
+  0xdd, 0x77, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
+  0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff,
+  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
+  0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
+  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
+  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30,
+  0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c,
+  0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c,
+  0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00,
+  0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e,
+  0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18,
+  0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00,
+  0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c,
+  0x1c, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8,
+  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+};
+
+#endif
diff --git a/CHAP_12/HostApp/HostApp/main.cpp b/CHAP_12/HostApp/HostApp/main.cpp
new file mode 100644
index 0000000..ad3b5eb
--- /dev/null
+++ b/CHAP_12/HostApp/HostApp/main.cpp
@@ -0,0 +1,58 @@
+//
+//  main.cpp
+//  HostApp
+//
+//
+
+#include <iostream>
+#include <vector>
+#include <sstream>
+#include <iomanip>
+#include <list>
+
+#include "sdl.h"
+#include "ega.h"
+
+#include "TEXTDEMO.h"
+
+CEga mVideo;
+CSdl mSdl;
+std::list<int> keyboardBuffer;
+
+void onKey(int k, int p)
+{
+    if (!p)
+        return;
+
+    int key = 0;
+    switch (k)
+    {
+        case SDL_SCANCODE_UP: key = 0x4800; break;
+        case SDL_SCANCODE_DOWN: key = 0x5000; break;
+        case SDL_SCANCODE_LEFT: key = 0x4b00; break;
+        case SDL_SCANCODE_RIGHT: key = 0x4d00; break;
+        case SDL_SCANCODE_SPACE: key = 0x3920; break;
+        case SDL_SCANCODE_RETURN: key = 0x1c0d; break;
+    }
+
+    if (key)
+    {
+        keyboardBuffer.push_back(key);
+    }
+}
+
+void _sync()
+{
+    for (int y=0; y<mSdl.Height; y++)
+      for (int x=0; x<mSdl.Width; x++)
+        mSdl.SetPixel(x, y, mVideo.GetPixel(x, y));
+    
+    mSdl.Loop();
+}
+
+int main(int argc, char * argv[]) {
+    mSdl.Init();
+    start_textdemo(&mVideo);
+    mSdl.Deinit();
+    return 0;
+}
diff --git a/CHAP_12/HostApp/HostApp/sdl.h b/CHAP_12/HostApp/HostApp/sdl.h
new file mode 100644
index 0000000..5cb08a1
--- /dev/null
+++ b/CHAP_12/HostApp/HostApp/sdl.h
@@ -0,0 +1,144 @@
+#ifndef SDL_h
+#define SDL_h
+
+typedef uint32_t Uint32;
+#include <SDL.h>
+#include <SDL_render.h>
+
+void onKey(int k, int p);
+
+class CSdl
+{
+    
+    std::vector< unsigned char > pixels;
+    const int pixelSize = 2;
+
+    SDL_Renderer* renderer{nullptr};
+    SDL_Texture* texture{nullptr};
+    SDL_Window* window{nullptr};
+    bool running{true};
+    int lastKey{0};
+
+public:
+    enum {
+        Width = 320,//640,
+        Height = 200//350
+    };
+
+    void Init()
+    {
+        pixels.resize(Width*Height*4);
+        SDL_Init( SDL_INIT_EVERYTHING );
+        atexit( SDL_Quit );
+        
+        window = SDL_CreateWindow
+        (
+         "BlackArt simulator",
+         SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
+         Width*pixelSize, Height*pixelSize,
+         SDL_WINDOW_SHOWN
+         );
+        
+        renderer = SDL_CreateRenderer
+        (
+         window,
+         -1,
+         SDL_RENDERER_ACCELERATED
+         );
+
+        texture = SDL_CreateTexture
+        (
+         renderer,
+         SDL_PIXELFORMAT_ARGB8888,
+         SDL_TEXTUREACCESS_STREAMING,
+         Width, Height
+         );
+    }
+    
+    void Blit()
+    {
+        SDL_SetRenderDrawColor( renderer, 0, 0, 0, SDL_ALPHA_OPAQUE );
+        SDL_RenderClear( renderer );
+        
+        SDL_UpdateTexture
+        (
+         texture,
+         NULL,
+         &pixels[0],
+         Width * 4
+         );
+        
+        SDL_RenderCopy( renderer, texture, NULL, NULL );
+        SDL_RenderPresent( renderer );
+    }
+    
+    void Loop()
+    {
+//        SDL_Event event;
+//
+//        while( SDL_PollEvent( &event ) )
+//        {
+//            if (SDL_KEYDOWN == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 1);
+//            }
+//
+//            if (SDL_KEYUP == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 0);
+//            }
+//
+//            if( ( SDL_QUIT == event.type ) ||
+//               ( SDL_KEYDOWN == event.type && SDL_SCANCODE_ESCAPE == event.key.keysym.scancode ) )
+//            {
+//                running = false;
+//                break;
+//            }
+//        }
+        
+        Blit();
+
+        //const Uint64 end = SDL_GetPerformanceCounter();
+        //const static Uint64 freq = SDL_GetPerformanceFrequency();
+        //const double seconds = ( end - start ) / static_cast< double >( freq );
+        //std::cout << "Frame time: " << seconds * 1000.0 << "ms" << std::endl;
+//        if (running)
+//            SDL_Delay(20);
+    }
+    
+    void Deinit()
+    {
+        SDL_DestroyRenderer( renderer );
+        SDL_DestroyWindow( window );
+        SDL_Quit();
+    }
+    
+    void SetPixel(int x, int y, uint32_t c)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        pixels[ offset + 0 ] = (uint8_t)c;
+        pixels[ offset + 1 ] = (uint8_t)(c >> 8);
+        pixels[ offset + 2 ] = (uint8_t)(c >> 16);
+        pixels[ offset + 3 ] = SDL_ALPHA_OPAQUE;
+    }
+
+    uint32_t GetPixel(int x, int y)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        int b = pixels[ offset + 0 ];
+        int g = pixels[ offset + 1 ];
+        int r = pixels[ offset + 2 ];
+        return r | (g << 8) | (b << 16);
+    }
+
+};
+
+#endif
diff --git a/CHAP_12/SOLIDEMO.C b/CHAP_12/SOLIDEMO.C
index 0bad8a2..785c0c6 100755
--- a/CHAP_12/SOLIDEMO.C
+++ b/CHAP_12/SOLIDEMO.C
@@ -1,15 +1,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 #include <search.h>             // this one is needed for qsort()
@@ -18,10 +15,7 @@
 
 #include "black3.h"
 #include "black4.h"
-#include "black5.h"
-#include "black6.h"
 #include "black8.h"
-#include "black9.h"
 #include "black11.h"
 
 // G L O B A L S /////////////////////////////////////////////////////////////
@@ -30,7 +24,7 @@ object test_object;   // the test object
 
 // M A I N ////////////////////////////////////////////////////////////////////
 
-void main(int argc,char **argv)
+void start_solidemo(int argc, char **argv, CEga *ega)
 {
 
 int index,   // looping variable
@@ -63,7 +57,7 @@ Build_Look_Up_Tables();
 
 // set graphics to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // allocate double buffer
 
@@ -76,20 +70,33 @@ Write_Palette(0,255,(RGB_palette_ptr)&color_palette_3d);
 
 // install the isr keyboard driver
 
-Keyboard_Install_Driver();
+//Keyboard_Install_Driver();
 
 // set viewing distance
 
 viewing_distance = 250;
 
 // main event loop
-
+    
+// Event handler
+SDL_Event e;
 while(!done)
      {
 
      // compute starting time of this frame
 
      starting_time = Timer_Query();
+     
+     while( SDL_PollEvent( &e ) != 0 )
+     {
+         //User requests quit
+         if( e.type == SDL_QUIT )
+         {
+             done = 1;
+         }
+     }
+         
+     const Uint8* keystates = SDL_GetKeyboardState(NULL);
 
      // erase the screen
 
@@ -99,38 +106,38 @@ while(!done)
 
      // test if user is moving object to right
 
-     if (keyboard_state[MAKE_RIGHT])
-        test_object.world_pos.x+=5;
+     if (keystates[SDL_SCANCODE_RIGHT])
+         test_object.world_pos.x+=5;
 
-     // test if user is moving object to left
+      // test if user is moving object to left
 
-     if (keyboard_state[MAKE_LEFT])
-        test_object.world_pos.x-=5;
+      if (keystates[SDL_SCANCODE_LEFT])
+         test_object.world_pos.x-=5;
 
-     // test if user is moving object up
+      // test if user is moving object up
 
-     if (keyboard_state[MAKE_UP])
-        test_object.world_pos.y-=5;
+      if (keystates[SDL_SCANCODE_UP])
+         test_object.world_pos.y-=5;
 
-     // test if user is moving object down
+      // test if user is moving object down
 
-     if (keyboard_state[MAKE_DOWN])
-        test_object.world_pos.y+=5;
+      if (keystates[SDL_SCANCODE_DOWN])
+         test_object.world_pos.y+=5;
 
-     // test if user is moving object farther
+      // test if user is moving object farther
 
-     if (keyboard_state[MAKE_PGUP])
-        test_object.world_pos.z+=15;
+      if (keystates[SDL_SCANCODE_EQUALS])
+         test_object.world_pos.z+=15;
 
-     // test if user is moving object nearer
+      // test if user is moving object nearer
 
-     if (keyboard_state[MAKE_PGDWN])
-        test_object.world_pos.z-=15;
+      if (keystates[SDL_SCANCODE_MINUS])
+         test_object.world_pos.z-=15;
 
-     // test for exit key
+      // test for exit key
 
-     if (keyboard_state[MAKE_ESC])
-        done=1;
+      if (keystates[SDL_SCANCODE_ESCAPE])
+         done=1;
 
 
      // rotate the object on all three axes
@@ -186,21 +193,21 @@ while(!done)
      Display_Double_Buffer(double_buffer,0);
 
      // lock onto 18 frames per second max
-
-     while((Timer_Query()-starting_time)<1);
+     _sync();
+//     while((Timer_Query()-starting_time)<CLOCKS_PER_SEC/18);
+     long now = Timer_Query();
+     if ((now-starting_time)<CLOCKS_PER_SEC/18) {
+         SDL_Delay((CLOCKS_PER_SEC/18 - (now-starting_time))*1000/CLOCKS_PER_SEC);
+     }
 
      } // end while
 
 // restore graphics mode back to text
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 // restore the old keyboard driver
 
-Keyboard_Remove_Driver();
+//Keyboard_Remove_Driver();
 
 } // end main
-
-
-
-
\ No newline at end of file
diff --git a/CHAP_12/TEXTDEMO.C b/CHAP_12/TEXTDEMO.C
index 6445138..295ca24 100755
--- a/CHAP_12/TEXTDEMO.C
+++ b/CHAP_12/TEXTDEMO.C
@@ -1,15 +1,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 
@@ -17,10 +14,7 @@
 
 #include "black3.h"
 #include "black4.h"
-#include "black5.h"
-#include "black6.h"
 #include "black8.h"
-#include "black9.h"
 #include "black11.h"
 
 // G L O B A L S /////////////////////////////////////////////////////////////
@@ -29,7 +23,7 @@ pcx_picture image_pcx;  // general PCX image used to load background and imagery
 
 ////////////////////////////////////////////////////////////////////////////////
 
-void main(void)
+void start_textdemo(CEga *ega)
 {
 
 int done=0,          // exit flag
@@ -39,7 +33,7 @@ int done=0,          // exit flag
 
 // set graphics mode to 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // load in the text textures 64x64
 
@@ -87,44 +81,43 @@ while(!done)
      {
      // test for key
 
-     if (kbhit())
-        {
-
-        // get the key
-
-        switch(getch())
-              {
-              case ' ': // space bar to select next texture
+     SDL_Event event;
+     while( SDL_PollEvent( &event ) )
+     {
+         if (SDL_KEYDOWN == event.type) {
+             switch (event.key.keysym.scancode) {
+                 case SDL_SCANCODE_SPACE: // space bar to select next texture
                  {
-
-                 if (++curr_texture>3)
-                    curr_texture=0;
-
+                     
+                     if (++curr_texture>3)
+                         curr_texture=0;
+                     
                  } break;
-
-              case 27: // escape key
+                     
+                 case SDL_SCANCODE_ESCAPE: // escape key
                  {
-                 // exit system
-                 done=1;
-
+                     // exit system
+                     done=1;
+                     
                  } break;
-
-              default:break;
-
-              } // end switch
+                     
+                 default:break;
+                     
+             } // end switch
+         }
 
         // draw textured triangle
 
         Draw_Triangle_2D_Text(x,y,x-50,y+60,x+30,y+80,video_buffer,curr_texture);
-
+        
+        _sync();
+         
         } // end kbhit
 
      } // end while
 
 // restore text mode
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 } // end main
-
-
\ No newline at end of file
diff --git a/CHAP_12/TRIDEMO.C b/CHAP_12/TRIDEMO.C
index 289e041..674d1b8 100755
--- a/CHAP_12/TRIDEMO.C
+++ b/CHAP_12/TRIDEMO.C
@@ -1,15 +1,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 
@@ -17,22 +14,19 @@
 
 #include "black3.h"
 #include "black4.h"
-#include "black5.h"
-#include "black6.h"
 #include "black8.h"
-#include "black9.h"
 #include "black11.h"
 
 // M A I N /////////////////////////////////////////////////////////////////////
 
-void main(void)
+void start_tridemo(CEga *ega)
 {
 
 int done=0;         // exit flag
 
 // set graphics mode to 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // point double buffer to video buffer since the triangle function
 // only writes to the double buffer and we want to see it doing the
@@ -41,9 +35,16 @@ Set_Graphics_Mode(GRAPHICS_MODE13);
 double_buffer = video_buffer;
 
 // main loop
-
-while(!kbhit())
+while(!done)
+{
+     SDL_Event event;
+     while( SDL_PollEvent( &event ) )
      {
+         if (SDL_KEYDOWN == event.type) {
+             done = 1;
+             break;
+         }
+     }
 
      // draw a triangle somewhere on the screen
 
@@ -51,13 +52,13 @@ while(!kbhit())
                       rand()%320,rand()%200,
                       rand()%320,rand()%200,
                       rand()%256);
+    
+    _sync();
 
      } // end while
 
 // restore text mode
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 } // end main
-
-
\ No newline at end of file
diff --git a/CHAP_13/HostApp/CHAP13.xcodeproj/project.pbxproj b/CHAP_13/HostApp/CHAP13.xcodeproj/project.pbxproj
new file mode 100644
index 0000000..cabc71a
--- /dev/null
+++ b/CHAP_13/HostApp/CHAP13.xcodeproj/project.pbxproj
@@ -0,0 +1,336 @@
+// !$*UTF8*$!
+{
+	archiveVersion = 1;
+	classes = {
+	};
+	objectVersion = 50;
+	objects = {
+
+/* Begin PBXBuildFile section */
+		2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 2DA6C5AF258AA66B002B1931 /* main.cpp */; };
+		3E017B4428ECB33A00D286E9 /* BLACK8.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E017B4328ECB33A00D286E9 /* BLACK8.C */; };
+		3E2CDEB828F0BA0A00594EB2 /* BLACK11.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E2CDEB328F0B76F00594EB2 /* BLACK11.C */; };
+		3E3C579628E883D700637704 /* BLACK3.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E3C579528E883D300637704 /* BLACK3.C */; };
+		3E9AC70628F33C760009A7D5 /* SOL2DEMO.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E9AC70528F33C760009A7D5 /* SOL2DEMO.C */; };
+		3EF00A5928E9A177000AC74A /* BLACK4.C in Sources */ = {isa = PBXBuildFile; fileRef = 3EF00A4F28E99F84000AC74A /* BLACK4.C */; };
+/* End PBXBuildFile section */
+
+/* Begin PBXCopyFilesBuildPhase section */
+		2DA6C5AA258AA66B002B1931 /* CopyFiles */ = {
+			isa = PBXCopyFilesBuildPhase;
+			buildActionMask = 12;
+			dstPath = "";
+			dstSubfolderSpec = 16;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXCopyFilesBuildPhase section */
+
+/* Begin PBXFileReference section */
+		2D2793D725AD90B500DEC620 /* font.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = font.h; sourceTree = "<group>"; };
+		2D9EAF1F258E6A4300297C9C /* sdl.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = sdl.h; sourceTree = "<group>"; };
+		2D9EAF26258E750E00297C9C /* HostApp.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = HostApp.entitlements; sourceTree = "<group>"; };
+		2DA6C5AC258AA66B002B1931 /* CHAP13 */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = CHAP13; sourceTree = BUILT_PRODUCTS_DIR; };
+		2DA6C5AF258AA66B002B1931 /* main.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = main.cpp; sourceTree = "<group>"; };
+		2DB9F18C258EA679000A3299 /* ega.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = ega.h; sourceTree = "<group>"; };
+		3E017B4228ECB33A00D286E9 /* BLACK8.H */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.h; name = BLACK8.H; path = ../../../CHAP_8/BLACK8.H; sourceTree = "<group>"; };
+		3E017B4328ECB33A00D286E9 /* BLACK8.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK8.C; path = ../../../CHAP_8/BLACK8.C; sourceTree = "<group>"; };
+		3E2CDEB328F0B76F00594EB2 /* BLACK11.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK11.C; path = ../../../CHAP_11/BLACK11.C; sourceTree = "<group>"; };
+		3E2CDEB428F0B76F00594EB2 /* BLACK11.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK11.H; path = ../../../CHAP_11/BLACK11.H; sourceTree = "<group>"; };
+		3E3C579428E883D300637704 /* BLACK3.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK3.H; path = ../../../CHAP_3/BLACK3.H; sourceTree = "<group>"; };
+		3E3C579528E883D300637704 /* BLACK3.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK3.C; path = ../../../CHAP_3/BLACK3.C; sourceTree = "<group>"; };
+		3E9AC70528F33C760009A7D5 /* SOL2DEMO.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = SOL2DEMO.C; path = ../../SOL2DEMO.C; sourceTree = "<group>"; };
+		3E9AC70728F33C820009A7D5 /* SOL2DEMO.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = SOL2DEMO.h; sourceTree = "<group>"; };
+		3EF00A4E28E99F84000AC74A /* BLACK4.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK4.H; path = ../../../CHAP_4/BLACK4.H; sourceTree = "<group>"; };
+		3EF00A4F28E99F84000AC74A /* BLACK4.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK4.C; path = ../../../CHAP_4/BLACK4.C; sourceTree = "<group>"; };
+/* End PBXFileReference section */
+
+/* Begin PBXFrameworksBuildPhase section */
+		2DA6C5A9258AA66B002B1931 /* Frameworks */ = {
+			isa = PBXFrameworksBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXFrameworksBuildPhase section */
+
+/* Begin PBXGroup section */
+		2DA6C5A3258AA66B002B1931 = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AE258AA66B002B1931 /* HostApp */,
+				2DA6C5AD258AA66B002B1931 /* Products */,
+			);
+			sourceTree = "<group>";
+		};
+		2DA6C5AD258AA66B002B1931 /* Products */ = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AC258AA66B002B1931 /* CHAP13 */,
+			);
+			name = Products;
+			sourceTree = "<group>";
+		};
+		2DA6C5AE258AA66B002B1931 /* HostApp */ = {
+			isa = PBXGroup;
+			children = (
+				2D9EAF26258E750E00297C9C /* HostApp.entitlements */,
+				2DA6C5AF258AA66B002B1931 /* main.cpp */,
+				2D9EAF1F258E6A4300297C9C /* sdl.h */,
+				2DB9F18C258EA679000A3299 /* ega.h */,
+				2D2793D725AD90B500DEC620 /* font.h */,
+				3E3C579528E883D300637704 /* BLACK3.C */,
+				3E3C579428E883D300637704 /* BLACK3.H */,
+				3EF00A4F28E99F84000AC74A /* BLACK4.C */,
+				3EF00A4E28E99F84000AC74A /* BLACK4.H */,
+				3E017B4328ECB33A00D286E9 /* BLACK8.C */,
+				3E017B4228ECB33A00D286E9 /* BLACK8.H */,
+				3E2CDEB328F0B76F00594EB2 /* BLACK11.C */,
+				3E2CDEB428F0B76F00594EB2 /* BLACK11.H */,
+				3E9AC70528F33C760009A7D5 /* SOL2DEMO.C */,
+				3E9AC70728F33C820009A7D5 /* SOL2DEMO.h */,
+			);
+			path = HostApp;
+			sourceTree = "<group>";
+		};
+/* End PBXGroup section */
+
+/* Begin PBXNativeTarget section */
+		2DA6C5AB258AA66B002B1931 /* CHAP13 */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = 2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP13" */;
+			buildPhases = (
+				2DA6C5A8258AA66B002B1931 /* Sources */,
+				2DA6C5A9258AA66B002B1931 /* Frameworks */,
+				2DA6C5AA258AA66B002B1931 /* CopyFiles */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+			);
+			name = CHAP13;
+			productName = CicParserSim;
+			productReference = 2DA6C5AC258AA66B002B1931 /* CHAP13 */;
+			productType = "com.apple.product-type.tool";
+		};
+/* End PBXNativeTarget section */
+
+/* Begin PBXProject section */
+		2DA6C5A4258AA66B002B1931 /* Project object */ = {
+			isa = PBXProject;
+			attributes = {
+				LastUpgradeCheck = 1240;
+				TargetAttributes = {
+					2DA6C5AB258AA66B002B1931 = {
+						CreatedOnToolsVersion = 12.2;
+					};
+				};
+			};
+			buildConfigurationList = 2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP13" */;
+			compatibilityVersion = "Xcode 9.3";
+			developmentRegion = en;
+			hasScannedForEncodings = 0;
+			knownRegions = (
+				en,
+				Base,
+			);
+			mainGroup = 2DA6C5A3258AA66B002B1931;
+			productRefGroup = 2DA6C5AD258AA66B002B1931 /* Products */;
+			projectDirPath = "";
+			projectRoot = "";
+			targets = (
+				2DA6C5AB258AA66B002B1931 /* CHAP13 */,
+			);
+		};
+/* End PBXProject section */
+
+/* Begin PBXSourcesBuildPhase section */
+		2DA6C5A8258AA66B002B1931 /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				3E9AC70628F33C760009A7D5 /* SOL2DEMO.C in Sources */,
+				3E017B4428ECB33A00D286E9 /* BLACK8.C in Sources */,
+				3E2CDEB828F0BA0A00594EB2 /* BLACK11.C in Sources */,
+				2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */,
+				3EF00A5928E9A177000AC74A /* BLACK4.C in Sources */,
+				3E3C579628E883D700637704 /* BLACK3.C in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXSourcesBuildPhase section */
+
+/* Begin XCBuildConfiguration section */
+		2DA6C5B1258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = dwarf;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				ENABLE_TESTABILITY = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_OPTIMIZATION_LEVEL = 0;
+				GCC_PREPROCESSOR_DEFINITIONS = (
+					"DEBUG=1",
+					"$(inherited)",
+				);
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Debug;
+		};
+		2DA6C5B2258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				ENABLE_NS_ASSERTIONS = NO;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = NO;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Release;
+		};
+		2DA6C5B4258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = /opt/homebrew/Cellar/sdl2/2.24.0/include/SDL2;
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/Cellar/sdl2/2.24.0/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Debug;
+		};
+		2DA6C5B5258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = /opt/homebrew/Cellar/sdl2/2.24.0/include/SDL2;
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/Cellar/sdl2/2.24.0/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Release;
+		};
+/* End XCBuildConfiguration section */
+
+/* Begin XCConfigurationList section */
+		2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP13" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B1258AA66B002B1931 /* Debug */,
+				2DA6C5B2258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP13" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B4258AA66B002B1931 /* Debug */,
+				2DA6C5B5258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+/* End XCConfigurationList section */
+	};
+	rootObject = 2DA6C5A4258AA66B002B1931 /* Project object */;
+}
diff --git a/CHAP_13/HostApp/CHAP13.xcodeproj/project.xcworkspace/contents.xcworkspacedata b/CHAP_13/HostApp/CHAP13.xcodeproj/project.xcworkspace/contents.xcworkspacedata
new file mode 100644
index 0000000..cd5248f
--- /dev/null
+++ b/CHAP_13/HostApp/CHAP13.xcodeproj/project.xcworkspace/contents.xcworkspacedata
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "self:/Users/ac27/Dev/black_art/black_art_3d_revival/CHAP_13/HostApp/CHAP13.xcodeproj">
+   </FileRef>
+</Workspace>
diff --git a/CHAP_13/HostApp/CHAP13.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist b/CHAP_13/HostApp/CHAP13.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
new file mode 100644
index 0000000..18d9810
--- /dev/null
+++ b/CHAP_13/HostApp/CHAP13.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IDEDidComputeMac32BitWarning</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_13/HostApp/CHAP13.xcodeproj/xcshareddata/xcschemes/CHAP13.xcscheme b/CHAP_13/HostApp/CHAP13.xcodeproj/xcshareddata/xcschemes/CHAP13.xcscheme
new file mode 100644
index 0000000..2abf88f
--- /dev/null
+++ b/CHAP_13/HostApp/CHAP13.xcodeproj/xcshareddata/xcschemes/CHAP13.xcscheme
@@ -0,0 +1,85 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "1400"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+               BuildableName = "CHAP13"
+               BlueprintName = "CHAP13"
+               ReferencedContainer = "container:CHAP13.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES">
+      <Testables>
+      </Testables>
+   </TestAction>
+   <LaunchAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      debugServiceExtension = "internal"
+      allowLocationSimulation = "YES"
+      viewDebuggingEnabled = "No">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+            BuildableName = "CHAP13"
+            BlueprintName = "CHAP13"
+            ReferencedContainer = "container:CHAP13.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+      <CommandLineArguments>
+         <CommandLineArgument
+            argument = "CUBE.PLG"
+            isEnabled = "YES">
+         </CommandLineArgument>
+      </CommandLineArguments>
+   </LaunchAction>
+   <ProfileAction
+      buildConfiguration = "Release"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      debugDocumentVersioning = "YES">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+            BuildableName = "CHAP13"
+            BlueprintName = "CHAP13"
+            ReferencedContainer = "container:CHAP13.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff --git a/CHAP_13/HostApp/HostApp/HostApp.entitlements b/CHAP_13/HostApp/HostApp/HostApp.entitlements
new file mode 100644
index 0000000..8cc185a
--- /dev/null
+++ b/CHAP_13/HostApp/HostApp/HostApp.entitlements
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>com.apple.security.cs.disable-library-validation</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_13/HostApp/HostApp/SOL2DEMO.h b/CHAP_13/HostApp/HostApp/SOL2DEMO.h
new file mode 100644
index 0000000..9e16b6f
--- /dev/null
+++ b/CHAP_13/HostApp/HostApp/SOL2DEMO.h
@@ -0,0 +1,13 @@
+//
+//  SOL2DEMO.h
+//  CHAP13
+//
+//  Created by Tosha on 09/10/2022.
+//
+
+#ifndef SOL2DEMO_h
+#define SOL2DEMO_h
+
+void start_sol2demo(int argc, char **argv, CEga *ega);
+
+#endif /* SOL2DEMO_h */
diff --git a/CHAP_13/HostApp/HostApp/ega.h b/CHAP_13/HostApp/HostApp/ega.h
new file mode 100644
index 0000000..b19dc71
--- /dev/null
+++ b/CHAP_13/HostApp/HostApp/ega.h
@@ -0,0 +1,63 @@
+#ifndef EGA_h
+#define EGA_h
+
+#include "font.h"
+
+typedef uint16_t WORD;
+typedef uint8_t BYTE;
+typedef uint8_t FLAG;
+typedef uint16_t WORD;
+
+typedef uint32_t DWORD;
+
+class CVideoAdapter
+{
+public:
+	virtual DWORD GetPixel(int x, int y, int p) = 0;
+};
+
+class CEga : public CVideoAdapter
+{
+	enum {
+		MemSize = 0x10000*2
+	};
+
+public:
+	DWORD memory[MemSize];
+
+    // https://www.ditig.com/256-colors-cheat-sheet
+    // Note: first 16 colors are from VGA palette, rest is from Xterm
+    DWORD palette[256] = {
+        0x000000, 0x0000b0, 0x00b000, 0x00b0b0, 0xb00000, 0xb000b0, 0xb0b000, 0xb0b0b0,
+        0x808080, 0x0000ff, 0x00ff00, 0x00ffff, 0xff0000, 0xff00ff, 0xffff00, 0xffffff, 0x000000, 0x00005f, 0x000087, 0x0000af, 0x0000d7, 0x0000ff, 0x005f00, 0x005f5f, 0x005f87, 0x005faf, 0x005fd7, 0x005fff, 0x008700, 0x00875f, 0x008787, 0x0087af, 0x0087d7, 0x0087ff, 0x00af00, 0x00af5f, 0x00af87, 0x00afaf, 0x00afd7, 0x00afff, 0x00d700, 0x00d75f, 0x00d787, 0x00d7af, 0x00d7d7, 0x00d7ff, 0x00ff00, 0x00ff5f, 0x00ff87, 0x00ffaf, 0x00ffd7, 0x00ffff, 0x5f0000, 0x5f005f, 0x5f0087, 0x5f00af, 0x5f00d7, 0x5f00ff, 0x5f5f00, 0x5f5f5f, 0x5f5f87, 0x5f5faf, 0x5f5fd7, 0x5f5fff, 0x5f8700, 0x5f875f, 0x5f8787, 0x5f87af, 0x5f87d7, 0x5f87ff, 0x5faf00, 0x5faf5f, 0x5faf87, 0x5fafaf, 0x5fafd7, 0x5fafff, 0x5fd700, 0x5fd75f, 0x5fd787, 0x5fd7af, 0x5fd7d7, 0x5fd7ff, 0x5fff00, 0x5fff5f, 0x5fff87, 0x5fffaf, 0x5fffd7, 0x5fffff, 0x870000, 0x87005f, 0x870087, 0x8700af, 0x8700d7, 0x8700ff, 0x875f00, 0x875f5f, 0x875f87, 0x875faf, 0x875fd7, 0x875fff, 0x878700, 0x87875f, 0x878787, 0x8787af, 0x8787d7, 0x8787ff, 0x87af00, 0x87af5f, 0x87af87, 0x87afaf, 0x87afd7, 0x87afff, 0x87d700, 0x87d75f, 0x87d787, 0x87d7af, 0x87d7d7, 0x87d7ff, 0x87ff00, 0x87ff5f, 0x87ff87, 0x87ffaf, 0x87ffd7, 0x87ffff, 0xaf0000, 0xaf005f, 0xaf0087, 0xaf00af, 0xaf00d7, 0xaf00ff, 0xaf5f00, 0xaf5f5f, 0xaf5f87, 0xaf5faf, 0xaf5fd7, 0xaf5fff, 0xaf8700, 0xaf875f, 0xaf8787, 0xaf87af, 0xaf87d7, 0xaf87ff, 0xafaf00, 0xafaf5f, 0xafaf87, 0xafafaf, 0xafafd7, 0xafafff, 0xafd700, 0xafd75f, 0xafd787, 0xafd7af, 0xafd7d7, 0xafd7ff, 0xafff00, 0xafff5f, 0xafff87, 0xafffaf, 0xafffd7, 0xafffff, 0xd70000, 0xd7005f, 0xd70087, 0xd700af, 0xd700d7, 0xd700ff, 0xd75f00, 0xd75f5f, 0xd75f87, 0xd75faf, 0xd75fd7, 0xd75fff, 0xd78700, 0xd7875f, 0xd78787, 0xd787af, 0xd787d7, 0xd787ff, 0xd7af00, 0xd7af5f, 0xd7af87, 0xd7afaf, 0xd7afd7, 0xd7afff, 0xd7d700, 0xd7d75f, 0xd7d787, 0xd7d7af, 0xd7d7d7, 0xd7d7ff, 0xd7ff00, 0xd7ff5f, 0xd7ff87, 0xd7ffaf, 0xd7ffd7, 0xd7ffff, 0xff0000, 0xff005f, 0xff0087, 0xff00af, 0xff00d7, 0xff00ff, 0xff5f00, 0xff5f5f, 0xff5f87, 0xff5faf, 0xff5fd7, 0xff5fff, 0xff8700, 0xff875f, 0xff8787, 0xff87af, 0xff87d7, 0xff87ff, 0xffaf00, 0xffaf5f, 0xffaf87, 0xffafaf, 0xffafd7, 0xffafff, 0xffd700, 0xffd75f, 0xffd787, 0xffd7af, 0xffd7d7, 0xffd7ff, 0xffff00, 0xffff5f, 0xffff87, 0xffffaf, 0xffffd7, 0xffffff, 0x080808, 0x121212, 0x1c1c1c, 0x262626, 0x303030, 0x3a3a3a, 0x444444, 0x4e4e4e, 0x585858, 0x626262, 0x6c6c6c, 0x767676, 0x808080, 0x8a8a8a, 0x949494, 0x9e9e9e, 0xa8a8a8, 0xb2b2b2, 0xbcbcbc, 0xc6c6c6, 0xd0d0d0, 0xdadada, 0xe4e4e4, 0xeeeeee
+    };
+
+public:
+	CEga()
+	{
+        memset(memory, 0, sizeof(memory));
+	}
+	
+    void SetPaletteIndex(int index, int rgb)
+    {
+        int r = ((rgb & 4) ? 2 : 0) + ((rgb & 32) ? 1 : 0);
+        int g = ((rgb & 2) ? 2 : 0) + ((rgb & 16) ? 1 : 0);
+        int b = ((rgb & 1) ? 2 : 0) + ((rgb & 8) ? 1 : 0);
+        r = r * 255 / 3;
+        g = g * 255 / 3;
+        b = b * 255 / 3;
+        palette[index] = b | (g << 8) | (r << 16);
+
+    }
+    
+	virtual DWORD GetPixel(int x, int y, int page = -1) override
+	{
+        BYTE* _video = (BYTE*)memory;
+        int idx = (int)_video[((y<<8) + (y<<6)) + x];
+        return palette[idx];
+	}
+};
+
+void _sync();
+
+#endif
diff --git a/CHAP_13/HostApp/HostApp/font.h b/CHAP_13/HostApp/HostApp/font.h
new file mode 100644
index 0000000..8be86b2
--- /dev/null
+++ b/CHAP_13/HostApp/HostApp/font.h
@@ -0,0 +1,313 @@
+#ifndef FONT_h
+#define FONT_h
+
+#pragma once
+
+// http://www.hampa.ch/pce/download.html
+// genoa-ega-2.41.rom
+// dd if=genoa-ega-2.41.rom of=font bs=1 skip=8224 count=3584
+// xxd -i font > font.h
+
+static const uint8_t font[] = {
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81,
+  0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xff,
+  0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
+  0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
+  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff,
+  0xff, 0xff, 0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc,
+  0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30,
+  0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x63,
+  0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06,
+  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66,
+  0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xdb,
+  0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c,
+  0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c,
+  0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c,
+  0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06,
+  0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6,
+  0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c,
+  0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x30,
+  0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c,
+  0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38, 0x78, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c,
+  0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66,
+  0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0,
+  0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x6c,
+  0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66,
+  0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x0c,
+  0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66,
+  0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
+  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60,
+  0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x30, 0x30, 0x30,
+  0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0,
+  0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
+  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xff, 0x00, 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76,
+  0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66,
+  0x3c, 0x00, 0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66,
+  0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec,
+  0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60,
+  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c,
+  0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30,
+  0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38,
+  0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38,
+  0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66,
+  0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00, 0x00,
+  0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc,
+  0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x38,
+  0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
+  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe,
+  0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x38,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x66,
+  0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x60,
+  0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c,
+  0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x76,
+  0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x6c,
+  0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00, 0x10,
+  0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00, 0x00, 0xc6,
+  0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60,
+  0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xcc, 0xcc,
+  0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x0e,
+  0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
+  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
+  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
+  0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
+  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06,
+  0x06, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c,
+  0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c,
+  0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x44, 0x11, 0x44,
+  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x55, 0xaa,
+  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
+  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
+  0xdd, 0x77, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
+  0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff,
+  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
+  0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
+  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
+  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30,
+  0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c,
+  0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c,
+  0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00,
+  0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e,
+  0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18,
+  0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00,
+  0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c,
+  0x1c, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8,
+  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+};
+
+#endif
diff --git a/CHAP_13/HostApp/HostApp/main.cpp b/CHAP_13/HostApp/HostApp/main.cpp
new file mode 100644
index 0000000..7b0d47f
--- /dev/null
+++ b/CHAP_13/HostApp/HostApp/main.cpp
@@ -0,0 +1,58 @@
+//
+//  main.cpp
+//  HostApp
+//
+//
+
+#include <iostream>
+#include <vector>
+#include <sstream>
+#include <iomanip>
+#include <list>
+
+#include "sdl.h"
+#include "ega.h"
+
+#include "SOL2DEMO.h"
+
+CEga mVideo;
+CSdl mSdl;
+std::list<int> keyboardBuffer;
+
+void onKey(int k, int p)
+{
+    if (!p)
+        return;
+
+    int key = 0;
+    switch (k)
+    {
+        case SDL_SCANCODE_UP: key = 0x4800; break;
+        case SDL_SCANCODE_DOWN: key = 0x5000; break;
+        case SDL_SCANCODE_LEFT: key = 0x4b00; break;
+        case SDL_SCANCODE_RIGHT: key = 0x4d00; break;
+        case SDL_SCANCODE_SPACE: key = 0x3920; break;
+        case SDL_SCANCODE_RETURN: key = 0x1c0d; break;
+    }
+
+    if (key)
+    {
+        keyboardBuffer.push_back(key);
+    }
+}
+
+void _sync()
+{
+    for (int y=0; y<mSdl.Height; y++)
+      for (int x=0; x<mSdl.Width; x++)
+        mSdl.SetPixel(x, y, mVideo.GetPixel(x, y));
+    
+    mSdl.Loop();
+}
+
+int main(int argc, char * argv[]) {
+    mSdl.Init();
+    start_sol2demo(argc, argv, &mVideo);
+    mSdl.Deinit();
+    return 0;
+}
diff --git a/CHAP_13/HostApp/HostApp/sdl.h b/CHAP_13/HostApp/HostApp/sdl.h
new file mode 100644
index 0000000..5cb08a1
--- /dev/null
+++ b/CHAP_13/HostApp/HostApp/sdl.h
@@ -0,0 +1,144 @@
+#ifndef SDL_h
+#define SDL_h
+
+typedef uint32_t Uint32;
+#include <SDL.h>
+#include <SDL_render.h>
+
+void onKey(int k, int p);
+
+class CSdl
+{
+    
+    std::vector< unsigned char > pixels;
+    const int pixelSize = 2;
+
+    SDL_Renderer* renderer{nullptr};
+    SDL_Texture* texture{nullptr};
+    SDL_Window* window{nullptr};
+    bool running{true};
+    int lastKey{0};
+
+public:
+    enum {
+        Width = 320,//640,
+        Height = 200//350
+    };
+
+    void Init()
+    {
+        pixels.resize(Width*Height*4);
+        SDL_Init( SDL_INIT_EVERYTHING );
+        atexit( SDL_Quit );
+        
+        window = SDL_CreateWindow
+        (
+         "BlackArt simulator",
+         SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
+         Width*pixelSize, Height*pixelSize,
+         SDL_WINDOW_SHOWN
+         );
+        
+        renderer = SDL_CreateRenderer
+        (
+         window,
+         -1,
+         SDL_RENDERER_ACCELERATED
+         );
+
+        texture = SDL_CreateTexture
+        (
+         renderer,
+         SDL_PIXELFORMAT_ARGB8888,
+         SDL_TEXTUREACCESS_STREAMING,
+         Width, Height
+         );
+    }
+    
+    void Blit()
+    {
+        SDL_SetRenderDrawColor( renderer, 0, 0, 0, SDL_ALPHA_OPAQUE );
+        SDL_RenderClear( renderer );
+        
+        SDL_UpdateTexture
+        (
+         texture,
+         NULL,
+         &pixels[0],
+         Width * 4
+         );
+        
+        SDL_RenderCopy( renderer, texture, NULL, NULL );
+        SDL_RenderPresent( renderer );
+    }
+    
+    void Loop()
+    {
+//        SDL_Event event;
+//
+//        while( SDL_PollEvent( &event ) )
+//        {
+//            if (SDL_KEYDOWN == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 1);
+//            }
+//
+//            if (SDL_KEYUP == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 0);
+//            }
+//
+//            if( ( SDL_QUIT == event.type ) ||
+//               ( SDL_KEYDOWN == event.type && SDL_SCANCODE_ESCAPE == event.key.keysym.scancode ) )
+//            {
+//                running = false;
+//                break;
+//            }
+//        }
+        
+        Blit();
+
+        //const Uint64 end = SDL_GetPerformanceCounter();
+        //const static Uint64 freq = SDL_GetPerformanceFrequency();
+        //const double seconds = ( end - start ) / static_cast< double >( freq );
+        //std::cout << "Frame time: " << seconds * 1000.0 << "ms" << std::endl;
+//        if (running)
+//            SDL_Delay(20);
+    }
+    
+    void Deinit()
+    {
+        SDL_DestroyRenderer( renderer );
+        SDL_DestroyWindow( window );
+        SDL_Quit();
+    }
+    
+    void SetPixel(int x, int y, uint32_t c)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        pixels[ offset + 0 ] = (uint8_t)c;
+        pixels[ offset + 1 ] = (uint8_t)(c >> 8);
+        pixels[ offset + 2 ] = (uint8_t)(c >> 16);
+        pixels[ offset + 3 ] = SDL_ALPHA_OPAQUE;
+    }
+
+    uint32_t GetPixel(int x, int y)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        int b = pixels[ offset + 0 ];
+        int g = pixels[ offset + 1 ];
+        int r = pixels[ offset + 2 ];
+        return r | (g << 8) | (b << 16);
+    }
+
+};
+
+#endif
diff --git a/CHAP_13/SOL2DEMO.C b/CHAP_13/SOL2DEMO.C
index 8bfd561..03fb3da 100755
--- a/CHAP_13/SOL2DEMO.C
+++ b/CHAP_13/SOL2DEMO.C
@@ -1,15 +1,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 #include <search.h>             // this one is needed for qsort()
@@ -18,10 +15,7 @@
 
 #include "black3.h"
 #include "black4.h"
-#include "black5.h"
-#include "black6.h"
 #include "black8.h"
-#include "black9.h"
 #include "black11.h"
 
 // G L O B A L S /////////////////////////////////////////////////////////////
@@ -30,7 +24,7 @@ object test_object;   // the test object
 
 // M A I N ////////////////////////////////////////////////////////////////////
 
-void main(int argc,char **argv)
+void start_sol2demo(int argc, char **argv, CEga *ega)
 {
 
 int index,   // looping variable
@@ -63,7 +57,7 @@ Build_Look_Up_Tables();
 
 // set graphics to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // allocate double buffer
 
@@ -76,7 +70,7 @@ Write_Palette(0,255,(RGB_palette_ptr)&color_palette_3d);
 
 // install the isr keyboard driver
 
-Keyboard_Install_Driver();
+//Keyboard_Install_Driver();
 
 // set viewing distance
 
@@ -84,6 +78,8 @@ viewing_distance = 250;
 
 // main event loop
 
+// Event handler
+SDL_Event e;
 while(!done)
      {
 
@@ -91,6 +87,17 @@ while(!done)
 
      starting_time = Timer_Query();
 
+     while( SDL_PollEvent( &e ) != 0 )
+      {
+          //User requests quit
+          if( e.type == SDL_QUIT )
+          {
+              done = 1;
+          }
+      }
+          
+      const Uint8* keystates = SDL_GetKeyboardState(NULL);
+
      // erase the screen
 
      Fill_Double_Buffer(0);
@@ -99,38 +106,38 @@ while(!done)
 
      // test if user is moving viewpoint in positive X
 
-     if (keyboard_state[MAKE_RIGHT])
+     if (keystates[SDL_SCANCODE_RIGHT])
         view_point.x+=5;
 
      // test if user is moving viewpoint in negative X
 
-     if (keyboard_state[MAKE_LEFT])
+     if (keystates[SDL_SCANCODE_LEFT])
         view_point.x-=5;
 
      // test if user is moving viewpoint in positive Y
 
-     if (keyboard_state[MAKE_UP])
+     if (keystates[SDL_SCANCODE_UP])
         view_point.y+=5;
 
      // test if user is moving viewpoint in negative Y
 
-     if (keyboard_state[MAKE_DOWN])
+     if (keystates[SDL_SCANCODE_DOWN])
         view_point.y-=5;
 
      // test if user is moving viewpoint in positive Z
 
-     if (keyboard_state[MAKE_PGUP])
+     if (keystates[SDL_SCANCODE_EQUALS])
         view_point.z+=5;
 
      // test if user is moving viewpoint in negative Z
 
-     if (keyboard_state[MAKE_PGDWN])
+     if (keystates[SDL_SCANCODE_MINUS])
         view_point.z-=5;
 
      // this section takes care of view angle rotation
 
 
-     if (keyboard_state[MAKE_Z])
+     if (keystates[SDL_SCANCODE_Z])
         {
 
         if ((view_angle.ang_x+=10)>360)
@@ -139,7 +146,7 @@ while(!done)
 
         } // end if
 
-     if (keyboard_state[MAKE_A])
+     if (keystates[SDL_SCANCODE_A])
         {
 
         if ((view_angle.ang_x-=10)<0)
@@ -147,7 +154,7 @@ while(!done)
 
         } // end if
 
-     if (keyboard_state[MAKE_X])
+     if (keystates[SDL_SCANCODE_X])
         {
 
         if ((view_angle.ang_y+=10)>360)
@@ -155,7 +162,7 @@ while(!done)
 
         } // end if
 
-     if (keyboard_state[MAKE_S])
+     if (keystates[SDL_SCANCODE_S])
         {
 
         if ((view_angle.ang_y-=5)<0)
@@ -163,7 +170,7 @@ while(!done)
 
         } // end if
 
-     if (keyboard_state[MAKE_C])
+     if (keystates[SDL_SCANCODE_C])
         {
 
         if ((view_angle.ang_z+=5)>360)
@@ -172,7 +179,7 @@ while(!done)
         } // end if
 
 
-     if (keyboard_state[MAKE_D])
+     if (keystates[SDL_SCANCODE_D])
         {
 
         if ((view_angle.ang_z-=5)<0)
@@ -182,7 +189,7 @@ while(!done)
 
      // test for exit key
 
-     if (keyboard_state[MAKE_ESC])
+     if (keystates[SDL_SCANCODE_ESCAPE])
         done=1;
 
      // rotate the object on all three axes
@@ -222,28 +229,26 @@ while(!done)
                                                       (int)view_angle.ang_y,
                                                       (int)view_angle.ang_z);
 
-     Print_String_DB(0,10,9,buffer,0);
+     Print_String_DB(0,ROM_CHAR_HEIGHT+2,9,buffer,0);
 
      // display double buffer
 
      Display_Double_Buffer(double_buffer,0);
+     
+     _sync();
 
      // lock onto 18 frames per second max
 
-     while((Timer_Query()-starting_time)<1);
+     while((Timer_Query()-starting_time)<CLOCKS_PER_SEC/18);
 
      } // end while
 
 // restore graphics mode back to text
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 // restore the old keyboard driver
 
-Keyboard_Remove_Driver();
+//Keyboard_Remove_Driver();
 
 } // end main
-
-
-
-
\ No newline at end of file
diff --git a/CHAP_14/HostApp/CHAP14.xcodeproj/project.pbxproj b/CHAP_14/HostApp/CHAP14.xcodeproj/project.pbxproj
new file mode 100644
index 0000000..c84b011
--- /dev/null
+++ b/CHAP_14/HostApp/CHAP14.xcodeproj/project.pbxproj
@@ -0,0 +1,352 @@
+// !$*UTF8*$!
+{
+	archiveVersion = 1;
+	classes = {
+	};
+	objectVersion = 50;
+	objects = {
+
+/* Begin PBXBuildFile section */
+		2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 2DA6C5AF258AA66B002B1931 /* main.cpp */; };
+		3E017B4428ECB33A00D286E9 /* BLACK8.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E017B4328ECB33A00D286E9 /* BLACK8.C */; };
+		3E2CDEB828F0BA0A00594EB2 /* BLACK11.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E2CDEB328F0B76F00594EB2 /* BLACK11.C */; };
+		3E3C579628E883D700637704 /* BLACK3.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E3C579528E883D300637704 /* BLACK3.C */; };
+		3E82C41D290DA81B00B230E8 /* OBJECTS.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E82C41C290DA81B00B230E8 /* OBJECTS.C */; };
+		3E82C420290DA9A000B230E8 /* CUBE.PLG in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3E82C41F290DA99A00B230E8 /* CUBE.PLG */; };
+		3E82C422290DAA1200B230E8 /* STANDARD.PAL in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3E82C421290DAA0F00B230E8 /* STANDARD.PAL */; };
+		3EF00A5928E9A177000AC74A /* BLACK4.C in Sources */ = {isa = PBXBuildFile; fileRef = 3EF00A4F28E99F84000AC74A /* BLACK4.C */; };
+/* End PBXBuildFile section */
+
+/* Begin PBXCopyFilesBuildPhase section */
+		2DA6C5AA258AA66B002B1931 /* CopyFiles */ = {
+			isa = PBXCopyFilesBuildPhase;
+			buildActionMask = 12;
+			dstPath = "";
+			dstSubfolderSpec = 16;
+			files = (
+				3E82C420290DA9A000B230E8 /* CUBE.PLG in CopyFiles */,
+				3E82C422290DAA1200B230E8 /* STANDARD.PAL in CopyFiles */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXCopyFilesBuildPhase section */
+
+/* Begin PBXFileReference section */
+		2D2793D725AD90B500DEC620 /* font.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = font.h; sourceTree = "<group>"; };
+		2D9EAF1F258E6A4300297C9C /* sdl.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = sdl.h; sourceTree = "<group>"; };
+		2D9EAF26258E750E00297C9C /* HostApp.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = HostApp.entitlements; sourceTree = "<group>"; };
+		2DA6C5AC258AA66B002B1931 /* CHAP14 */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = CHAP14; sourceTree = BUILT_PRODUCTS_DIR; };
+		2DA6C5AF258AA66B002B1931 /* main.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = main.cpp; sourceTree = "<group>"; };
+		2DB9F18C258EA679000A3299 /* ega.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = ega.h; sourceTree = "<group>"; };
+		3E017B4228ECB33A00D286E9 /* BLACK8.H */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.h; name = BLACK8.H; path = ../../../CHAP_8/BLACK8.H; sourceTree = "<group>"; };
+		3E017B4328ECB33A00D286E9 /* BLACK8.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK8.C; path = ../../../CHAP_8/BLACK8.C; sourceTree = "<group>"; };
+		3E2CDEB328F0B76F00594EB2 /* BLACK11.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK11.C; path = ../../../CHAP_11/BLACK11.C; sourceTree = "<group>"; };
+		3E2CDEB428F0B76F00594EB2 /* BLACK11.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK11.H; path = ../../../CHAP_11/BLACK11.H; sourceTree = "<group>"; };
+		3E3C579428E883D300637704 /* BLACK3.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK3.H; path = ../../../CHAP_3/BLACK3.H; sourceTree = "<group>"; };
+		3E3C579528E883D300637704 /* BLACK3.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK3.C; path = ../../../CHAP_3/BLACK3.C; sourceTree = "<group>"; };
+		3E82C41C290DA81B00B230E8 /* OBJECTS.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = OBJECTS.C; sourceTree = "<group>"; };
+		3E82C41E290DA84300B230E8 /* OBJECTS.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = OBJECTS.h; sourceTree = "<group>"; };
+		3E82C41F290DA99A00B230E8 /* CUBE.PLG */ = {isa = PBXFileReference; lastKnownFileType = text; name = CUBE.PLG; path = ../../../CHAP_13/CUBE.PLG; sourceTree = "<group>"; };
+		3E82C421290DAA0F00B230E8 /* STANDARD.PAL */ = {isa = PBXFileReference; lastKnownFileType = text; name = STANDARD.PAL; path = ../../../CHAP_13/STANDARD.PAL; sourceTree = "<group>"; };
+		3EF00A4E28E99F84000AC74A /* BLACK4.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK4.H; path = ../../../CHAP_4/BLACK4.H; sourceTree = "<group>"; };
+		3EF00A4F28E99F84000AC74A /* BLACK4.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK4.C; path = ../../../CHAP_4/BLACK4.C; sourceTree = "<group>"; };
+/* End PBXFileReference section */
+
+/* Begin PBXFrameworksBuildPhase section */
+		2DA6C5A9258AA66B002B1931 /* Frameworks */ = {
+			isa = PBXFrameworksBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXFrameworksBuildPhase section */
+
+/* Begin PBXGroup section */
+		2DA6C5A3258AA66B002B1931 = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AE258AA66B002B1931 /* HostApp */,
+				2DA6C5AD258AA66B002B1931 /* Products */,
+			);
+			sourceTree = "<group>";
+		};
+		2DA6C5AD258AA66B002B1931 /* Products */ = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AC258AA66B002B1931 /* CHAP14 */,
+			);
+			name = Products;
+			sourceTree = "<group>";
+		};
+		2DA6C5AE258AA66B002B1931 /* HostApp */ = {
+			isa = PBXGroup;
+			children = (
+				2D9EAF26258E750E00297C9C /* HostApp.entitlements */,
+				2DA6C5AF258AA66B002B1931 /* main.cpp */,
+				2D9EAF1F258E6A4300297C9C /* sdl.h */,
+				2DB9F18C258EA679000A3299 /* ega.h */,
+				2D2793D725AD90B500DEC620 /* font.h */,
+				3E3C579528E883D300637704 /* BLACK3.C */,
+				3E3C579428E883D300637704 /* BLACK3.H */,
+				3EF00A4F28E99F84000AC74A /* BLACK4.C */,
+				3EF00A4E28E99F84000AC74A /* BLACK4.H */,
+				3E017B4328ECB33A00D286E9 /* BLACK8.C */,
+				3E017B4228ECB33A00D286E9 /* BLACK8.H */,
+				3E2CDEB328F0B76F00594EB2 /* BLACK11.C */,
+				3E2CDEB428F0B76F00594EB2 /* BLACK11.H */,
+				3E82C41C290DA81B00B230E8 /* OBJECTS.C */,
+				3E82C41E290DA84300B230E8 /* OBJECTS.h */,
+				3E82C41F290DA99A00B230E8 /* CUBE.PLG */,
+				3E82C421290DAA0F00B230E8 /* STANDARD.PAL */,
+			);
+			path = HostApp;
+			sourceTree = "<group>";
+		};
+/* End PBXGroup section */
+
+/* Begin PBXNativeTarget section */
+		2DA6C5AB258AA66B002B1931 /* CHAP14 */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = 2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP14" */;
+			buildPhases = (
+				2DA6C5A8258AA66B002B1931 /* Sources */,
+				2DA6C5A9258AA66B002B1931 /* Frameworks */,
+				2DA6C5AA258AA66B002B1931 /* CopyFiles */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+			);
+			name = CHAP14;
+			productName = CicParserSim;
+			productReference = 2DA6C5AC258AA66B002B1931 /* CHAP14 */;
+			productType = "com.apple.product-type.tool";
+		};
+/* End PBXNativeTarget section */
+
+/* Begin PBXProject section */
+		2DA6C5A4258AA66B002B1931 /* Project object */ = {
+			isa = PBXProject;
+			attributes = {
+				LastUpgradeCheck = 1240;
+				TargetAttributes = {
+					2DA6C5AB258AA66B002B1931 = {
+						CreatedOnToolsVersion = 12.2;
+					};
+				};
+			};
+			buildConfigurationList = 2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP14" */;
+			compatibilityVersion = "Xcode 9.3";
+			developmentRegion = en;
+			hasScannedForEncodings = 0;
+			knownRegions = (
+				en,
+				Base,
+			);
+			mainGroup = 2DA6C5A3258AA66B002B1931;
+			productRefGroup = 2DA6C5AD258AA66B002B1931 /* Products */;
+			projectDirPath = "";
+			projectRoot = "";
+			targets = (
+				2DA6C5AB258AA66B002B1931 /* CHAP14 */,
+			);
+		};
+/* End PBXProject section */
+
+/* Begin PBXSourcesBuildPhase section */
+		2DA6C5A8258AA66B002B1931 /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				3E82C41D290DA81B00B230E8 /* OBJECTS.C in Sources */,
+				3E017B4428ECB33A00D286E9 /* BLACK8.C in Sources */,
+				3E2CDEB828F0BA0A00594EB2 /* BLACK11.C in Sources */,
+				2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */,
+				3EF00A5928E9A177000AC74A /* BLACK4.C in Sources */,
+				3E3C579628E883D700637704 /* BLACK3.C in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXSourcesBuildPhase section */
+
+/* Begin XCBuildConfiguration section */
+		2DA6C5B1258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = dwarf;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				ENABLE_TESTABILITY = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_OPTIMIZATION_LEVEL = 0;
+				GCC_PREPROCESSOR_DEFINITIONS = (
+					"DEBUG=1",
+					"$(inherited)",
+				);
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Debug;
+		};
+		2DA6C5B2258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				ENABLE_NS_ASSERTIONS = NO;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = NO;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Release;
+		};
+		2DA6C5B4258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = (
+					/usr/local/include/SDL2,
+					/opt/homebrew/Cellar/sdl2/2.0.14/include/SDL2,
+				);
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/usr/local/lib",
+					"-L/opt/homebrew/Cellar/sdl2/2.0.14/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Debug;
+		};
+		2DA6C5B5258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = (
+					/usr/local/include/SDL2,
+					/opt/homebrew/Cellar/sdl2/2.0.14/include/SDL2,
+				);
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/usr/local/lib",
+					"-L/opt/homebrew/Cellar/sdl2/2.0.14/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Release;
+		};
+/* End XCBuildConfiguration section */
+
+/* Begin XCConfigurationList section */
+		2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP14" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B1258AA66B002B1931 /* Debug */,
+				2DA6C5B2258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP14" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B4258AA66B002B1931 /* Debug */,
+				2DA6C5B5258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+/* End XCConfigurationList section */
+	};
+	rootObject = 2DA6C5A4258AA66B002B1931 /* Project object */;
+}
diff --git a/CHAP_14/HostApp/CHAP14.xcodeproj/project.xcworkspace/contents.xcworkspacedata b/CHAP_14/HostApp/CHAP14.xcodeproj/project.xcworkspace/contents.xcworkspacedata
new file mode 100644
index 0000000..6ea7abe
--- /dev/null
+++ b/CHAP_14/HostApp/CHAP14.xcodeproj/project.xcworkspace/contents.xcworkspacedata
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "self:/Users/ac27/Dev/black_art/black_art_3d_revival/CHAP_14/HostApp/CHAP14.xcodeproj">
+   </FileRef>
+</Workspace>
diff --git a/CHAP_14/HostApp/CHAP14.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist b/CHAP_14/HostApp/CHAP14.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
new file mode 100644
index 0000000..18d9810
--- /dev/null
+++ b/CHAP_14/HostApp/CHAP14.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IDEDidComputeMac32BitWarning</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_14/HostApp/CHAP14.xcodeproj/xcshareddata/xcschemes/CHAP13.xcscheme b/CHAP_14/HostApp/CHAP14.xcodeproj/xcshareddata/xcschemes/CHAP13.xcscheme
new file mode 100644
index 0000000..fd94a92
--- /dev/null
+++ b/CHAP_14/HostApp/CHAP14.xcodeproj/xcshareddata/xcschemes/CHAP13.xcscheme
@@ -0,0 +1,85 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "1400"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+               BuildableName = "CHAP14"
+               BlueprintName = "CHAP14"
+               ReferencedContainer = "container:CHAP14.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES">
+      <Testables>
+      </Testables>
+   </TestAction>
+   <LaunchAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      debugServiceExtension = "internal"
+      allowLocationSimulation = "YES"
+      viewDebuggingEnabled = "No">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+            BuildableName = "CHAP14"
+            BlueprintName = "CHAP14"
+            ReferencedContainer = "container:CHAP14.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+      <CommandLineArguments>
+         <CommandLineArgument
+            argument = "CUBE.PLG"
+            isEnabled = "YES">
+         </CommandLineArgument>
+      </CommandLineArguments>
+   </LaunchAction>
+   <ProfileAction
+      buildConfiguration = "Release"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      debugDocumentVersioning = "YES">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+            BuildableName = "CHAP14"
+            BlueprintName = "CHAP14"
+            ReferencedContainer = "container:CHAP14.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff --git a/CHAP_14/HostApp/HostApp/HostApp.entitlements b/CHAP_14/HostApp/HostApp/HostApp.entitlements
new file mode 100644
index 0000000..8cc185a
--- /dev/null
+++ b/CHAP_14/HostApp/HostApp/HostApp.entitlements
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>com.apple.security.cs.disable-library-validation</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_14/OBJECTS.C b/CHAP_14/HostApp/HostApp/OBJECTS.C
similarity index 76%
rename from CHAP_14/OBJECTS.C
rename to CHAP_14/HostApp/HostApp/OBJECTS.C
index 0158f68..293bb25 100755
--- a/CHAP_14/OBJECTS.C
+++ b/CHAP_14/HostApp/HostApp/OBJECTS.C
@@ -1,15 +1,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 #include <search.h>             // this one is needed for qsort()
@@ -18,10 +15,7 @@
 
 #include "black3.h"
 #include "black4.h"
-#include "black5.h"
-#include "black6.h"
 #include "black8.h"
-#include "black9.h"
 #include "black11.h"
 
 // G L O B A L S /////////////////////////////////////////////////////////////
@@ -30,7 +24,7 @@ object test_object[4];   // the test objects
 
 // M A I N ////////////////////////////////////////////////////////////////////
 
-void main(int argc,char **argv)
+void start_objects(int argc, char **argv, CEga *ega)
 {
 
 int index,   // looping variable
@@ -68,7 +62,7 @@ Build_Look_Up_Tables();
 
 // set graphics to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // allocate double buffer
 
@@ -81,14 +75,15 @@ Write_Palette(0,255,(RGB_palette_ptr)&color_palette_3d);
 
 // install the isr keyboard driver
 
-Keyboard_Install_Driver();
+//Keyboard_Install_Driver();
 
 // set viewing distance
 
 viewing_distance = 250;
 
 // main event loop
-
+// Event handler
+SDL_Event e;
 while(!done)
      {
 
@@ -96,6 +91,17 @@ while(!done)
 
      starting_time = Timer_Query();
 
+     while( SDL_PollEvent( &e ) != 0 )
+      {
+          //User requests quit
+          if( e.type == SDL_QUIT )
+          {
+              done = 1;
+          }
+      }
+          
+      const Uint8* keyboard_state = SDL_GetKeyboardState(NULL);
+
      // erase the screen
 
      Fill_Double_Buffer(0);
@@ -104,38 +110,38 @@ while(!done)
 
      // test if user is moving viewpoint in positive X
 
-     if (keyboard_state[MAKE_RIGHT])
+     if (keyboard_state[SDL_SCANCODE_RIGHT])
         view_point.x+=5;
 
      // test if user is moving viewpoint in negative X
 
-     if (keyboard_state[MAKE_LEFT])
+     if (keyboard_state[SDL_SCANCODE_LEFT])
         view_point.x-=5;
 
      // test if user is moving viewpoint in positive Y
 
-     if (keyboard_state[MAKE_UP])
+     if (keyboard_state[SDL_SCANCODE_UP])
         view_point.y+=5;
 
      // test if user is moving viewpoint in negative Y
 
-     if (keyboard_state[MAKE_DOWN])
+     if (keyboard_state[SDL_SCANCODE_DOWN])
         view_point.y-=5;
 
      // test if user is moving viewpoint in positive Z
 
-     if (keyboard_state[MAKE_PGUP])
+     if (keyboard_state[SDL_SCANCODE_EQUALS])
         view_point.z+=5;
 
      // test if user is moving viewpoint in negative Z
 
-     if (keyboard_state[MAKE_PGDWN])
+     if (keyboard_state[SDL_SCANCODE_MINUS])
         view_point.z-=5;
 
      // this section takes care of view angle rotation
 
 
-     if (keyboard_state[MAKE_Z])
+     if (keyboard_state[SDL_SCANCODE_Z])
         {
 
         if ((view_angle.ang_x+=10)>360)
@@ -144,7 +150,7 @@ while(!done)
 
         } // end if
 
-     if (keyboard_state[MAKE_A])
+     if (keyboard_state[SDL_SCANCODE_A])
         {
 
         if ((view_angle.ang_x-=10)<0)
@@ -152,7 +158,7 @@ while(!done)
 
         } // end if
 
-     if (keyboard_state[MAKE_X])
+     if (keyboard_state[SDL_SCANCODE_X])
         {
 
         if ((view_angle.ang_y+=10)>360)
@@ -160,7 +166,7 @@ while(!done)
 
         } // end if
 
-     if (keyboard_state[MAKE_S])
+     if (keyboard_state[SDL_SCANCODE_S])
         {
 
         if ((view_angle.ang_y-=5)<0)
@@ -168,7 +174,7 @@ while(!done)
 
         } // end if
 
-     if (keyboard_state[MAKE_C])
+     if (keyboard_state[SDL_SCANCODE_C])
         {
 
         if ((view_angle.ang_z+=5)>360)
@@ -177,7 +183,7 @@ while(!done)
         } // end if
 
 
-     if (keyboard_state[MAKE_D])
+     if (keyboard_state[SDL_SCANCODE_D])
         {
 
         if ((view_angle.ang_z-=5)<0)
@@ -187,7 +193,7 @@ while(!done)
 
      // test for exit key
 
-     if (keyboard_state[MAKE_ESC])
+     if (keyboard_state[SDL_SCANCODE_ESCAPE])
         done=1;
 
 
@@ -198,7 +204,7 @@ while(!done)
      // blank object removal message area
 
      sprintf(buffer,"Objects Removed                       ");
-     Print_String_DB(0,180,10,buffer,0);
+     Print_String_DB(0,SCREEN_HEIGHT-ROM_CHAR_HEIGHT-2,10,buffer,0);
 
      // process each object
 
@@ -247,28 +253,26 @@ while(!done)
      sprintf(buffer,"Viewangle is at (%d,%d,%d)     ",(int)view_angle.ang_x,
                                                       (int)view_angle.ang_y,
                                                       (int)view_angle.ang_z);
-     Print_String_DB(0,10,10,buffer,0);
+     Print_String_DB(0,ROM_CHAR_HEIGHT+2,10,buffer,0);
 
      // display double buffer
 
      Display_Double_Buffer(double_buffer,0);
 
+     _sync();
+
      // lock onto 18 frames per second max
 
-     while((Timer_Query()-starting_time)<1);
+     while((Timer_Query()-starting_time)<CLOCKS_PER_SEC/18);
 
      } // end while
 
 // restore graphics mode back to text
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 // restore the old keyboard driver
 
-Keyboard_Remove_Driver();
+//Keyboard_Remove_Driver();
 
 } // end main
-
-
-
-
\ No newline at end of file
diff --git a/CHAP_14/HostApp/HostApp/OBJECTS.h b/CHAP_14/HostApp/HostApp/OBJECTS.h
new file mode 100644
index 0000000..812f1a8
--- /dev/null
+++ b/CHAP_14/HostApp/HostApp/OBJECTS.h
@@ -0,0 +1,13 @@
+//
+//  OBJECTS.h
+//  CHAP14
+//
+//  Created by Tosha on 29/10/2022.
+//
+
+#ifndef OBJECTS_h
+#define OBJECTS_h
+
+void start_objects(int argc, char **argv, CEga *ega);
+
+#endif /* OBJECTS_h */
diff --git a/CHAP_14/HostApp/HostApp/ega.h b/CHAP_14/HostApp/HostApp/ega.h
new file mode 100644
index 0000000..b19dc71
--- /dev/null
+++ b/CHAP_14/HostApp/HostApp/ega.h
@@ -0,0 +1,63 @@
+#ifndef EGA_h
+#define EGA_h
+
+#include "font.h"
+
+typedef uint16_t WORD;
+typedef uint8_t BYTE;
+typedef uint8_t FLAG;
+typedef uint16_t WORD;
+
+typedef uint32_t DWORD;
+
+class CVideoAdapter
+{
+public:
+	virtual DWORD GetPixel(int x, int y, int p) = 0;
+};
+
+class CEga : public CVideoAdapter
+{
+	enum {
+		MemSize = 0x10000*2
+	};
+
+public:
+	DWORD memory[MemSize];
+
+    // https://www.ditig.com/256-colors-cheat-sheet
+    // Note: first 16 colors are from VGA palette, rest is from Xterm
+    DWORD palette[256] = {
+        0x000000, 0x0000b0, 0x00b000, 0x00b0b0, 0xb00000, 0xb000b0, 0xb0b000, 0xb0b0b0,
+        0x808080, 0x0000ff, 0x00ff00, 0x00ffff, 0xff0000, 0xff00ff, 0xffff00, 0xffffff, 0x000000, 0x00005f, 0x000087, 0x0000af, 0x0000d7, 0x0000ff, 0x005f00, 0x005f5f, 0x005f87, 0x005faf, 0x005fd7, 0x005fff, 0x008700, 0x00875f, 0x008787, 0x0087af, 0x0087d7, 0x0087ff, 0x00af00, 0x00af5f, 0x00af87, 0x00afaf, 0x00afd7, 0x00afff, 0x00d700, 0x00d75f, 0x00d787, 0x00d7af, 0x00d7d7, 0x00d7ff, 0x00ff00, 0x00ff5f, 0x00ff87, 0x00ffaf, 0x00ffd7, 0x00ffff, 0x5f0000, 0x5f005f, 0x5f0087, 0x5f00af, 0x5f00d7, 0x5f00ff, 0x5f5f00, 0x5f5f5f, 0x5f5f87, 0x5f5faf, 0x5f5fd7, 0x5f5fff, 0x5f8700, 0x5f875f, 0x5f8787, 0x5f87af, 0x5f87d7, 0x5f87ff, 0x5faf00, 0x5faf5f, 0x5faf87, 0x5fafaf, 0x5fafd7, 0x5fafff, 0x5fd700, 0x5fd75f, 0x5fd787, 0x5fd7af, 0x5fd7d7, 0x5fd7ff, 0x5fff00, 0x5fff5f, 0x5fff87, 0x5fffaf, 0x5fffd7, 0x5fffff, 0x870000, 0x87005f, 0x870087, 0x8700af, 0x8700d7, 0x8700ff, 0x875f00, 0x875f5f, 0x875f87, 0x875faf, 0x875fd7, 0x875fff, 0x878700, 0x87875f, 0x878787, 0x8787af, 0x8787d7, 0x8787ff, 0x87af00, 0x87af5f, 0x87af87, 0x87afaf, 0x87afd7, 0x87afff, 0x87d700, 0x87d75f, 0x87d787, 0x87d7af, 0x87d7d7, 0x87d7ff, 0x87ff00, 0x87ff5f, 0x87ff87, 0x87ffaf, 0x87ffd7, 0x87ffff, 0xaf0000, 0xaf005f, 0xaf0087, 0xaf00af, 0xaf00d7, 0xaf00ff, 0xaf5f00, 0xaf5f5f, 0xaf5f87, 0xaf5faf, 0xaf5fd7, 0xaf5fff, 0xaf8700, 0xaf875f, 0xaf8787, 0xaf87af, 0xaf87d7, 0xaf87ff, 0xafaf00, 0xafaf5f, 0xafaf87, 0xafafaf, 0xafafd7, 0xafafff, 0xafd700, 0xafd75f, 0xafd787, 0xafd7af, 0xafd7d7, 0xafd7ff, 0xafff00, 0xafff5f, 0xafff87, 0xafffaf, 0xafffd7, 0xafffff, 0xd70000, 0xd7005f, 0xd70087, 0xd700af, 0xd700d7, 0xd700ff, 0xd75f00, 0xd75f5f, 0xd75f87, 0xd75faf, 0xd75fd7, 0xd75fff, 0xd78700, 0xd7875f, 0xd78787, 0xd787af, 0xd787d7, 0xd787ff, 0xd7af00, 0xd7af5f, 0xd7af87, 0xd7afaf, 0xd7afd7, 0xd7afff, 0xd7d700, 0xd7d75f, 0xd7d787, 0xd7d7af, 0xd7d7d7, 0xd7d7ff, 0xd7ff00, 0xd7ff5f, 0xd7ff87, 0xd7ffaf, 0xd7ffd7, 0xd7ffff, 0xff0000, 0xff005f, 0xff0087, 0xff00af, 0xff00d7, 0xff00ff, 0xff5f00, 0xff5f5f, 0xff5f87, 0xff5faf, 0xff5fd7, 0xff5fff, 0xff8700, 0xff875f, 0xff8787, 0xff87af, 0xff87d7, 0xff87ff, 0xffaf00, 0xffaf5f, 0xffaf87, 0xffafaf, 0xffafd7, 0xffafff, 0xffd700, 0xffd75f, 0xffd787, 0xffd7af, 0xffd7d7, 0xffd7ff, 0xffff00, 0xffff5f, 0xffff87, 0xffffaf, 0xffffd7, 0xffffff, 0x080808, 0x121212, 0x1c1c1c, 0x262626, 0x303030, 0x3a3a3a, 0x444444, 0x4e4e4e, 0x585858, 0x626262, 0x6c6c6c, 0x767676, 0x808080, 0x8a8a8a, 0x949494, 0x9e9e9e, 0xa8a8a8, 0xb2b2b2, 0xbcbcbc, 0xc6c6c6, 0xd0d0d0, 0xdadada, 0xe4e4e4, 0xeeeeee
+    };
+
+public:
+	CEga()
+	{
+        memset(memory, 0, sizeof(memory));
+	}
+	
+    void SetPaletteIndex(int index, int rgb)
+    {
+        int r = ((rgb & 4) ? 2 : 0) + ((rgb & 32) ? 1 : 0);
+        int g = ((rgb & 2) ? 2 : 0) + ((rgb & 16) ? 1 : 0);
+        int b = ((rgb & 1) ? 2 : 0) + ((rgb & 8) ? 1 : 0);
+        r = r * 255 / 3;
+        g = g * 255 / 3;
+        b = b * 255 / 3;
+        palette[index] = b | (g << 8) | (r << 16);
+
+    }
+    
+	virtual DWORD GetPixel(int x, int y, int page = -1) override
+	{
+        BYTE* _video = (BYTE*)memory;
+        int idx = (int)_video[((y<<8) + (y<<6)) + x];
+        return palette[idx];
+	}
+};
+
+void _sync();
+
+#endif
diff --git a/CHAP_14/HostApp/HostApp/font.h b/CHAP_14/HostApp/HostApp/font.h
new file mode 100644
index 0000000..8be86b2
--- /dev/null
+++ b/CHAP_14/HostApp/HostApp/font.h
@@ -0,0 +1,313 @@
+#ifndef FONT_h
+#define FONT_h
+
+#pragma once
+
+// http://www.hampa.ch/pce/download.html
+// genoa-ega-2.41.rom
+// dd if=genoa-ega-2.41.rom of=font bs=1 skip=8224 count=3584
+// xxd -i font > font.h
+
+static const uint8_t font[] = {
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81,
+  0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xff,
+  0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
+  0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
+  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff,
+  0xff, 0xff, 0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc,
+  0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30,
+  0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x63,
+  0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06,
+  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66,
+  0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xdb,
+  0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c,
+  0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c,
+  0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c,
+  0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06,
+  0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6,
+  0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c,
+  0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x30,
+  0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c,
+  0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38, 0x78, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c,
+  0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66,
+  0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0,
+  0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x6c,
+  0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66,
+  0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x0c,
+  0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66,
+  0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
+  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60,
+  0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x30, 0x30, 0x30,
+  0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0,
+  0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
+  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xff, 0x00, 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76,
+  0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66,
+  0x3c, 0x00, 0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66,
+  0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec,
+  0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60,
+  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c,
+  0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30,
+  0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38,
+  0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38,
+  0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66,
+  0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00, 0x00,
+  0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc,
+  0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x38,
+  0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
+  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe,
+  0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x38,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x66,
+  0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x60,
+  0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c,
+  0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x76,
+  0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x6c,
+  0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00, 0x10,
+  0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00, 0x00, 0xc6,
+  0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60,
+  0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xcc, 0xcc,
+  0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x0e,
+  0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
+  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
+  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
+  0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
+  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06,
+  0x06, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c,
+  0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c,
+  0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x44, 0x11, 0x44,
+  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x55, 0xaa,
+  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
+  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
+  0xdd, 0x77, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
+  0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff,
+  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
+  0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
+  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
+  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30,
+  0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c,
+  0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c,
+  0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00,
+  0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e,
+  0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18,
+  0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00,
+  0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c,
+  0x1c, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8,
+  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+};
+
+#endif
diff --git a/CHAP_14/HostApp/HostApp/main.cpp b/CHAP_14/HostApp/HostApp/main.cpp
new file mode 100644
index 0000000..32aa70f
--- /dev/null
+++ b/CHAP_14/HostApp/HostApp/main.cpp
@@ -0,0 +1,58 @@
+//
+//  main.cpp
+//  HostApp
+//
+//
+
+#include <iostream>
+#include <vector>
+#include <sstream>
+#include <iomanip>
+#include <list>
+
+#include "sdl.h"
+#include "ega.h"
+
+#include "OBJECTS.h"
+
+CEga mVideo;
+CSdl mSdl;
+std::list<int> keyboardBuffer;
+
+void onKey(int k, int p)
+{
+    if (!p)
+        return;
+
+    int key = 0;
+    switch (k)
+    {
+        case SDL_SCANCODE_UP: key = 0x4800; break;
+        case SDL_SCANCODE_DOWN: key = 0x5000; break;
+        case SDL_SCANCODE_LEFT: key = 0x4b00; break;
+        case SDL_SCANCODE_RIGHT: key = 0x4d00; break;
+        case SDL_SCANCODE_SPACE: key = 0x3920; break;
+        case SDL_SCANCODE_RETURN: key = 0x1c0d; break;
+    }
+
+    if (key)
+    {
+        keyboardBuffer.push_back(key);
+    }
+}
+
+void _sync()
+{
+    for (int y=0; y<mSdl.Height; y++)
+      for (int x=0; x<mSdl.Width; x++)
+        mSdl.SetPixel(x, y, mVideo.GetPixel(x, y));
+    
+    mSdl.Loop();
+}
+
+int main(int argc, char * argv[]) {
+    mSdl.Init();
+    start_objects(argc, argv, &mVideo);
+    mSdl.Deinit();
+    return 0;
+}
diff --git a/CHAP_14/HostApp/HostApp/sdl.h b/CHAP_14/HostApp/HostApp/sdl.h
new file mode 100644
index 0000000..5cb08a1
--- /dev/null
+++ b/CHAP_14/HostApp/HostApp/sdl.h
@@ -0,0 +1,144 @@
+#ifndef SDL_h
+#define SDL_h
+
+typedef uint32_t Uint32;
+#include <SDL.h>
+#include <SDL_render.h>
+
+void onKey(int k, int p);
+
+class CSdl
+{
+    
+    std::vector< unsigned char > pixels;
+    const int pixelSize = 2;
+
+    SDL_Renderer* renderer{nullptr};
+    SDL_Texture* texture{nullptr};
+    SDL_Window* window{nullptr};
+    bool running{true};
+    int lastKey{0};
+
+public:
+    enum {
+        Width = 320,//640,
+        Height = 200//350
+    };
+
+    void Init()
+    {
+        pixels.resize(Width*Height*4);
+        SDL_Init( SDL_INIT_EVERYTHING );
+        atexit( SDL_Quit );
+        
+        window = SDL_CreateWindow
+        (
+         "BlackArt simulator",
+         SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
+         Width*pixelSize, Height*pixelSize,
+         SDL_WINDOW_SHOWN
+         );
+        
+        renderer = SDL_CreateRenderer
+        (
+         window,
+         -1,
+         SDL_RENDERER_ACCELERATED
+         );
+
+        texture = SDL_CreateTexture
+        (
+         renderer,
+         SDL_PIXELFORMAT_ARGB8888,
+         SDL_TEXTUREACCESS_STREAMING,
+         Width, Height
+         );
+    }
+    
+    void Blit()
+    {
+        SDL_SetRenderDrawColor( renderer, 0, 0, 0, SDL_ALPHA_OPAQUE );
+        SDL_RenderClear( renderer );
+        
+        SDL_UpdateTexture
+        (
+         texture,
+         NULL,
+         &pixels[0],
+         Width * 4
+         );
+        
+        SDL_RenderCopy( renderer, texture, NULL, NULL );
+        SDL_RenderPresent( renderer );
+    }
+    
+    void Loop()
+    {
+//        SDL_Event event;
+//
+//        while( SDL_PollEvent( &event ) )
+//        {
+//            if (SDL_KEYDOWN == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 1);
+//            }
+//
+//            if (SDL_KEYUP == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 0);
+//            }
+//
+//            if( ( SDL_QUIT == event.type ) ||
+//               ( SDL_KEYDOWN == event.type && SDL_SCANCODE_ESCAPE == event.key.keysym.scancode ) )
+//            {
+//                running = false;
+//                break;
+//            }
+//        }
+        
+        Blit();
+
+        //const Uint64 end = SDL_GetPerformanceCounter();
+        //const static Uint64 freq = SDL_GetPerformanceFrequency();
+        //const double seconds = ( end - start ) / static_cast< double >( freq );
+        //std::cout << "Frame time: " << seconds * 1000.0 << "ms" << std::endl;
+//        if (running)
+//            SDL_Delay(20);
+    }
+    
+    void Deinit()
+    {
+        SDL_DestroyRenderer( renderer );
+        SDL_DestroyWindow( window );
+        SDL_Quit();
+    }
+    
+    void SetPixel(int x, int y, uint32_t c)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        pixels[ offset + 0 ] = (uint8_t)c;
+        pixels[ offset + 1 ] = (uint8_t)(c >> 8);
+        pixels[ offset + 2 ] = (uint8_t)(c >> 16);
+        pixels[ offset + 3 ] = SDL_ALPHA_OPAQUE;
+    }
+
+    uint32_t GetPixel(int x, int y)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        int b = pixels[ offset + 0 ];
+        int g = pixels[ offset + 1 ];
+        int r = pixels[ offset + 2 ];
+        return r | (g << 8) | (b << 16);
+    }
+
+};
+
+#endif
diff --git a/CHAP_15/BLACK15.C b/CHAP_15/BLACK15.C
index a7b716d..fe03375 100755
--- a/CHAP_15/BLACK15.C
+++ b/CHAP_15/BLACK15.C
@@ -1,35 +1,30 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 #include <search.h>             // this one is needed for qsort()
+#include <time.h>
 
 // include all of our stuff
 
 #include "black3.h"
 #include "black4.h"
-#include "black5.h"
-#include "black6.h"
 #include "black8.h"
-#include "black9.h"
 #include "black11.h"
 #include "black15.h"
 
 // G L O B A L S //////////////////////////////////////////////////////////////
 
-int far *z_buffer,   // the current z buffer memory
-    far *z_bank_1,   // memory bank 1 of z buffer
-    far *z_bank_2;   // memory bank 2 of z buffer
+int *z_buffer,   // the current z buffer memory
+    *z_bank_1,   // memory bank 1 of z buffer
+    *z_bank_2;   // memory bank 2 of z buffer
 
 unsigned int z_height    = 200,    // the height if the z buffer
              z_height_2  = 100,    // the height if half the z buffer
@@ -72,10 +67,10 @@ int temp_x,        // used during sorting as temps
 // change these two back to float and remove all *32 and >>5
 // if you don't want to use fixed point during horizontal z interpolation
 
-int z_middle,  // the z value of the middle between the left and right
-    bx;        // the change of z with respect to x
+float z_middle,  // the z value of the middle between the left and right
+      bx;        // the change of z with respect to x
 
-unsigned char far *dest_addr; // current image destination
+unsigned char *dest_addr; // current image destination
 
 // test order of x1 and x2, note y1=y2.
 
@@ -241,11 +236,9 @@ if (x1>=poly_clip_min_x && x1<=poly_clip_max_x &&
 
         // compute horizontal z interpolant
 
-        z_middle = 32*z_left;
-        // z_middle = z_left;
+        z_middle = z_left;
 
-        bx = 32*(z_right - z_left)/(1+xe-xs);
-        // bx = (z_right - z_left)/(1+xe-xs);
+        bx = (z_right - z_left)/(1+xe-xs);
 
         // draw the line
 
@@ -254,13 +247,11 @@ if (x1>=poly_clip_min_x && x1<=poly_clip_max_x &&
             // if current z_middle is less than z-buffer then replace
             // and update image buffer
 
-            if (z_middle>>5 < z_buffer[x_index])
-            // if (z_middle < z_buffer[x_index])
+            if (z_middle < z_buffer[x_index])
                {
                // update z buffer
 
-               z_buffer[x_index]=(int)z_middle>>5;
-               // z_buffer[x_index]=(int)z_middle;
+               z_buffer[x_index]=(int)z_middle;
 
                // write to image buffer
 
@@ -325,11 +316,9 @@ else
 
        // compute horizontal z interpolant
 
-       z_middle = 32*z_left;
-       // z_middle = z_left;
+       z_middle = z_left;
 
-       bx = 32*(z_right - z_left)/(1+xe-xs);
-       // bx = 32*(z_right - z_left)/(1+xe-xs);
+       bx = (z_right - z_left)/(1+xe-xs);
 
        // adjust starting point and ending point
 
@@ -351,8 +340,7 @@ else
 
           // re-compute z_middle to take into consideration horizontal shift
 
-          z_middle += 32*bx*dx;
-          // z_middle += bx*dx;
+          z_middle += bx*dx;
 
           } // end if line is clipped on left
 
@@ -369,13 +357,11 @@ else
            // if current z_middle is less than z-buffer then replace
            // and update image buffer
 
-           if (z_middle>>5 < z_buffer[x_index])
-           // if (z_middle < z_buffer[x_index])
+           if (z_middle < z_buffer[x_index])
               {
               // update z buffer
 
-              z_buffer[x_index]=(int)z_middle>>5;
-           // z_buffer[x_index]=(int)z_middle;
+              z_buffer[x_index]=(int)z_middle;
 
               // write to image buffer
 
@@ -634,12 +620,12 @@ int Create_Z_Buffer(unsigned int height)
 z_height   = height;
 z_height_2 = height/2;
 
-z_bank_size = (height/2)*(unsigned int)640;
+z_bank_size = (height/2)*(unsigned int)320*sizeof(int);
 
 // allocate the memory
 
-z_bank_1 = (int far *)_fmalloc(z_bank_size);
-z_bank_2 = (int far *)_fmalloc(z_bank_size);
+z_bank_1 = (int *)malloc(z_bank_size);
+z_bank_2 = (int *)malloc(z_bank_size);
 
 // return success or failure
 
@@ -657,8 +643,8 @@ void Delete_Z_Buffer(void)
 
 // this function free's up the memory used by the z buffer memory banks
 
-_ffree(z_bank_1);
-_ffree(z_bank_2);
+free(z_bank_1);
+free(z_bank_2);
 
 
 } // end Delete_Z_Buffer
@@ -670,26 +656,31 @@ void Fill_Z_Buffer(int value)
 
 // this function fills the entire z buffer (both banks) with the sent value
 
-_asm
-   {
-
-   ; bank 1
-
-   les di,z_bank_1       ; point es:di to z buffer bank 1
-   mov ax,value          ; move the value into ax
-   mov cx,z_bank_size    ; number of bytes to fill
-   shr cx,1              ; convert to number of words
-   rep stosw             ; move the value into z buffer
-
-   ; bank 2
-
-   les di,z_bank_2       ; point es:di to z buffer bank 1
-   mov ax,value          ; move the value into ax (redundant)
-   mov cx,z_bank_size    ; number of bytes to fill  (so is this)
-   shr cx,1              ; convert to number of words
-   rep stosw             ; move the value into z buffer
-
-   } // end asm
+for (int i = 0; i < z_bank_size/sizeof(int); i++) {
+    z_bank_1[i] = value;
+    z_bank_2[i] = value;
+}
+
+//_asm
+//   {
+//
+//   ; bank 1
+//
+//   les di,z_bank_1       ; point es:di to z buffer bank 1
+//   mov ax,value          ; move the value into ax
+//   mov cx,z_bank_size    ; number of bytes to fill
+//   shr cx,1              ; convert to number of words
+//   rep stosw             ; move the value into z buffer
+//
+//   ; bank 2
+//
+//   les di,z_bank_2       ; point es:di to z buffer bank 1
+//   mov ax,value          ; move the value into ax (redundant)
+//   mov cx,z_bank_size    ; number of bytes to fill  (so is this)
+//   shr cx,1              ; convert to number of words
+//   rep stosw             ; move the value into z buffer
+//
+//   } // end asm
 
 } // end Fill_Z_Buffer
 
@@ -1675,7 +1666,8 @@ while(next_wall)
 
 // delay a bit so user can see BSP being created
 
-Time_Delay(5);
+Time_Delay(5*CLOCKS_PER_SEC/18);
+_sync();
 
 // recursively process front and back walls
 
@@ -1696,7 +1688,7 @@ int done=0;
 
 // install the isr keyboard driver
 
-Keyboard_Install_Driver();
+//Keyboard_Install_Driver();
 
 // change the light source direction
 
@@ -1711,62 +1703,74 @@ view_point.y = 0;
 view_point.z = 0;
 
 // main event loop
-
+SDL_Event e;
 while(!done)
      {
+
      // compute starting time of this frame
 
      starting_time = Timer_Query();
 
+     while( SDL_PollEvent( &e ) != 0 )
+      {
+          //User requests quit
+          if( e.type == SDL_QUIT )
+          {
+              done = 1;
+          }
+      }
+          
+      const Uint8* keyboard_state = SDL_GetKeyboardState(NULL);
+
      // erase all objects
 
      Fill_Double_Buffer(0);
 
      // move viewpoint
 
-     if (keyboard_state[MAKE_UP])
+     if (keyboard_state[SDL_SCANCODE_UP])
         view_point.y+=20;
 
-     if (keyboard_state[MAKE_DOWN])
+     if (keyboard_state[SDL_SCANCODE_DOWN])
         view_point.y-=20;
 
-     if (keyboard_state[MAKE_RIGHT])
+     if (keyboard_state[SDL_SCANCODE_RIGHT])
         view_point.x+=20;
 
-     if (keyboard_state[MAKE_LEFT])
+     if (keyboard_state[SDL_SCANCODE_LEFT])
         view_point.x-=20;
 
-     if (keyboard_state[MAKE_KEYPAD_PLUS])
+     if (keyboard_state[SDL_SCANCODE_EQUALS])
         view_point.z+=20;
 
-     if (keyboard_state[MAKE_KEYPAD_MINUS])
+     if (keyboard_state[SDL_SCANCODE_MINUS])
         view_point.z-=20;
 
-     if (keyboard_state[MAKE_Z])
+     if (keyboard_state[SDL_SCANCODE_Z])
         if ((view_angle.ang_x+=10)>360)
            view_angle.ang_x = 0;
 
-     if (keyboard_state[MAKE_A])
+     if (keyboard_state[SDL_SCANCODE_A])
         if ((view_angle.ang_x-=10)<0)
            view_angle.ang_x = 360;
 
-     if (keyboard_state[MAKE_X])
+     if (keyboard_state[SDL_SCANCODE_X])
         if ((view_angle.ang_y+=10)>360)
            view_angle.ang_y = 0;
 
-     if (keyboard_state[MAKE_S])
+     if (keyboard_state[SDL_SCANCODE_S])
         if ((view_angle.ang_y-=10)<0)
            view_angle.ang_y = 360;
 
-     if (keyboard_state[MAKE_C])
+     if (keyboard_state[SDL_SCANCODE_C])
         if ((view_angle.ang_z+=10)>360)
            view_angle.ang_z = 0;
 
-     if (keyboard_state[MAKE_D])
+     if (keyboard_state[SDL_SCANCODE_D])
         if ((view_angle.ang_z-=10)<0)
            view_angle.ang_z = 360;
 
-     if (keyboard_state[MAKE_ESC])
+     if (keyboard_state[SDL_SCANCODE_ESCAPE])
         done=1;
 
      // now that user has possible moved viewpoint, create the global
@@ -1796,15 +1800,13 @@ while(!done)
 
      // lock onto 18 frames per second max
 
-     while((Timer_Query()-starting_time)<1);
+     while((Timer_Query()-starting_time)<CLOCKS_PER_SEC/18);
+     _sync();
 
      } // end while
 
 // restore the old keyboard driver
 
-Keyboard_Remove_Driver();
+//Keyboard_Remove_Driver();
 
 } // end Bsp_View
-
-
-
\ No newline at end of file
diff --git a/CHAP_15/BLACK15.H b/CHAP_15/BLACK15.H
index 60d87b8..56a6a70 100755
--- a/CHAP_15/BLACK15.H
+++ b/CHAP_15/BLACK15.H
@@ -97,14 +97,12 @@ void Intersect_Lines(float x0,float y0,float x1,float y1,
 
 // E X T E R N A L S///////////////////////////////////////////////////////////
 
-extern int far *z_buffer;   // the current z buffer memory
-extern int far *z_bank_1;   // memory bank 1 of z buffer
-extern int far *z_bank_2;   // memory bank 2 of z buffer
+extern int *z_buffer;   // the current z buffer memory
+extern int *z_bank_1;   // memory bank 1 of z buffer
+extern int *z_bank_2;   // memory bank 2 of z buffer
 
 extern unsigned int z_height; // the height if the z buffer
 extern unsigned int z_height_2;      // the height if half the z buffer
 extern unsigned int z_bank_size;     // size of a z buffer bank in bytes
 
 extern FILE *fp_out;  // general output file
-
-
\ No newline at end of file
diff --git a/CHAP_15/BSPDEMO.C b/CHAP_15/BSPDEMO.C
index 4b851ea..45da863 100755
--- a/CHAP_15/BSPDEMO.C
+++ b/CHAP_15/BSPDEMO.C
@@ -1,15 +1,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 #include <search.h>             // this one is needed for qsort()
@@ -18,15 +15,15 @@
 
 #include "black3.h"
 #include "black4.h"
-#include "black5.h"
-#include "black6.h"
 #include "black8.h"
-#include "black9.h"
 #include "black11.h"
 #include "black15.h"
 
 // D E F I N E S /////////////////////////////////////////////////////////////
 
+#define MAX(x, y) (((x) > (y)) ? (x) : (y))
+#define MIN(x, y) (((x) < (y)) ? (x) : (y))
+
 #define MAX_LINES        64   // this is the maximum number of lines in the demo
                               // these lines will later become 3-D walls
 
@@ -147,6 +144,16 @@ wall_ptr wall_list=NULL,  // pointer to the linked list of walls
 
 // F U N C T I O N S ////////////////////////////////////////////////////////
 
+void getch() {
+    //_sync();
+    SDL_Event event;
+    while(1) {    // wait for input to break
+        SDL_PollEvent(&event);
+        if(event.type == SDL_KEYDOWN)
+            return;
+    }
+}
+
 void Convert_Lines_To_Walls(void)
 {
 // this function converts the list of 2-D lines into a linked list of 3-D
@@ -323,10 +330,10 @@ for (curr_line=0; curr_line < total_lines; curr_line++)
 
     // compute the bounding box of line
 
-    min_x = __min(sx,ex);
-    min_y = __min(sy,ey);
-    max_x = __max(sx,ex);
-    max_y = __max(sy,ey);
+    min_x = MIN(sx,ex);
+    min_y = MIN(sy,ey);
+    max_x = MAX(sx,ex);
+    max_y = MAX(sy,ey);
 
     // if the selection position is within bounding box then compute distance
     // errors and save this line as a possibility
@@ -415,14 +422,21 @@ else
 void Wait_For_Mouse_Up(void)
 {
 // this function waits for the mouse buttons to be released
+    
+SDL_Event event;
+while(1) {    // wait for input to break
+    SDL_PollEvent(&event);
+    if(event.type == SDL_MOUSEBUTTONUP)
+        return;
+}
 
-int mx,my,      // mouse position dummy variables
-    buttons=1;  // mouse buttons
+//int mx,my,      // mouse position dummy variables
+//    buttons=1;  // mouse buttons
 
 // loop until mouse is released
 
-while(buttons)
-     Mouse_Control(MOUSE_POSITION_BUTTONS,&mx,&my,&buttons);
+//while(buttons)
+//     Mouse_Control(MOUSE_POSITION_BUTTONS,&mx,&my,&buttons);
 
 } // end Wait_For_Mouse_Release
 
@@ -480,7 +494,7 @@ return(-1);
 
 // M A I N //////////////////////////////////////////////////////////////////
 
-void main(void)
+void start_bspdemo(CEga *ega, int pixelSize)
 {
 int index,            // loop variable
     mouse_x,          // mouse position
@@ -500,7 +514,7 @@ Build_Look_Up_Tables();
 
 // set the graphics mode to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // create the double buffer
 
@@ -559,27 +573,53 @@ PCX_Copy_To_Buffer((pcx_picture_ptr)&interface_pcx,double_buffer);
 
 // reset the mouse and hide the pointer
 
-Mouse_Control(MOUSE_RESET,NULL,NULL,&buttons);
-Mouse_Control(MOUSE_HIDE,NULL,NULL,NULL);
+//Mouse_Control(MOUSE_RESET,NULL,NULL,&buttons);
+//Mouse_Control(MOUSE_HIDE,NULL,NULL,NULL);
+mouse_x = 0;
+mouse_y = 0;
 
 // scan under the pointer
 
 Sprite_Under_Clip((sprite_ptr)&pointer_spr,double_buffer);
 
 // main event loop, process until keyboard hit
-
+SDL_Event e;
 while(!exit)
      {
+     buttons = 0;
+     while( SDL_PollEvent( &e ) != 0 )
+       {
+           if (e.type == SDL_MOUSEMOTION)
+           {
+               mouse_x = e.motion.x / pixelSize;
+               mouse_y = e.motion.y / pixelSize;
+           }
+           else if (e.type == SDL_MOUSEBUTTONDOWN) {
+               if (e.button.button == SDL_BUTTON_LEFT) {
+                   buttons = 1;
+               } else if (e.button.button == SDL_BUTTON_RIGHT) {
+                   buttons = 2;
+               }
+               break;
+           }
+           else if (e.type == SDL_QUIT)
+           {
+               //User requests quit
+               exit = 1;
+           }
+       }
+         
      // erase the pointer
 
      Sprite_Erase_Clip((sprite_ptr)&pointer_spr,double_buffer);
 
-     Mouse_Control(MOUSE_POSITION_BUTTONS,&mouse_x,&mouse_y,&buttons);
+//     Mouse_Control(MOUSE_POSITION_BUTTONS,&mouse_x,&mouse_y,&buttons);
+     SDL_ShowCursor(SDL_DISABLE);
 
      // map the mouse position to the screen and assign it to pointer
 
-     mouse_x = pointer_spr.x = (mouse_x >> 1)-16;
-     mouse_y = pointer_spr.y = mouse_y;
+     pointer_spr.x = mouse_x;
+     pointer_spr.y = mouse_y;
 
      // test if pointer icon needs to be changed
 
@@ -604,7 +644,7 @@ while(!exit)
 
      // test if player is trying to do something
 
-     if (buttons==MOUSE_LEFT_BUTTON)
+     if (buttons==1)//MOUSE_LEFT_BUTTON)
         {
 
         // figure out which area this is happening in
@@ -837,7 +877,7 @@ while(!exit)
 
         } // end if button pressed
 
-    if (buttons==MOUSE_RIGHT_BUTTON)
+    if (buttons==2)//MOUSE_RIGHT_BUTTON)
        {
        // reset system to starting line
 
@@ -864,6 +904,8 @@ while(!exit)
 
      Display_Double_Buffer(double_buffer,0);
 
+     _sync();
+
      } // end while
 
 // free up all resources
@@ -872,8 +914,6 @@ Delete_Double_Buffer();
 
 // restore graphics to text mode
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 } // end main
-
-
\ No newline at end of file
diff --git a/CHAP_15/HostApp/CHAP15.xcodeproj/project.pbxproj b/CHAP_15/HostApp/CHAP15.xcodeproj/project.pbxproj
new file mode 100644
index 0000000..f53dc26
--- /dev/null
+++ b/CHAP_15/HostApp/CHAP15.xcodeproj/project.pbxproj
@@ -0,0 +1,362 @@
+// !$*UTF8*$!
+{
+	archiveVersion = 1;
+	classes = {
+	};
+	objectVersion = 50;
+	objects = {
+
+/* Begin PBXBuildFile section */
+		2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 2DA6C5AF258AA66B002B1931 /* main.cpp */; };
+		3E017B4428ECB33A00D286E9 /* BLACK8.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E017B4328ECB33A00D286E9 /* BLACK8.C */; };
+		3E2CDEB828F0BA0A00594EB2 /* BLACK11.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E2CDEB328F0B76F00594EB2 /* BLACK11.C */; };
+		3E34724C2917E26D0017D0BF /* BSPDEMO.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E34724B2917E26D0017D0BF /* BSPDEMO.C */; };
+		3E3472512917E3A40017D0BF /* BSPBUTT.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3E34724E2917E3960017D0BF /* BSPBUTT.PCX */; };
+		3E3472522917E3A60017D0BF /* BSPINT.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3E34724F2917E3960017D0BF /* BSPINT.PCX */; };
+		3E3472532917E3A80017D0BF /* BSPPOINT.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3E3472502917E3960017D0BF /* BSPPOINT.PCX */; };
+		3E3C579628E883D700637704 /* BLACK3.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E3C579528E883D300637704 /* BLACK3.C */; };
+		3EF00A5928E9A177000AC74A /* BLACK4.C in Sources */ = {isa = PBXBuildFile; fileRef = 3EF00A4F28E99F84000AC74A /* BLACK4.C */; };
+		EE5BE75E2914126C0099C55B /* BLACK15.C in Sources */ = {isa = PBXBuildFile; fileRef = EE5BE75C2914126C0099C55B /* BLACK15.C */; };
+/* End PBXBuildFile section */
+
+/* Begin PBXCopyFilesBuildPhase section */
+		2DA6C5AA258AA66B002B1931 /* CopyFiles */ = {
+			isa = PBXCopyFilesBuildPhase;
+			buildActionMask = 12;
+			dstPath = "";
+			dstSubfolderSpec = 16;
+			files = (
+				3E3472512917E3A40017D0BF /* BSPBUTT.PCX in CopyFiles */,
+				3E3472522917E3A60017D0BF /* BSPINT.PCX in CopyFiles */,
+				3E3472532917E3A80017D0BF /* BSPPOINT.PCX in CopyFiles */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXCopyFilesBuildPhase section */
+
+/* Begin PBXFileReference section */
+		2D2793D725AD90B500DEC620 /* font.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = font.h; sourceTree = "<group>"; };
+		2D9EAF1F258E6A4300297C9C /* sdl.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = sdl.h; sourceTree = "<group>"; };
+		2D9EAF26258E750E00297C9C /* HostApp.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = HostApp.entitlements; sourceTree = "<group>"; };
+		2DA6C5AC258AA66B002B1931 /* CHAP15 */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = CHAP15; sourceTree = BUILT_PRODUCTS_DIR; };
+		2DA6C5AF258AA66B002B1931 /* main.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = main.cpp; sourceTree = "<group>"; };
+		2DB9F18C258EA679000A3299 /* ega.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = ega.h; sourceTree = "<group>"; };
+		3E017B4228ECB33A00D286E9 /* BLACK8.H */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.h; name = BLACK8.H; path = ../../../CHAP_8/BLACK8.H; sourceTree = "<group>"; };
+		3E017B4328ECB33A00D286E9 /* BLACK8.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK8.C; path = ../../../CHAP_8/BLACK8.C; sourceTree = "<group>"; };
+		3E2CDEB328F0B76F00594EB2 /* BLACK11.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK11.C; path = ../../../CHAP_11/BLACK11.C; sourceTree = "<group>"; };
+		3E2CDEB428F0B76F00594EB2 /* BLACK11.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK11.H; path = ../../../CHAP_11/BLACK11.H; sourceTree = "<group>"; };
+		3E34724B2917E26D0017D0BF /* BSPDEMO.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = BSPDEMO.C; path = ../../BSPDEMO.C; sourceTree = "<group>"; };
+		3E34724D2917E2900017D0BF /* BSPDEMO.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = BSPDEMO.h; sourceTree = "<group>"; };
+		3E34724E2917E3960017D0BF /* BSPBUTT.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = BSPBUTT.PCX; path = ../../BSPBUTT.PCX; sourceTree = "<group>"; };
+		3E34724F2917E3960017D0BF /* BSPINT.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = BSPINT.PCX; path = ../../BSPINT.PCX; sourceTree = "<group>"; };
+		3E3472502917E3960017D0BF /* BSPPOINT.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = BSPPOINT.PCX; path = ../../BSPPOINT.PCX; sourceTree = "<group>"; };
+		3E3C579428E883D300637704 /* BLACK3.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK3.H; path = ../../../CHAP_3/BLACK3.H; sourceTree = "<group>"; };
+		3E3C579528E883D300637704 /* BLACK3.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK3.C; path = ../../../CHAP_3/BLACK3.C; sourceTree = "<group>"; };
+		3EF00A4E28E99F84000AC74A /* BLACK4.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK4.H; path = ../../../CHAP_4/BLACK4.H; sourceTree = "<group>"; };
+		3EF00A4F28E99F84000AC74A /* BLACK4.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK4.C; path = ../../../CHAP_4/BLACK4.C; sourceTree = "<group>"; };
+		EE5BE75C2914126C0099C55B /* BLACK15.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK15.C; path = ../../BLACK15.C; sourceTree = "<group>"; };
+		EE5BE75D2914126C0099C55B /* BLACK15.H */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.h; name = BLACK15.H; path = ../../BLACK15.H; sourceTree = "<group>"; };
+/* End PBXFileReference section */
+
+/* Begin PBXFrameworksBuildPhase section */
+		2DA6C5A9258AA66B002B1931 /* Frameworks */ = {
+			isa = PBXFrameworksBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXFrameworksBuildPhase section */
+
+/* Begin PBXGroup section */
+		2DA6C5A3258AA66B002B1931 = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AE258AA66B002B1931 /* HostApp */,
+				2DA6C5AD258AA66B002B1931 /* Products */,
+			);
+			sourceTree = "<group>";
+		};
+		2DA6C5AD258AA66B002B1931 /* Products */ = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AC258AA66B002B1931 /* CHAP15 */,
+			);
+			name = Products;
+			sourceTree = "<group>";
+		};
+		2DA6C5AE258AA66B002B1931 /* HostApp */ = {
+			isa = PBXGroup;
+			children = (
+				2D9EAF26258E750E00297C9C /* HostApp.entitlements */,
+				2DA6C5AF258AA66B002B1931 /* main.cpp */,
+				2D9EAF1F258E6A4300297C9C /* sdl.h */,
+				2DB9F18C258EA679000A3299 /* ega.h */,
+				2D2793D725AD90B500DEC620 /* font.h */,
+				3E3C579528E883D300637704 /* BLACK3.C */,
+				3E3C579428E883D300637704 /* BLACK3.H */,
+				3EF00A4F28E99F84000AC74A /* BLACK4.C */,
+				3EF00A4E28E99F84000AC74A /* BLACK4.H */,
+				3E017B4328ECB33A00D286E9 /* BLACK8.C */,
+				3E017B4228ECB33A00D286E9 /* BLACK8.H */,
+				3E2CDEB328F0B76F00594EB2 /* BLACK11.C */,
+				3E2CDEB428F0B76F00594EB2 /* BLACK11.H */,
+				EE5BE75C2914126C0099C55B /* BLACK15.C */,
+				EE5BE75D2914126C0099C55B /* BLACK15.H */,
+				3E34724B2917E26D0017D0BF /* BSPDEMO.C */,
+				3E34724D2917E2900017D0BF /* BSPDEMO.h */,
+				3E34724E2917E3960017D0BF /* BSPBUTT.PCX */,
+				3E34724F2917E3960017D0BF /* BSPINT.PCX */,
+				3E3472502917E3960017D0BF /* BSPPOINT.PCX */,
+			);
+			path = HostApp;
+			sourceTree = "<group>";
+		};
+/* End PBXGroup section */
+
+/* Begin PBXNativeTarget section */
+		2DA6C5AB258AA66B002B1931 /* CHAP15 */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = 2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP15" */;
+			buildPhases = (
+				2DA6C5A8258AA66B002B1931 /* Sources */,
+				2DA6C5A9258AA66B002B1931 /* Frameworks */,
+				2DA6C5AA258AA66B002B1931 /* CopyFiles */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+			);
+			name = CHAP15;
+			productName = CicParserSim;
+			productReference = 2DA6C5AC258AA66B002B1931 /* CHAP15 */;
+			productType = "com.apple.product-type.tool";
+		};
+/* End PBXNativeTarget section */
+
+/* Begin PBXProject section */
+		2DA6C5A4258AA66B002B1931 /* Project object */ = {
+			isa = PBXProject;
+			attributes = {
+				LastUpgradeCheck = 1240;
+				TargetAttributes = {
+					2DA6C5AB258AA66B002B1931 = {
+						CreatedOnToolsVersion = 12.2;
+					};
+				};
+			};
+			buildConfigurationList = 2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP15" */;
+			compatibilityVersion = "Xcode 9.3";
+			developmentRegion = en;
+			hasScannedForEncodings = 0;
+			knownRegions = (
+				en,
+				Base,
+			);
+			mainGroup = 2DA6C5A3258AA66B002B1931;
+			productRefGroup = 2DA6C5AD258AA66B002B1931 /* Products */;
+			projectDirPath = "";
+			projectRoot = "";
+			targets = (
+				2DA6C5AB258AA66B002B1931 /* CHAP15 */,
+			);
+		};
+/* End PBXProject section */
+
+/* Begin PBXSourcesBuildPhase section */
+		2DA6C5A8258AA66B002B1931 /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				3E017B4428ECB33A00D286E9 /* BLACK8.C in Sources */,
+				3E2CDEB828F0BA0A00594EB2 /* BLACK11.C in Sources */,
+				2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */,
+				3E34724C2917E26D0017D0BF /* BSPDEMO.C in Sources */,
+				3EF00A5928E9A177000AC74A /* BLACK4.C in Sources */,
+				3E3C579628E883D700637704 /* BLACK3.C in Sources */,
+				EE5BE75E2914126C0099C55B /* BLACK15.C in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXSourcesBuildPhase section */
+
+/* Begin XCBuildConfiguration section */
+		2DA6C5B1258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = dwarf;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				ENABLE_TESTABILITY = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_OPTIMIZATION_LEVEL = 0;
+				GCC_PREPROCESSOR_DEFINITIONS = (
+					"DEBUG=1",
+					"$(inherited)",
+				);
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Debug;
+		};
+		2DA6C5B2258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				ENABLE_NS_ASSERTIONS = NO;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = NO;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Release;
+		};
+		2DA6C5B4258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = (
+					/opt/homebrew/include/SDL2,
+					/usr/local/include/SDL2,
+				);
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/lib",
+					"-L/usr/local/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Debug;
+		};
+		2DA6C5B5258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = (
+					/opt/homebrew/include/SDL2,
+					/usr/local/include/SDL2,
+				);
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/lib",
+					"-L/usr/local/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Release;
+		};
+/* End XCBuildConfiguration section */
+
+/* Begin XCConfigurationList section */
+		2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP15" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B1258AA66B002B1931 /* Debug */,
+				2DA6C5B2258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP15" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B4258AA66B002B1931 /* Debug */,
+				2DA6C5B5258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+/* End XCConfigurationList section */
+	};
+	rootObject = 2DA6C5A4258AA66B002B1931 /* Project object */;
+}
diff --git a/CHAP_15/HostApp/CHAP15.xcodeproj/project.xcworkspace/contents.xcworkspacedata b/CHAP_15/HostApp/CHAP15.xcodeproj/project.xcworkspace/contents.xcworkspacedata
new file mode 100644
index 0000000..c6a1285
--- /dev/null
+++ b/CHAP_15/HostApp/CHAP15.xcodeproj/project.xcworkspace/contents.xcworkspacedata
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "self:/Users/Nyadesu/Dev/black_art_3d/black_art_3d_revival/CHAP_15/HostApp/CHAP15.xcodeproj">
+   </FileRef>
+</Workspace>
diff --git a/CHAP_15/HostApp/CHAP15.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist b/CHAP_15/HostApp/CHAP15.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
new file mode 100644
index 0000000..18d9810
--- /dev/null
+++ b/CHAP_15/HostApp/CHAP15.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IDEDidComputeMac32BitWarning</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_15/HostApp/CHAP15.xcodeproj/xcshareddata/xcschemes/CHAP13.xcscheme b/CHAP_15/HostApp/CHAP15.xcodeproj/xcshareddata/xcschemes/CHAP13.xcscheme
new file mode 100644
index 0000000..2c8d064
--- /dev/null
+++ b/CHAP_15/HostApp/CHAP15.xcodeproj/xcshareddata/xcschemes/CHAP13.xcscheme
@@ -0,0 +1,85 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "1400"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+               BuildableName = "CHAP15"
+               BlueprintName = "CHAP15"
+               ReferencedContainer = "container:CHAP15.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES">
+      <Testables>
+      </Testables>
+   </TestAction>
+   <LaunchAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      debugServiceExtension = "internal"
+      allowLocationSimulation = "YES"
+      viewDebuggingEnabled = "No">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+            BuildableName = "CHAP15"
+            BlueprintName = "CHAP15"
+            ReferencedContainer = "container:CHAP15.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+      <CommandLineArguments>
+         <CommandLineArgument
+            argument = "CUBE.PLG"
+            isEnabled = "YES">
+         </CommandLineArgument>
+      </CommandLineArguments>
+   </LaunchAction>
+   <ProfileAction
+      buildConfiguration = "Release"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      debugDocumentVersioning = "YES">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+            BuildableName = "CHAP15"
+            BlueprintName = "CHAP15"
+            ReferencedContainer = "container:CHAP15.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff --git a/CHAP_15/HostApp/HostApp/BSPDEMO.h b/CHAP_15/HostApp/HostApp/BSPDEMO.h
new file mode 100644
index 0000000..5a9ca75
--- /dev/null
+++ b/CHAP_15/HostApp/HostApp/BSPDEMO.h
@@ -0,0 +1,13 @@
+//
+//  BSPDEMO.h
+//  CHAP15
+//
+//  Created by Tosha on 06/11/2022.
+//
+
+#ifndef BSPDEMO_h
+#define BSPDEMO_h
+
+void start_bspdemo(CEga *ega, int pixelSize);
+
+#endif /* BSPDEMO_h */
diff --git a/CHAP_15/HostApp/HostApp/HostApp.entitlements b/CHAP_15/HostApp/HostApp/HostApp.entitlements
new file mode 100644
index 0000000..8cc185a
--- /dev/null
+++ b/CHAP_15/HostApp/HostApp/HostApp.entitlements
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>com.apple.security.cs.disable-library-validation</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_15/HostApp/HostApp/OBJECTS.C b/CHAP_15/HostApp/HostApp/OBJECTS.C
new file mode 100755
index 0000000..293bb25
--- /dev/null
+++ b/CHAP_15/HostApp/HostApp/OBJECTS.C
@@ -0,0 +1,278 @@
+
+// I N C L U D E S ///////////////////////////////////////////////////////////
+
+#include <SDL.h>
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <fcntl.h>
+#include <memory.h>
+#include <math.h>
+#include <string.h>
+#include <search.h>             // this one is needed for qsort()
+
+// include all of our stuff
+
+#include "black3.h"
+#include "black4.h"
+#include "black8.h"
+#include "black11.h"
+
+// G L O B A L S /////////////////////////////////////////////////////////////
+
+object test_object[4];   // the test objects
+
+// M A I N ////////////////////////////////////////////////////////////////////
+
+void start_objects(int argc, char **argv, CEga *ega)
+{
+
+int index,   // looping variable
+    done=0;  // exit flag
+
+char buffer[80]; // used to print strings
+
+// load in the objects from the command line
+
+for (index=0; index<4; index++)
+    {
+    if (!PLG_Load_Object((object_ptr)&test_object[index],argv[1],1))
+       {
+       printf("\nCouldn't find file %s",argv[1]);
+       return;
+
+       } // end if
+
+    } // end for index
+
+// position the objects 300 units in front of user
+
+for (index=0; index<4; index++)
+    Position_Object((object_ptr)&test_object[index],-150+index*100,0,300);
+
+// set the viewpoint
+
+view_point.x = 0;
+view_point.y = 0;
+view_point.z = 0;
+
+// create the sin/cos lookup tables used for the rotation function
+
+Build_Look_Up_Tables();
+
+// set graphics to mode 13h
+
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
+
+// allocate double buffer
+
+Create_Double_Buffer(200);
+
+// read the 3d color palette off disk
+
+Load_Palette_Disk("standard.pal",(RGB_palette_ptr)&color_palette_3d);
+Write_Palette(0,255,(RGB_palette_ptr)&color_palette_3d);
+
+// install the isr keyboard driver
+
+//Keyboard_Install_Driver();
+
+// set viewing distance
+
+viewing_distance = 250;
+
+// main event loop
+// Event handler
+SDL_Event e;
+while(!done)
+     {
+
+     // compute starting time of this frame
+
+     starting_time = Timer_Query();
+
+     while( SDL_PollEvent( &e ) != 0 )
+      {
+          //User requests quit
+          if( e.type == SDL_QUIT )
+          {
+              done = 1;
+          }
+      }
+          
+      const Uint8* keyboard_state = SDL_GetKeyboardState(NULL);
+
+     // erase the screen
+
+     Fill_Double_Buffer(0);
+
+     // test what key(s) user is pressing
+
+     // test if user is moving viewpoint in positive X
+
+     if (keyboard_state[SDL_SCANCODE_RIGHT])
+        view_point.x+=5;
+
+     // test if user is moving viewpoint in negative X
+
+     if (keyboard_state[SDL_SCANCODE_LEFT])
+        view_point.x-=5;
+
+     // test if user is moving viewpoint in positive Y
+
+     if (keyboard_state[SDL_SCANCODE_UP])
+        view_point.y+=5;
+
+     // test if user is moving viewpoint in negative Y
+
+     if (keyboard_state[SDL_SCANCODE_DOWN])
+        view_point.y-=5;
+
+     // test if user is moving viewpoint in positive Z
+
+     if (keyboard_state[SDL_SCANCODE_EQUALS])
+        view_point.z+=5;
+
+     // test if user is moving viewpoint in negative Z
+
+     if (keyboard_state[SDL_SCANCODE_MINUS])
+        view_point.z-=5;
+
+     // this section takes care of view angle rotation
+
+
+     if (keyboard_state[SDL_SCANCODE_Z])
+        {
+
+        if ((view_angle.ang_x+=10)>360)
+           view_angle.ang_x = 0;
+
+
+        } // end if
+
+     if (keyboard_state[SDL_SCANCODE_A])
+        {
+
+        if ((view_angle.ang_x-=10)<0)
+           view_angle.ang_x = 360;
+
+        } // end if
+
+     if (keyboard_state[SDL_SCANCODE_X])
+        {
+
+        if ((view_angle.ang_y+=10)>360)
+           view_angle.ang_y = 0;
+
+        } // end if
+
+     if (keyboard_state[SDL_SCANCODE_S])
+        {
+
+        if ((view_angle.ang_y-=5)<0)
+           view_angle.ang_y = 360;
+
+        } // end if
+
+     if (keyboard_state[SDL_SCANCODE_C])
+        {
+
+        if ((view_angle.ang_z+=5)>360)
+           view_angle.ang_z = 0;
+
+        } // end if
+
+
+     if (keyboard_state[SDL_SCANCODE_D])
+        {
+
+        if ((view_angle.ang_z-=5)<0)
+           view_angle.ang_z = 360;
+
+        } // end if
+
+     // test for exit key
+
+     if (keyboard_state[SDL_SCANCODE_ESCAPE])
+        done=1;
+
+
+     // create the global world to camera transformation matrix
+
+     Create_World_To_Camera();
+
+     // blank object removal message area
+
+     sprintf(buffer,"Objects Removed                       ");
+     Print_String_DB(0,SCREEN_HEIGHT-ROM_CHAR_HEIGHT-2,10,buffer,0);
+
+     // process each object
+
+     for (index=0; index<4; index++)
+     {
+     // test if this object should be processed
+
+     if (!Remove_Object(&test_object[index],OBJECT_CULL_XYZ_MODE))
+        {
+
+        // convert to world coordinates
+
+        Local_To_World_Object((object_ptr)&test_object[index]);
+
+        // shade and remove backfaces, ignore the backface part for now
+        // notice that backface shadin and backface removal is done in world coordinates
+
+        Remove_Backfaces_And_Shade((object_ptr)&test_object[index]);
+
+        // convert to camera coordinates
+
+        World_To_Camera_Object((object_ptr)&test_object[index]);
+
+        // draw the object
+
+        Draw_Object_Solid((object_ptr)&test_object[index]);
+
+        } // end if object is visible
+     else
+        {
+
+        sprintf(buffer,"%d, ",index);
+        Print_String_DB(128+index*16,180,10,buffer,0);
+        }
+
+     } // end for index
+
+     // print out viewpoint
+
+     sprintf(buffer,"Viewpoint is at (%d,%d,%d)     ",(int)view_point.x,
+                                                      (int)view_point.y,
+                                                      (int)view_point.z);
+
+     Print_String_DB(0,0,10,buffer,0);
+
+     sprintf(buffer,"Viewangle is at (%d,%d,%d)     ",(int)view_angle.ang_x,
+                                                      (int)view_angle.ang_y,
+                                                      (int)view_angle.ang_z);
+     Print_String_DB(0,ROM_CHAR_HEIGHT+2,10,buffer,0);
+
+     // display double buffer
+
+     Display_Double_Buffer(double_buffer,0);
+
+     _sync();
+
+     // lock onto 18 frames per second max
+
+     while((Timer_Query()-starting_time)<CLOCKS_PER_SEC/18);
+
+     } // end while
+
+// restore graphics mode back to text
+
+//Set_Graphics_Mode(TEXT_MODE);
+
+// restore the old keyboard driver
+
+//Keyboard_Remove_Driver();
+
+} // end main
diff --git a/CHAP_15/HostApp/HostApp/SOLZDEMO.h b/CHAP_15/HostApp/HostApp/SOLZDEMO.h
new file mode 100644
index 0000000..bf2d5da
--- /dev/null
+++ b/CHAP_15/HostApp/HostApp/SOLZDEMO.h
@@ -0,0 +1,13 @@
+//
+//  SOLZDEMO.h
+//  CHAP15
+//
+//  Created by AC27 on 03/11/2022.
+//
+
+#ifndef SOLZDEMO_h
+#define SOLZDEMO_h
+
+void start_solzdemo(int argc, char **argv, CEga *ega);
+
+#endif /* SOLZDEMO_h */
diff --git a/CHAP_15/HostApp/HostApp/SORTDEMO.h b/CHAP_15/HostApp/HostApp/SORTDEMO.h
new file mode 100644
index 0000000..c4d6082
--- /dev/null
+++ b/CHAP_15/HostApp/HostApp/SORTDEMO.h
@@ -0,0 +1,13 @@
+//
+//  SORTDEMO.h
+//  CHAP15
+//
+//  Created by AC27 on 03/11/2022.
+//
+
+#ifndef SORTDEMO_h
+#define SORTDEMO_h
+
+void start_sortdemo(int argc, char **argv, CEga *ega);
+
+#endif /* SORTDEMO_h */
diff --git a/CHAP_15/HostApp/HostApp/ZDEMO.h b/CHAP_15/HostApp/HostApp/ZDEMO.h
new file mode 100644
index 0000000..d9ee784
--- /dev/null
+++ b/CHAP_15/HostApp/HostApp/ZDEMO.h
@@ -0,0 +1,13 @@
+//
+//  ZDEMO.h
+//  CHAP15
+//
+//  Created by AC27 on 03/11/2022.
+//
+
+#ifndef ZDEMO_h
+#define ZDEMO_h
+
+void start_zdemo(CEga *ega);
+
+#endif /* ZDEMO_h */
diff --git a/CHAP_15/HostApp/HostApp/ega.h b/CHAP_15/HostApp/HostApp/ega.h
new file mode 100644
index 0000000..b19dc71
--- /dev/null
+++ b/CHAP_15/HostApp/HostApp/ega.h
@@ -0,0 +1,63 @@
+#ifndef EGA_h
+#define EGA_h
+
+#include "font.h"
+
+typedef uint16_t WORD;
+typedef uint8_t BYTE;
+typedef uint8_t FLAG;
+typedef uint16_t WORD;
+
+typedef uint32_t DWORD;
+
+class CVideoAdapter
+{
+public:
+	virtual DWORD GetPixel(int x, int y, int p) = 0;
+};
+
+class CEga : public CVideoAdapter
+{
+	enum {
+		MemSize = 0x10000*2
+	};
+
+public:
+	DWORD memory[MemSize];
+
+    // https://www.ditig.com/256-colors-cheat-sheet
+    // Note: first 16 colors are from VGA palette, rest is from Xterm
+    DWORD palette[256] = {
+        0x000000, 0x0000b0, 0x00b000, 0x00b0b0, 0xb00000, 0xb000b0, 0xb0b000, 0xb0b0b0,
+        0x808080, 0x0000ff, 0x00ff00, 0x00ffff, 0xff0000, 0xff00ff, 0xffff00, 0xffffff, 0x000000, 0x00005f, 0x000087, 0x0000af, 0x0000d7, 0x0000ff, 0x005f00, 0x005f5f, 0x005f87, 0x005faf, 0x005fd7, 0x005fff, 0x008700, 0x00875f, 0x008787, 0x0087af, 0x0087d7, 0x0087ff, 0x00af00, 0x00af5f, 0x00af87, 0x00afaf, 0x00afd7, 0x00afff, 0x00d700, 0x00d75f, 0x00d787, 0x00d7af, 0x00d7d7, 0x00d7ff, 0x00ff00, 0x00ff5f, 0x00ff87, 0x00ffaf, 0x00ffd7, 0x00ffff, 0x5f0000, 0x5f005f, 0x5f0087, 0x5f00af, 0x5f00d7, 0x5f00ff, 0x5f5f00, 0x5f5f5f, 0x5f5f87, 0x5f5faf, 0x5f5fd7, 0x5f5fff, 0x5f8700, 0x5f875f, 0x5f8787, 0x5f87af, 0x5f87d7, 0x5f87ff, 0x5faf00, 0x5faf5f, 0x5faf87, 0x5fafaf, 0x5fafd7, 0x5fafff, 0x5fd700, 0x5fd75f, 0x5fd787, 0x5fd7af, 0x5fd7d7, 0x5fd7ff, 0x5fff00, 0x5fff5f, 0x5fff87, 0x5fffaf, 0x5fffd7, 0x5fffff, 0x870000, 0x87005f, 0x870087, 0x8700af, 0x8700d7, 0x8700ff, 0x875f00, 0x875f5f, 0x875f87, 0x875faf, 0x875fd7, 0x875fff, 0x878700, 0x87875f, 0x878787, 0x8787af, 0x8787d7, 0x8787ff, 0x87af00, 0x87af5f, 0x87af87, 0x87afaf, 0x87afd7, 0x87afff, 0x87d700, 0x87d75f, 0x87d787, 0x87d7af, 0x87d7d7, 0x87d7ff, 0x87ff00, 0x87ff5f, 0x87ff87, 0x87ffaf, 0x87ffd7, 0x87ffff, 0xaf0000, 0xaf005f, 0xaf0087, 0xaf00af, 0xaf00d7, 0xaf00ff, 0xaf5f00, 0xaf5f5f, 0xaf5f87, 0xaf5faf, 0xaf5fd7, 0xaf5fff, 0xaf8700, 0xaf875f, 0xaf8787, 0xaf87af, 0xaf87d7, 0xaf87ff, 0xafaf00, 0xafaf5f, 0xafaf87, 0xafafaf, 0xafafd7, 0xafafff, 0xafd700, 0xafd75f, 0xafd787, 0xafd7af, 0xafd7d7, 0xafd7ff, 0xafff00, 0xafff5f, 0xafff87, 0xafffaf, 0xafffd7, 0xafffff, 0xd70000, 0xd7005f, 0xd70087, 0xd700af, 0xd700d7, 0xd700ff, 0xd75f00, 0xd75f5f, 0xd75f87, 0xd75faf, 0xd75fd7, 0xd75fff, 0xd78700, 0xd7875f, 0xd78787, 0xd787af, 0xd787d7, 0xd787ff, 0xd7af00, 0xd7af5f, 0xd7af87, 0xd7afaf, 0xd7afd7, 0xd7afff, 0xd7d700, 0xd7d75f, 0xd7d787, 0xd7d7af, 0xd7d7d7, 0xd7d7ff, 0xd7ff00, 0xd7ff5f, 0xd7ff87, 0xd7ffaf, 0xd7ffd7, 0xd7ffff, 0xff0000, 0xff005f, 0xff0087, 0xff00af, 0xff00d7, 0xff00ff, 0xff5f00, 0xff5f5f, 0xff5f87, 0xff5faf, 0xff5fd7, 0xff5fff, 0xff8700, 0xff875f, 0xff8787, 0xff87af, 0xff87d7, 0xff87ff, 0xffaf00, 0xffaf5f, 0xffaf87, 0xffafaf, 0xffafd7, 0xffafff, 0xffd700, 0xffd75f, 0xffd787, 0xffd7af, 0xffd7d7, 0xffd7ff, 0xffff00, 0xffff5f, 0xffff87, 0xffffaf, 0xffffd7, 0xffffff, 0x080808, 0x121212, 0x1c1c1c, 0x262626, 0x303030, 0x3a3a3a, 0x444444, 0x4e4e4e, 0x585858, 0x626262, 0x6c6c6c, 0x767676, 0x808080, 0x8a8a8a, 0x949494, 0x9e9e9e, 0xa8a8a8, 0xb2b2b2, 0xbcbcbc, 0xc6c6c6, 0xd0d0d0, 0xdadada, 0xe4e4e4, 0xeeeeee
+    };
+
+public:
+	CEga()
+	{
+        memset(memory, 0, sizeof(memory));
+	}
+	
+    void SetPaletteIndex(int index, int rgb)
+    {
+        int r = ((rgb & 4) ? 2 : 0) + ((rgb & 32) ? 1 : 0);
+        int g = ((rgb & 2) ? 2 : 0) + ((rgb & 16) ? 1 : 0);
+        int b = ((rgb & 1) ? 2 : 0) + ((rgb & 8) ? 1 : 0);
+        r = r * 255 / 3;
+        g = g * 255 / 3;
+        b = b * 255 / 3;
+        palette[index] = b | (g << 8) | (r << 16);
+
+    }
+    
+	virtual DWORD GetPixel(int x, int y, int page = -1) override
+	{
+        BYTE* _video = (BYTE*)memory;
+        int idx = (int)_video[((y<<8) + (y<<6)) + x];
+        return palette[idx];
+	}
+};
+
+void _sync();
+
+#endif
diff --git a/CHAP_15/HostApp/HostApp/font.h b/CHAP_15/HostApp/HostApp/font.h
new file mode 100644
index 0000000..8be86b2
--- /dev/null
+++ b/CHAP_15/HostApp/HostApp/font.h
@@ -0,0 +1,313 @@
+#ifndef FONT_h
+#define FONT_h
+
+#pragma once
+
+// http://www.hampa.ch/pce/download.html
+// genoa-ega-2.41.rom
+// dd if=genoa-ega-2.41.rom of=font bs=1 skip=8224 count=3584
+// xxd -i font > font.h
+
+static const uint8_t font[] = {
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81,
+  0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xff,
+  0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
+  0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
+  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff,
+  0xff, 0xff, 0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc,
+  0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30,
+  0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x63,
+  0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06,
+  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66,
+  0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xdb,
+  0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c,
+  0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c,
+  0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c,
+  0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06,
+  0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6,
+  0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c,
+  0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x30,
+  0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c,
+  0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38, 0x78, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c,
+  0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66,
+  0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0,
+  0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x6c,
+  0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66,
+  0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x0c,
+  0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66,
+  0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
+  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60,
+  0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x30, 0x30, 0x30,
+  0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0,
+  0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
+  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xff, 0x00, 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76,
+  0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66,
+  0x3c, 0x00, 0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66,
+  0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec,
+  0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60,
+  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c,
+  0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30,
+  0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38,
+  0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38,
+  0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66,
+  0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00, 0x00,
+  0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc,
+  0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x38,
+  0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
+  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe,
+  0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x38,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x66,
+  0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x60,
+  0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c,
+  0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x76,
+  0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x6c,
+  0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00, 0x10,
+  0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00, 0x00, 0xc6,
+  0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60,
+  0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xcc, 0xcc,
+  0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x0e,
+  0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
+  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
+  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
+  0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
+  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06,
+  0x06, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c,
+  0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c,
+  0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x44, 0x11, 0x44,
+  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x55, 0xaa,
+  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
+  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
+  0xdd, 0x77, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
+  0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff,
+  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
+  0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
+  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
+  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30,
+  0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c,
+  0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c,
+  0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00,
+  0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e,
+  0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18,
+  0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00,
+  0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c,
+  0x1c, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8,
+  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+};
+
+#endif
diff --git a/CHAP_15/HostApp/HostApp/main.cpp b/CHAP_15/HostApp/HostApp/main.cpp
new file mode 100644
index 0000000..8308a7f
--- /dev/null
+++ b/CHAP_15/HostApp/HostApp/main.cpp
@@ -0,0 +1,58 @@
+//
+//  main.cpp
+//  HostApp
+//
+//
+
+#include <iostream>
+#include <vector>
+#include <sstream>
+#include <iomanip>
+#include <list>
+
+#include "sdl.h"
+#include "ega.h"
+
+#include "BSPDEMO.h"
+
+CEga mVideo;
+CSdl mSdl;
+std::list<int> keyboardBuffer;
+
+void onKey(int k, int p)
+{
+    if (!p)
+        return;
+
+    int key = 0;
+    switch (k)
+    {
+        case SDL_SCANCODE_UP: key = 0x4800; break;
+        case SDL_SCANCODE_DOWN: key = 0x5000; break;
+        case SDL_SCANCODE_LEFT: key = 0x4b00; break;
+        case SDL_SCANCODE_RIGHT: key = 0x4d00; break;
+        case SDL_SCANCODE_SPACE: key = 0x3920; break;
+        case SDL_SCANCODE_RETURN: key = 0x1c0d; break;
+    }
+
+    if (key)
+    {
+        keyboardBuffer.push_back(key);
+    }
+}
+
+void _sync()
+{
+    for (int y=0; y<mSdl.Height; y++)
+      for (int x=0; x<mSdl.Width; x++)
+        mSdl.SetPixel(x, y, mVideo.GetPixel(x, y));
+    
+    mSdl.Loop();
+}
+
+int main(int argc, char * argv[]) {
+    mSdl.Init();
+    start_bspdemo(&mVideo, mSdl.pixelSize);
+    mSdl.Deinit();
+    return 0;
+}
diff --git a/CHAP_15/HostApp/HostApp/sdl.h b/CHAP_15/HostApp/HostApp/sdl.h
new file mode 100644
index 0000000..7b6b0d5
--- /dev/null
+++ b/CHAP_15/HostApp/HostApp/sdl.h
@@ -0,0 +1,144 @@
+#ifndef SDL_h
+#define SDL_h
+
+typedef uint32_t Uint32;
+#include <SDL.h>
+#include <SDL_render.h>
+
+void onKey(int k, int p);
+
+class CSdl
+{
+    
+    std::vector< unsigned char > pixels;
+
+    SDL_Renderer* renderer{nullptr};
+    SDL_Texture* texture{nullptr};
+    SDL_Window* window{nullptr};
+    bool running{true};
+    int lastKey{0};
+
+public:
+    const int pixelSize = 2;
+    enum {
+        Width = 320,//640,
+        Height = 200//350
+    };
+
+    void Init()
+    {
+        pixels.resize(Width*Height*4);
+        SDL_Init( SDL_INIT_EVERYTHING );
+        atexit( SDL_Quit );
+        
+        window = SDL_CreateWindow
+        (
+         "BlackArt simulator",
+         SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
+         Width*pixelSize, Height*pixelSize,
+         SDL_WINDOW_SHOWN
+         );
+        
+        renderer = SDL_CreateRenderer
+        (
+         window,
+         -1,
+         SDL_RENDERER_ACCELERATED
+         );
+
+        texture = SDL_CreateTexture
+        (
+         renderer,
+         SDL_PIXELFORMAT_ARGB8888,
+         SDL_TEXTUREACCESS_STREAMING,
+         Width, Height
+         );
+    }
+    
+    void Blit()
+    {
+        SDL_SetRenderDrawColor( renderer, 0, 0, 0, SDL_ALPHA_OPAQUE );
+        SDL_RenderClear( renderer );
+        
+        SDL_UpdateTexture
+        (
+         texture,
+         NULL,
+         &pixels[0],
+         Width * 4
+         );
+        
+        SDL_RenderCopy( renderer, texture, NULL, NULL );
+        SDL_RenderPresent( renderer );
+    }
+    
+    void Loop()
+    {
+//        SDL_Event event;
+//
+//        while( SDL_PollEvent( &event ) )
+//        {
+//            if (SDL_KEYDOWN == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 1);
+//            }
+//
+//            if (SDL_KEYUP == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 0);
+//            }
+//
+//            if( ( SDL_QUIT == event.type ) ||
+//               ( SDL_KEYDOWN == event.type && SDL_SCANCODE_ESCAPE == event.key.keysym.scancode ) )
+//            {
+//                running = false;
+//                break;
+//            }
+//        }
+        
+        Blit();
+
+        //const Uint64 end = SDL_GetPerformanceCounter();
+        //const static Uint64 freq = SDL_GetPerformanceFrequency();
+        //const double seconds = ( end - start ) / static_cast< double >( freq );
+        //std::cout << "Frame time: " << seconds * 1000.0 << "ms" << std::endl;
+//        if (running)
+//            SDL_Delay(20);
+    }
+    
+    void Deinit()
+    {
+        SDL_DestroyRenderer( renderer );
+        SDL_DestroyWindow( window );
+        SDL_Quit();
+    }
+    
+    void SetPixel(int x, int y, uint32_t c)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        pixels[ offset + 0 ] = (uint8_t)c;
+        pixels[ offset + 1 ] = (uint8_t)(c >> 8);
+        pixels[ offset + 2 ] = (uint8_t)(c >> 16);
+        pixels[ offset + 3 ] = SDL_ALPHA_OPAQUE;
+    }
+
+    uint32_t GetPixel(int x, int y)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        int b = pixels[ offset + 0 ];
+        int g = pixels[ offset + 1 ];
+        int r = pixels[ offset + 2 ];
+        return r | (g << 8) | (b << 16);
+    }
+
+};
+
+#endif
diff --git a/CHAP_15/SOLZDEMO.C b/CHAP_15/SOLZDEMO.C
index ec8499a..9e36144 100755
--- a/CHAP_15/SOLZDEMO.C
+++ b/CHAP_15/SOLZDEMO.C
@@ -1,15 +1,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 #include <search.h>             // this one is needed for qsort()
@@ -18,10 +15,7 @@
 
 #include "black3.h"
 #include "black4.h"
-#include "black5.h"
-#include "black6.h"
 #include "black8.h"
-#include "black9.h"
 #include "black11.h"
 #include "black15.h"
 
@@ -31,7 +25,7 @@ object test_objects[4];                // objects in universe
 
 // M A I N ////////////////////////////////////////////////////////////////////
 
-void main(int argc,char **argv)
+void start_solzdemo(int argc, char **argv, CEga *ega)
 {
 
 int done=0,
@@ -70,7 +64,7 @@ for (index=0; index<4; index++)
 
 // set graphics to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // read the 3d color palette off disk
 
@@ -89,12 +83,15 @@ Create_Z_Buffer(200);
 
 Fill_Z_Buffer(16000);
 
+view_point  = {-60,120,-80,1};
+
 // install the isr keyboard driver
 
-Keyboard_Install_Driver();
+//Keyboard_Install_Driver();
 
 // main event loop
-
+// Event handler
+SDL_Event e;
 while(!done)
      {
 
@@ -102,6 +99,17 @@ while(!done)
 
      starting_time = Timer_Query();
 
+     while( SDL_PollEvent( &e ) != 0 )
+      {
+          //User requests quit
+          if( e.type == SDL_QUIT )
+          {
+              done = 1;
+          }
+      }
+          
+      const Uint8* keyboard_state = SDL_GetKeyboardState(NULL);
+
      // erase all objects
 
      Fill_Double_Buffer(0);
@@ -112,7 +120,7 @@ while(!done)
 
      // test what user is doing
 
-     if (keyboard_state[MAKE_T])
+     if (keyboard_state[SDL_SCANCODE_T])
         {
 
         x = light_source.x;
@@ -125,7 +133,7 @@ while(!done)
 
         }
 
-     if (keyboard_state[MAKE_G])
+     if (keyboard_state[SDL_SCANCODE_G])
         {
 
         y = light_source.y;
@@ -138,7 +146,7 @@ while(!done)
 
         }
 
-     if (keyboard_state[MAKE_B])
+     if (keyboard_state[SDL_SCANCODE_B])
         {
 
         z = light_source.z;
@@ -151,7 +159,7 @@ while(!done)
 
         }
 
-     if (keyboard_state[MAKE_Y])
+     if (keyboard_state[SDL_SCANCODE_Y])
         {
 
         x = light_source.x;
@@ -164,7 +172,7 @@ while(!done)
 
         }
 
-     if (keyboard_state[MAKE_H])
+     if (keyboard_state[SDL_SCANCODE_H])
         {
 
         y = light_source.y;
@@ -177,7 +185,7 @@ while(!done)
 
         }
 
-     if (keyboard_state[MAKE_N])
+     if (keyboard_state[SDL_SCANCODE_N])
         {
 
         z = light_source.z;
@@ -190,62 +198,62 @@ while(!done)
 
         }
 
-     if (keyboard_state[MAKE_UP])
+     if (keyboard_state[SDL_SCANCODE_UP])
         view_point.y+=20;
 
-     if (keyboard_state[MAKE_DOWN])
+     if (keyboard_state[SDL_SCANCODE_DOWN])
         view_point.y-=20;
 
-     if (keyboard_state[MAKE_RIGHT])
+     if (keyboard_state[SDL_SCANCODE_RIGHT])
         view_point.x+=20;
 
-     if (keyboard_state[MAKE_LEFT])
+     if (keyboard_state[SDL_SCANCODE_LEFT])
         view_point.x-=20;
 
-     if (keyboard_state[MAKE_KEYPAD_PLUS])
+     if (keyboard_state[SDL_SCANCODE_EQUALS])
         view_point.z+=20;
 
 
-     if (keyboard_state[MAKE_KEYPAD_MINUS])
+     if (keyboard_state[SDL_SCANCODE_MINUS])
         view_point.z-=20;
 
-     if (keyboard_state[MAKE_LFT_BRACKET])
+     if (keyboard_state[SDL_SCANCODE_LEFTBRACKET])
         Scale_Object(&test_objects[0],1.1);
 
-    if (keyboard_state[MAKE_RGT_BRACKET])
+    if (keyboard_state[SDL_SCANCODE_RIGHTBRACKET])
        Scale_Object(&test_objects[0],.9);
 
-     if (keyboard_state[MAKE_Z])
+     if (keyboard_state[SDL_SCANCODE_Z])
         if ((view_angle.ang_x+=10)>360)
            view_angle.ang_x = 0;
 
-     if (keyboard_state[MAKE_A])
+     if (keyboard_state[SDL_SCANCODE_A])
         if ((view_angle.ang_x-=10)<0)
            view_angle.ang_x = 360;
 
-     if (keyboard_state[MAKE_X])
+     if (keyboard_state[SDL_SCANCODE_X])
         if ((view_angle.ang_y+=10)>360)
            view_angle.ang_y = 0;
 
-     if (keyboard_state[MAKE_S])
+     if (keyboard_state[SDL_SCANCODE_S])
         if ((view_angle.ang_y-=10)<0)
            view_angle.ang_y = 360;
 
-     if (keyboard_state[MAKE_C])
+     if (keyboard_state[SDL_SCANCODE_C])
         if ((view_angle.ang_z+=10)>360)
            view_angle.ang_z = 0;
 
-     if (keyboard_state[MAKE_D])
+     if (keyboard_state[SDL_SCANCODE_D])
         if ((view_angle.ang_z-=10)<0)
            view_angle.ang_z = 360;
 
-     if (keyboard_state[MAKE_ESC])
+     if (keyboard_state[SDL_SCANCODE_ESCAPE])
         done=1;
 
-     if (keyboard_state[MAKE_Q])
+     if (keyboard_state[SDL_SCANCODE_Q])
         test_objects[0].world_pos.x-=2;
 
-     if (keyboard_state[MAKE_W])
+     if (keyboard_state[SDL_SCANCODE_W])
         test_objects[0].world_pos.x+=2;
 
      Rotate_Object(&test_objects[0],3,6,9);
@@ -305,15 +313,17 @@ while(!done)
 
      Display_Double_Buffer(double_buffer,0);
 
+     _sync();
+
      // lock onto 18 frames per second max
 
-     while((Timer_Query()-starting_time)<1);
+     while((Timer_Query()-starting_time)<CLOCKS_PER_SEC/18);
 
      } // end while
 
 // restore graphics mode back to text
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 // release the z buffer memory
 
@@ -321,7 +331,7 @@ Delete_Z_Buffer();
 
 // restore the old keyboard driver
 
-Keyboard_Remove_Driver();
+//Keyboard_Remove_Driver();
 
 // print out some stats
 
@@ -332,7 +342,3 @@ printf("\nview angle x=%d, y=%d, z=%d",view_angle.ang_x,view_angle.ang_y,view_an
 printf("\nlight source x=%f, y=%f, z=%f",light_source.x,light_source.y,light_source.z);
 
 } // end main
-
-
-
-
\ No newline at end of file
diff --git a/CHAP_15/SORTDEMO.C b/CHAP_15/SORTDEMO.C
index db8eab0..0fa924e 100755
--- a/CHAP_15/SORTDEMO.C
+++ b/CHAP_15/SORTDEMO.C
@@ -1,15 +1,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 #include <search.h>             // this one is needed for qsort()
@@ -18,10 +15,7 @@
 
 #include "black3.h"
 #include "black4.h"
-#include "black5.h"
-#include "black6.h"
 #include "black8.h"
-#include "black9.h"
 #include "black11.h"
 #include "black15.h"
 
@@ -31,7 +25,7 @@ object test_objects[16];                // objects in universe
 
 // M A I N ////////////////////////////////////////////////////////////////////
 
-void main(int argc,char **argv)
+void start_sortdemo(int argc, char **argv, CEga *ega)
 {
 
 int done=0, // exit flag
@@ -67,7 +61,7 @@ for (index=0; index<16; index++)
 
 // set graphics to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // read the 3D color palette off disk
 
@@ -80,10 +74,11 @@ Create_Double_Buffer(200);
 
 // install the isr keyboard driver
 
-Keyboard_Install_Driver();
+//Keyboard_Install_Driver();
 
 // main event loop
-
+// Event handler
+SDL_Event e;
 while(!done)
      {
 
@@ -91,6 +86,17 @@ while(!done)
 
      starting_time = Timer_Query();
 
+     while( SDL_PollEvent( &e ) != 0 )
+      {
+          //User requests quit
+          if( e.type == SDL_QUIT )
+          {
+              done = 1;
+          }
+      }
+          
+      const Uint8* keyboard_state = SDL_GetKeyboardState(NULL);
+
      // erase all objects
 
      // Draw_Poly_List(1);
@@ -101,7 +107,7 @@ while(!done)
 
      // move the light source
 
-     if (keyboard_state[MAKE_T])
+     if (keyboard_state[SDL_SCANCODE_T])
         {
 
         x = light_source.x;
@@ -114,7 +120,7 @@ while(!done)
 
         }
 
-     if (keyboard_state[MAKE_G])
+     if (keyboard_state[SDL_SCANCODE_G])
         {
 
         y = light_source.y;
@@ -127,7 +133,7 @@ while(!done)
 
         }
 
-     if (keyboard_state[MAKE_B])
+     if (keyboard_state[SDL_SCANCODE_B])
         {
 
         z = light_source.z;
@@ -140,7 +146,7 @@ while(!done)
 
         }
 
-     if (keyboard_state[MAKE_Y])
+     if (keyboard_state[SDL_SCANCODE_Y])
         {
 
         x = light_source.x;
@@ -153,7 +159,7 @@ while(!done)
 
         }
 
-     if (keyboard_state[MAKE_H])
+     if (keyboard_state[SDL_SCANCODE_H])
         {
 
         y = light_source.y;
@@ -166,7 +172,7 @@ while(!done)
 
         }
 
-     if (keyboard_state[MAKE_N])
+     if (keyboard_state[SDL_SCANCODE_N])
         {
 
         z = light_source.z;
@@ -181,52 +187,52 @@ while(!done)
 
      // move the viewpoint
 
-     if (keyboard_state[MAKE_UP])
+     if (keyboard_state[SDL_SCANCODE_UP])
         view_point.y+=20;
 
-     if (keyboard_state[MAKE_DOWN])
+     if (keyboard_state[SDL_SCANCODE_DOWN])
         view_point.y-=20;
 
-     if (keyboard_state[MAKE_RIGHT])
+     if (keyboard_state[SDL_SCANCODE_RIGHT])
         view_point.x+=20;
 
-     if (keyboard_state[MAKE_LEFT])
+     if (keyboard_state[SDL_SCANCODE_LEFT])
         view_point.x-=20;
 
-     if (keyboard_state[MAKE_KEYPAD_PLUS])
+     if (keyboard_state[SDL_SCANCODE_EQUALS])
         view_point.z+=20;
 
-     if (keyboard_state[MAKE_KEYPAD_MINUS])
+     if (keyboard_state[SDL_SCANCODE_MINUS])
         view_point.z-=20;
 
 
      // change the viewangles
 
-     if (keyboard_state[MAKE_Z])
+     if (keyboard_state[SDL_SCANCODE_Z])
         if ((view_angle.ang_x+=10)>360)
            view_angle.ang_x = 0;
 
-     if (keyboard_state[MAKE_A])
+     if (keyboard_state[SDL_SCANCODE_A])
         if ((view_angle.ang_x-=10)<0)
            view_angle.ang_x = 360;
 
-     if (keyboard_state[MAKE_X])
+     if (keyboard_state[SDL_SCANCODE_X])
         if ((view_angle.ang_y+=10)>360)
            view_angle.ang_y = 0;
 
-     if (keyboard_state[MAKE_S])
+     if (keyboard_state[SDL_SCANCODE_S])
         if ((view_angle.ang_y-=10)<0)
            view_angle.ang_y = 360;
 
-     if (keyboard_state[MAKE_C])
+     if (keyboard_state[SDL_SCANCODE_C])
         if ((view_angle.ang_z+=10)>360)
            view_angle.ang_z = 0;
 
-     if (keyboard_state[MAKE_D])
+     if (keyboard_state[SDL_SCANCODE_D])
         if ((view_angle.ang_z-=10)<0)
            view_angle.ang_z = 360;
 
-     if (keyboard_state[MAKE_ESC])
+     if (keyboard_state[SDL_SCANCODE_ESCAPE])
         done=1;
 
      // rotate one of the objects
@@ -291,19 +297,21 @@ while(!done)
 
      Display_Double_Buffer(double_buffer,0);
 
+     _sync();
+
      // lock onto 18 frames per second max
 
-     while((Timer_Query()-starting_time)<1);
+     while((Timer_Query()-starting_time)<CLOCKS_PER_SEC/18);
 
      } // end while
 
 // restore graphics mode back to text
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 // restore the old keyboard driver
 
-Keyboard_Remove_Driver();
+//Keyboard_Remove_Driver();
 
 // print out some stats
 
@@ -314,7 +322,3 @@ printf("\nview angle x=%d, y=%d, z=%d",view_angle.ang_x,view_angle.ang_y,view_an
 printf("\nlight source x=%f, y=%f, z=%f",light_source.x,light_source.y,light_source.z);
 
 } // end main
-
-
-
-
\ No newline at end of file
diff --git a/CHAP_15/ZDEMO.C b/CHAP_15/ZDEMO.C
index c720184..4a15aa9 100755
--- a/CHAP_15/ZDEMO.C
+++ b/CHAP_15/ZDEMO.C
@@ -1,15 +1,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 #include <search.h>             // this one is needed for qsort()
@@ -18,16 +15,23 @@
 
 #include "black3.h"
 #include "black4.h"
-#include "black5.h"
-#include "black6.h"
 #include "black8.h"
-#include "black9.h"
 #include "black11.h"
 #include "black15.h"
 
 ///////////////////////////////////////////////////////////////////////////////
 
-void main(void)
+void getch() {
+    _sync();
+    SDL_Event event;
+    while(1) {    // wait for input to break
+        SDL_PollEvent(&event);
+        if(event.type == SDL_KEYDOWN)
+            return;
+    }
+}
+
+void start_zdemo(CEga *ega)
 {
 
 int x=160,  // local position of object
@@ -36,7 +40,7 @@ int x=160,  // local position of object
 
 // set graphics to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // point double buffer at video buffer, so we can see output without an
 // animation loop
@@ -64,18 +68,18 @@ Draw_Tri_3D_Z(x+10,y+10,z-5,
               x+30,y+20,z-2,
               1);
 
+_sync();
+
 // wait for keyboard hit
 
-while(!kbhit());
+getch();
 
 // restore graphics mode back to text
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 // release the z buffer memory
 
 Delete_Z_Buffer();
 
 } // end main
-
-
\ No newline at end of file
diff --git a/CHAP_16/HostApp/CHAP16.xcodeproj/project.pbxproj b/CHAP_16/HostApp/CHAP16.xcodeproj/project.pbxproj
new file mode 100644
index 0000000..0de1cc7
--- /dev/null
+++ b/CHAP_16/HostApp/CHAP16.xcodeproj/project.pbxproj
@@ -0,0 +1,350 @@
+// !$*UTF8*$!
+{
+	archiveVersion = 1;
+	classes = {
+	};
+	objectVersion = 50;
+	objects = {
+
+/* Begin PBXBuildFile section */
+		2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 2DA6C5AF258AA66B002B1931 /* main.cpp */; };
+		3E017B4428ECB33A00D286E9 /* BLACK8.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E017B4328ECB33A00D286E9 /* BLACK8.C */; };
+		3E3C579628E883D700637704 /* BLACK3.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E3C579528E883D300637704 /* BLACK3.C */; };
+		3E9680F9292A51C600B57884 /* VOXEL.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E9680F7292A517B00B57884 /* VOXEL.C */; };
+		3E9680FB292A53E900B57884 /* VOXTERR3.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3E9680FA292A53E100B57884 /* VOXTERR3.PCX */; };
+		3EF00A5928E9A177000AC74A /* BLACK4.C in Sources */ = {isa = PBXBuildFile; fileRef = 3EF00A4F28E99F84000AC74A /* BLACK4.C */; };
+/* End PBXBuildFile section */
+
+/* Begin PBXCopyFilesBuildPhase section */
+		2DA6C5AA258AA66B002B1931 /* CopyFiles */ = {
+			isa = PBXCopyFilesBuildPhase;
+			buildActionMask = 12;
+			dstPath = "";
+			dstSubfolderSpec = 16;
+			files = (
+				3E9680FB292A53E900B57884 /* VOXTERR3.PCX in CopyFiles */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXCopyFilesBuildPhase section */
+
+/* Begin PBXFileReference section */
+		2D2793D725AD90B500DEC620 /* font.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = font.h; sourceTree = "<group>"; };
+		2D9EAF1F258E6A4300297C9C /* sdl.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = sdl.h; sourceTree = "<group>"; };
+		2D9EAF26258E750E00297C9C /* HostApp.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = HostApp.entitlements; sourceTree = "<group>"; };
+		2DA6C5AC258AA66B002B1931 /* CHAP16 */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = CHAP16; sourceTree = BUILT_PRODUCTS_DIR; };
+		2DA6C5AF258AA66B002B1931 /* main.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = main.cpp; sourceTree = "<group>"; };
+		2DB9F18C258EA679000A3299 /* ega.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = ega.h; sourceTree = "<group>"; };
+		3E017B4228ECB33A00D286E9 /* BLACK8.H */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.h; name = BLACK8.H; path = ../../../CHAP_8/BLACK8.H; sourceTree = "<group>"; };
+		3E017B4328ECB33A00D286E9 /* BLACK8.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK8.C; path = ../../../CHAP_8/BLACK8.C; sourceTree = "<group>"; };
+		3E2CDEB328F0B76F00594EB2 /* BLACK11.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK11.C; path = ../../../CHAP_11/BLACK11.C; sourceTree = "<group>"; };
+		3E2CDEB428F0B76F00594EB2 /* BLACK11.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK11.H; path = ../../../CHAP_11/BLACK11.H; sourceTree = "<group>"; };
+		3E3C579428E883D300637704 /* BLACK3.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK3.H; path = ../../../CHAP_3/BLACK3.H; sourceTree = "<group>"; };
+		3E3C579528E883D300637704 /* BLACK3.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK3.C; path = ../../../CHAP_3/BLACK3.C; sourceTree = "<group>"; };
+		3E9680F7292A517B00B57884 /* VOXEL.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = VOXEL.C; path = ../../VOXEL.C; sourceTree = "<group>"; };
+		3E9680F8292A518A00B57884 /* VOXEL.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = VOXEL.h; sourceTree = "<group>"; };
+		3E9680FA292A53E100B57884 /* VOXTERR3.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = VOXTERR3.PCX; path = ../../VOXTERR3.PCX; sourceTree = "<group>"; };
+		3EF00A4E28E99F84000AC74A /* BLACK4.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK4.H; path = ../../../CHAP_4/BLACK4.H; sourceTree = "<group>"; };
+		3EF00A4F28E99F84000AC74A /* BLACK4.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK4.C; path = ../../../CHAP_4/BLACK4.C; sourceTree = "<group>"; };
+		EE5BE75C2914126C0099C55B /* BLACK15.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK15.C; path = ../../../CHAP_15/BLACK15.C; sourceTree = "<group>"; };
+		EE5BE75D2914126C0099C55B /* BLACK15.H */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.h; name = BLACK15.H; path = ../../../CHAP_15/BLACK15.H; sourceTree = "<group>"; };
+/* End PBXFileReference section */
+
+/* Begin PBXFrameworksBuildPhase section */
+		2DA6C5A9258AA66B002B1931 /* Frameworks */ = {
+			isa = PBXFrameworksBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXFrameworksBuildPhase section */
+
+/* Begin PBXGroup section */
+		2DA6C5A3258AA66B002B1931 = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AE258AA66B002B1931 /* HostApp */,
+				2DA6C5AD258AA66B002B1931 /* Products */,
+			);
+			sourceTree = "<group>";
+		};
+		2DA6C5AD258AA66B002B1931 /* Products */ = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AC258AA66B002B1931 /* CHAP16 */,
+			);
+			name = Products;
+			sourceTree = "<group>";
+		};
+		2DA6C5AE258AA66B002B1931 /* HostApp */ = {
+			isa = PBXGroup;
+			children = (
+				2D9EAF26258E750E00297C9C /* HostApp.entitlements */,
+				2DA6C5AF258AA66B002B1931 /* main.cpp */,
+				2D9EAF1F258E6A4300297C9C /* sdl.h */,
+				2DB9F18C258EA679000A3299 /* ega.h */,
+				2D2793D725AD90B500DEC620 /* font.h */,
+				3E3C579528E883D300637704 /* BLACK3.C */,
+				3E3C579428E883D300637704 /* BLACK3.H */,
+				3EF00A4F28E99F84000AC74A /* BLACK4.C */,
+				3EF00A4E28E99F84000AC74A /* BLACK4.H */,
+				3E017B4328ECB33A00D286E9 /* BLACK8.C */,
+				3E017B4228ECB33A00D286E9 /* BLACK8.H */,
+				3E2CDEB328F0B76F00594EB2 /* BLACK11.C */,
+				3E2CDEB428F0B76F00594EB2 /* BLACK11.H */,
+				EE5BE75C2914126C0099C55B /* BLACK15.C */,
+				EE5BE75D2914126C0099C55B /* BLACK15.H */,
+				3E9680F7292A517B00B57884 /* VOXEL.C */,
+				3E9680F8292A518A00B57884 /* VOXEL.h */,
+				3E9680FA292A53E100B57884 /* VOXTERR3.PCX */,
+			);
+			path = HostApp;
+			sourceTree = "<group>";
+		};
+/* End PBXGroup section */
+
+/* Begin PBXNativeTarget section */
+		2DA6C5AB258AA66B002B1931 /* CHAP16 */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = 2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP16" */;
+			buildPhases = (
+				2DA6C5A8258AA66B002B1931 /* Sources */,
+				2DA6C5A9258AA66B002B1931 /* Frameworks */,
+				2DA6C5AA258AA66B002B1931 /* CopyFiles */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+			);
+			name = CHAP16;
+			productName = CicParserSim;
+			productReference = 2DA6C5AC258AA66B002B1931 /* CHAP16 */;
+			productType = "com.apple.product-type.tool";
+		};
+/* End PBXNativeTarget section */
+
+/* Begin PBXProject section */
+		2DA6C5A4258AA66B002B1931 /* Project object */ = {
+			isa = PBXProject;
+			attributes = {
+				LastUpgradeCheck = 1240;
+				TargetAttributes = {
+					2DA6C5AB258AA66B002B1931 = {
+						CreatedOnToolsVersion = 12.2;
+					};
+				};
+			};
+			buildConfigurationList = 2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP16" */;
+			compatibilityVersion = "Xcode 9.3";
+			developmentRegion = en;
+			hasScannedForEncodings = 0;
+			knownRegions = (
+				en,
+				Base,
+			);
+			mainGroup = 2DA6C5A3258AA66B002B1931;
+			productRefGroup = 2DA6C5AD258AA66B002B1931 /* Products */;
+			projectDirPath = "";
+			projectRoot = "";
+			targets = (
+				2DA6C5AB258AA66B002B1931 /* CHAP16 */,
+			);
+		};
+/* End PBXProject section */
+
+/* Begin PBXSourcesBuildPhase section */
+		2DA6C5A8258AA66B002B1931 /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				3E017B4428ECB33A00D286E9 /* BLACK8.C in Sources */,
+				2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */,
+				3EF00A5928E9A177000AC74A /* BLACK4.C in Sources */,
+				3E3C579628E883D700637704 /* BLACK3.C in Sources */,
+				3E9680F9292A51C600B57884 /* VOXEL.C in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXSourcesBuildPhase section */
+
+/* Begin XCBuildConfiguration section */
+		2DA6C5B1258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = dwarf;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				ENABLE_TESTABILITY = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_OPTIMIZATION_LEVEL = 0;
+				GCC_PREPROCESSOR_DEFINITIONS = (
+					"DEBUG=1",
+					"$(inherited)",
+				);
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Debug;
+		};
+		2DA6C5B2258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				ENABLE_NS_ASSERTIONS = NO;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = NO;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Release;
+		};
+		2DA6C5B4258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = (
+					/opt/homebrew/include/SDL2,
+					/usr/local/include/SDL2,
+				);
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/lib",
+					"-L/usr/local/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Debug;
+		};
+		2DA6C5B5258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = (
+					/opt/homebrew/include/SDL2,
+					/usr/local/include/SDL2,
+				);
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/lib",
+					"-L/usr/local/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Release;
+		};
+/* End XCBuildConfiguration section */
+
+/* Begin XCConfigurationList section */
+		2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP16" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B1258AA66B002B1931 /* Debug */,
+				2DA6C5B2258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP16" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B4258AA66B002B1931 /* Debug */,
+				2DA6C5B5258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+/* End XCConfigurationList section */
+	};
+	rootObject = 2DA6C5A4258AA66B002B1931 /* Project object */;
+}
diff --git a/CHAP_16/HostApp/CHAP16.xcodeproj/project.xcworkspace/contents.xcworkspacedata b/CHAP_16/HostApp/CHAP16.xcodeproj/project.xcworkspace/contents.xcworkspacedata
new file mode 100644
index 0000000..1c1d3b1
--- /dev/null
+++ b/CHAP_16/HostApp/CHAP16.xcodeproj/project.xcworkspace/contents.xcworkspacedata
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "self:/Users/ac27/Dev/black_art/black_art_3d_revival/CHAP_16/HostApp/CHAP16.xcodeproj">
+   </FileRef>
+</Workspace>
diff --git a/CHAP_16/HostApp/CHAP16.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist b/CHAP_16/HostApp/CHAP16.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
new file mode 100644
index 0000000..18d9810
--- /dev/null
+++ b/CHAP_16/HostApp/CHAP16.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IDEDidComputeMac32BitWarning</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_16/HostApp/CHAP16.xcodeproj/xcshareddata/xcschemes/CHAP16.xcscheme b/CHAP_16/HostApp/CHAP16.xcodeproj/xcshareddata/xcschemes/CHAP16.xcscheme
new file mode 100644
index 0000000..b9edb87
--- /dev/null
+++ b/CHAP_16/HostApp/CHAP16.xcodeproj/xcshareddata/xcschemes/CHAP16.xcscheme
@@ -0,0 +1,89 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "1400"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+               BuildableName = "CHAP16"
+               BlueprintName = "CHAP16"
+               ReferencedContainer = "container:CHAP16.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES">
+      <Testables>
+      </Testables>
+   </TestAction>
+   <LaunchAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      debugServiceExtension = "internal"
+      allowLocationSimulation = "YES"
+      viewDebuggingEnabled = "No">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+            BuildableName = "CHAP16"
+            BlueprintName = "CHAP16"
+            ReferencedContainer = "container:CHAP16.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+      <CommandLineArguments>
+         <CommandLineArgument
+            argument = "VOXTERR3.PCX"
+            isEnabled = "YES">
+         </CommandLineArgument>
+         <CommandLineArgument
+            argument = "10"
+            isEnabled = "YES">
+         </CommandLineArgument>
+      </CommandLineArguments>
+   </LaunchAction>
+   <ProfileAction
+      buildConfiguration = "Release"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      debugDocumentVersioning = "YES">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+            BuildableName = "CHAP16"
+            BlueprintName = "CHAP16"
+            ReferencedContainer = "container:CHAP16.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff --git a/CHAP_16/HostApp/HostApp/BSPDEMO.h b/CHAP_16/HostApp/HostApp/BSPDEMO.h
new file mode 100644
index 0000000..5a9ca75
--- /dev/null
+++ b/CHAP_16/HostApp/HostApp/BSPDEMO.h
@@ -0,0 +1,13 @@
+//
+//  BSPDEMO.h
+//  CHAP15
+//
+//  Created by Tosha on 06/11/2022.
+//
+
+#ifndef BSPDEMO_h
+#define BSPDEMO_h
+
+void start_bspdemo(CEga *ega, int pixelSize);
+
+#endif /* BSPDEMO_h */
diff --git a/CHAP_16/HostApp/HostApp/HostApp.entitlements b/CHAP_16/HostApp/HostApp/HostApp.entitlements
new file mode 100644
index 0000000..8cc185a
--- /dev/null
+++ b/CHAP_16/HostApp/HostApp/HostApp.entitlements
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>com.apple.security.cs.disable-library-validation</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_16/HostApp/HostApp/VOXEL.h b/CHAP_16/HostApp/HostApp/VOXEL.h
new file mode 100644
index 0000000..0562822
--- /dev/null
+++ b/CHAP_16/HostApp/HostApp/VOXEL.h
@@ -0,0 +1,13 @@
+//
+//  VOXEL.h
+//  CHAP16
+//
+//  Created by Tosha on 20/11/2022.
+//
+
+#ifndef VOXEL_h
+#define VOXEL_h
+
+void start_voxel(int argc, char **argv, CEga *ega);
+
+#endif /* VOXEL_h */
diff --git a/CHAP_16/HostApp/HostApp/ega.h b/CHAP_16/HostApp/HostApp/ega.h
new file mode 100644
index 0000000..b19dc71
--- /dev/null
+++ b/CHAP_16/HostApp/HostApp/ega.h
@@ -0,0 +1,63 @@
+#ifndef EGA_h
+#define EGA_h
+
+#include "font.h"
+
+typedef uint16_t WORD;
+typedef uint8_t BYTE;
+typedef uint8_t FLAG;
+typedef uint16_t WORD;
+
+typedef uint32_t DWORD;
+
+class CVideoAdapter
+{
+public:
+	virtual DWORD GetPixel(int x, int y, int p) = 0;
+};
+
+class CEga : public CVideoAdapter
+{
+	enum {
+		MemSize = 0x10000*2
+	};
+
+public:
+	DWORD memory[MemSize];
+
+    // https://www.ditig.com/256-colors-cheat-sheet
+    // Note: first 16 colors are from VGA palette, rest is from Xterm
+    DWORD palette[256] = {
+        0x000000, 0x0000b0, 0x00b000, 0x00b0b0, 0xb00000, 0xb000b0, 0xb0b000, 0xb0b0b0,
+        0x808080, 0x0000ff, 0x00ff00, 0x00ffff, 0xff0000, 0xff00ff, 0xffff00, 0xffffff, 0x000000, 0x00005f, 0x000087, 0x0000af, 0x0000d7, 0x0000ff, 0x005f00, 0x005f5f, 0x005f87, 0x005faf, 0x005fd7, 0x005fff, 0x008700, 0x00875f, 0x008787, 0x0087af, 0x0087d7, 0x0087ff, 0x00af00, 0x00af5f, 0x00af87, 0x00afaf, 0x00afd7, 0x00afff, 0x00d700, 0x00d75f, 0x00d787, 0x00d7af, 0x00d7d7, 0x00d7ff, 0x00ff00, 0x00ff5f, 0x00ff87, 0x00ffaf, 0x00ffd7, 0x00ffff, 0x5f0000, 0x5f005f, 0x5f0087, 0x5f00af, 0x5f00d7, 0x5f00ff, 0x5f5f00, 0x5f5f5f, 0x5f5f87, 0x5f5faf, 0x5f5fd7, 0x5f5fff, 0x5f8700, 0x5f875f, 0x5f8787, 0x5f87af, 0x5f87d7, 0x5f87ff, 0x5faf00, 0x5faf5f, 0x5faf87, 0x5fafaf, 0x5fafd7, 0x5fafff, 0x5fd700, 0x5fd75f, 0x5fd787, 0x5fd7af, 0x5fd7d7, 0x5fd7ff, 0x5fff00, 0x5fff5f, 0x5fff87, 0x5fffaf, 0x5fffd7, 0x5fffff, 0x870000, 0x87005f, 0x870087, 0x8700af, 0x8700d7, 0x8700ff, 0x875f00, 0x875f5f, 0x875f87, 0x875faf, 0x875fd7, 0x875fff, 0x878700, 0x87875f, 0x878787, 0x8787af, 0x8787d7, 0x8787ff, 0x87af00, 0x87af5f, 0x87af87, 0x87afaf, 0x87afd7, 0x87afff, 0x87d700, 0x87d75f, 0x87d787, 0x87d7af, 0x87d7d7, 0x87d7ff, 0x87ff00, 0x87ff5f, 0x87ff87, 0x87ffaf, 0x87ffd7, 0x87ffff, 0xaf0000, 0xaf005f, 0xaf0087, 0xaf00af, 0xaf00d7, 0xaf00ff, 0xaf5f00, 0xaf5f5f, 0xaf5f87, 0xaf5faf, 0xaf5fd7, 0xaf5fff, 0xaf8700, 0xaf875f, 0xaf8787, 0xaf87af, 0xaf87d7, 0xaf87ff, 0xafaf00, 0xafaf5f, 0xafaf87, 0xafafaf, 0xafafd7, 0xafafff, 0xafd700, 0xafd75f, 0xafd787, 0xafd7af, 0xafd7d7, 0xafd7ff, 0xafff00, 0xafff5f, 0xafff87, 0xafffaf, 0xafffd7, 0xafffff, 0xd70000, 0xd7005f, 0xd70087, 0xd700af, 0xd700d7, 0xd700ff, 0xd75f00, 0xd75f5f, 0xd75f87, 0xd75faf, 0xd75fd7, 0xd75fff, 0xd78700, 0xd7875f, 0xd78787, 0xd787af, 0xd787d7, 0xd787ff, 0xd7af00, 0xd7af5f, 0xd7af87, 0xd7afaf, 0xd7afd7, 0xd7afff, 0xd7d700, 0xd7d75f, 0xd7d787, 0xd7d7af, 0xd7d7d7, 0xd7d7ff, 0xd7ff00, 0xd7ff5f, 0xd7ff87, 0xd7ffaf, 0xd7ffd7, 0xd7ffff, 0xff0000, 0xff005f, 0xff0087, 0xff00af, 0xff00d7, 0xff00ff, 0xff5f00, 0xff5f5f, 0xff5f87, 0xff5faf, 0xff5fd7, 0xff5fff, 0xff8700, 0xff875f, 0xff8787, 0xff87af, 0xff87d7, 0xff87ff, 0xffaf00, 0xffaf5f, 0xffaf87, 0xffafaf, 0xffafd7, 0xffafff, 0xffd700, 0xffd75f, 0xffd787, 0xffd7af, 0xffd7d7, 0xffd7ff, 0xffff00, 0xffff5f, 0xffff87, 0xffffaf, 0xffffd7, 0xffffff, 0x080808, 0x121212, 0x1c1c1c, 0x262626, 0x303030, 0x3a3a3a, 0x444444, 0x4e4e4e, 0x585858, 0x626262, 0x6c6c6c, 0x767676, 0x808080, 0x8a8a8a, 0x949494, 0x9e9e9e, 0xa8a8a8, 0xb2b2b2, 0xbcbcbc, 0xc6c6c6, 0xd0d0d0, 0xdadada, 0xe4e4e4, 0xeeeeee
+    };
+
+public:
+	CEga()
+	{
+        memset(memory, 0, sizeof(memory));
+	}
+	
+    void SetPaletteIndex(int index, int rgb)
+    {
+        int r = ((rgb & 4) ? 2 : 0) + ((rgb & 32) ? 1 : 0);
+        int g = ((rgb & 2) ? 2 : 0) + ((rgb & 16) ? 1 : 0);
+        int b = ((rgb & 1) ? 2 : 0) + ((rgb & 8) ? 1 : 0);
+        r = r * 255 / 3;
+        g = g * 255 / 3;
+        b = b * 255 / 3;
+        palette[index] = b | (g << 8) | (r << 16);
+
+    }
+    
+	virtual DWORD GetPixel(int x, int y, int page = -1) override
+	{
+        BYTE* _video = (BYTE*)memory;
+        int idx = (int)_video[((y<<8) + (y<<6)) + x];
+        return palette[idx];
+	}
+};
+
+void _sync();
+
+#endif
diff --git a/CHAP_16/HostApp/HostApp/font.h b/CHAP_16/HostApp/HostApp/font.h
new file mode 100644
index 0000000..8be86b2
--- /dev/null
+++ b/CHAP_16/HostApp/HostApp/font.h
@@ -0,0 +1,313 @@
+#ifndef FONT_h
+#define FONT_h
+
+#pragma once
+
+// http://www.hampa.ch/pce/download.html
+// genoa-ega-2.41.rom
+// dd if=genoa-ega-2.41.rom of=font bs=1 skip=8224 count=3584
+// xxd -i font > font.h
+
+static const uint8_t font[] = {
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81,
+  0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xff,
+  0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
+  0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
+  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff,
+  0xff, 0xff, 0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc,
+  0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30,
+  0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x63,
+  0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06,
+  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66,
+  0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xdb,
+  0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c,
+  0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c,
+  0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c,
+  0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06,
+  0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6,
+  0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c,
+  0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x30,
+  0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c,
+  0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38, 0x78, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c,
+  0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66,
+  0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0,
+  0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x6c,
+  0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66,
+  0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x0c,
+  0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66,
+  0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
+  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60,
+  0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x30, 0x30, 0x30,
+  0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0,
+  0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
+  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xff, 0x00, 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76,
+  0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66,
+  0x3c, 0x00, 0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66,
+  0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec,
+  0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60,
+  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c,
+  0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30,
+  0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38,
+  0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38,
+  0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66,
+  0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00, 0x00,
+  0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc,
+  0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x38,
+  0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
+  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe,
+  0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x38,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x66,
+  0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x60,
+  0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c,
+  0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x76,
+  0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x6c,
+  0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00, 0x10,
+  0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00, 0x00, 0xc6,
+  0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60,
+  0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xcc, 0xcc,
+  0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x0e,
+  0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
+  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
+  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
+  0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
+  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06,
+  0x06, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c,
+  0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c,
+  0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x44, 0x11, 0x44,
+  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x55, 0xaa,
+  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
+  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
+  0xdd, 0x77, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
+  0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff,
+  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
+  0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
+  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
+  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30,
+  0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c,
+  0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c,
+  0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00,
+  0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e,
+  0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18,
+  0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00,
+  0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c,
+  0x1c, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8,
+  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+};
+
+#endif
diff --git a/CHAP_16/HostApp/HostApp/main.cpp b/CHAP_16/HostApp/HostApp/main.cpp
new file mode 100644
index 0000000..3f0166e
--- /dev/null
+++ b/CHAP_16/HostApp/HostApp/main.cpp
@@ -0,0 +1,58 @@
+//
+//  main.cpp
+//  HostApp
+//
+//
+
+#include <iostream>
+#include <vector>
+#include <sstream>
+#include <iomanip>
+#include <list>
+
+#include "sdl.h"
+#include "ega.h"
+
+#include "VOXEL.h"
+
+CEga mVideo;
+CSdl mSdl;
+std::list<int> keyboardBuffer;
+
+void onKey(int k, int p)
+{
+    if (!p)
+        return;
+
+    int key = 0;
+    switch (k)
+    {
+        case SDL_SCANCODE_UP: key = 0x4800; break;
+        case SDL_SCANCODE_DOWN: key = 0x5000; break;
+        case SDL_SCANCODE_LEFT: key = 0x4b00; break;
+        case SDL_SCANCODE_RIGHT: key = 0x4d00; break;
+        case SDL_SCANCODE_SPACE: key = 0x3920; break;
+        case SDL_SCANCODE_RETURN: key = 0x1c0d; break;
+    }
+
+    if (key)
+    {
+        keyboardBuffer.push_back(key);
+    }
+}
+
+void _sync()
+{
+    for (int y=0; y<mSdl.Height; y++)
+      for (int x=0; x<mSdl.Width; x++)
+        mSdl.SetPixel(x, y, mVideo.GetPixel(x, y));
+    
+    mSdl.Loop();
+}
+
+int main(int argc, char * argv[]) {
+    mSdl.Init();
+    start_voxel(argc, argv, &mVideo);
+    mSdl.Deinit();
+    return 0;
+}
diff --git a/CHAP_16/HostApp/HostApp/sdl.h b/CHAP_16/HostApp/HostApp/sdl.h
new file mode 100644
index 0000000..7b6b0d5
--- /dev/null
+++ b/CHAP_16/HostApp/HostApp/sdl.h
@@ -0,0 +1,144 @@
+#ifndef SDL_h
+#define SDL_h
+
+typedef uint32_t Uint32;
+#include <SDL.h>
+#include <SDL_render.h>
+
+void onKey(int k, int p);
+
+class CSdl
+{
+    
+    std::vector< unsigned char > pixels;
+
+    SDL_Renderer* renderer{nullptr};
+    SDL_Texture* texture{nullptr};
+    SDL_Window* window{nullptr};
+    bool running{true};
+    int lastKey{0};
+
+public:
+    const int pixelSize = 2;
+    enum {
+        Width = 320,//640,
+        Height = 200//350
+    };
+
+    void Init()
+    {
+        pixels.resize(Width*Height*4);
+        SDL_Init( SDL_INIT_EVERYTHING );
+        atexit( SDL_Quit );
+        
+        window = SDL_CreateWindow
+        (
+         "BlackArt simulator",
+         SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
+         Width*pixelSize, Height*pixelSize,
+         SDL_WINDOW_SHOWN
+         );
+        
+        renderer = SDL_CreateRenderer
+        (
+         window,
+         -1,
+         SDL_RENDERER_ACCELERATED
+         );
+
+        texture = SDL_CreateTexture
+        (
+         renderer,
+         SDL_PIXELFORMAT_ARGB8888,
+         SDL_TEXTUREACCESS_STREAMING,
+         Width, Height
+         );
+    }
+    
+    void Blit()
+    {
+        SDL_SetRenderDrawColor( renderer, 0, 0, 0, SDL_ALPHA_OPAQUE );
+        SDL_RenderClear( renderer );
+        
+        SDL_UpdateTexture
+        (
+         texture,
+         NULL,
+         &pixels[0],
+         Width * 4
+         );
+        
+        SDL_RenderCopy( renderer, texture, NULL, NULL );
+        SDL_RenderPresent( renderer );
+    }
+    
+    void Loop()
+    {
+//        SDL_Event event;
+//
+//        while( SDL_PollEvent( &event ) )
+//        {
+//            if (SDL_KEYDOWN == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 1);
+//            }
+//
+//            if (SDL_KEYUP == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 0);
+//            }
+//
+//            if( ( SDL_QUIT == event.type ) ||
+//               ( SDL_KEYDOWN == event.type && SDL_SCANCODE_ESCAPE == event.key.keysym.scancode ) )
+//            {
+//                running = false;
+//                break;
+//            }
+//        }
+        
+        Blit();
+
+        //const Uint64 end = SDL_GetPerformanceCounter();
+        //const static Uint64 freq = SDL_GetPerformanceFrequency();
+        //const double seconds = ( end - start ) / static_cast< double >( freq );
+        //std::cout << "Frame time: " << seconds * 1000.0 << "ms" << std::endl;
+//        if (running)
+//            SDL_Delay(20);
+    }
+    
+    void Deinit()
+    {
+        SDL_DestroyRenderer( renderer );
+        SDL_DestroyWindow( window );
+        SDL_Quit();
+    }
+    
+    void SetPixel(int x, int y, uint32_t c)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        pixels[ offset + 0 ] = (uint8_t)c;
+        pixels[ offset + 1 ] = (uint8_t)(c >> 8);
+        pixels[ offset + 2 ] = (uint8_t)(c >> 16);
+        pixels[ offset + 3 ] = SDL_ALPHA_OPAQUE;
+    }
+
+    uint32_t GetPixel(int x, int y)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        int b = pixels[ offset + 0 ];
+        int g = pixels[ offset + 1 ];
+        int r = pixels[ offset + 2 ];
+        return r | (g << 8) | (b << 16);
+    }
+
+};
+
+#endif
diff --git a/CHAP_16/VOXEL.C b/CHAP_16/VOXEL.C
index 9064b43..ea34609 100755
--- a/CHAP_16/VOXEL.C
+++ b/CHAP_16/VOXEL.C
@@ -3,21 +3,17 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 
 #include "black3.h"
 #include "black4.h"
-#include "black5.h"
 
 // D E F I N E S /////////////////////////////////////////////////////////////
 
@@ -81,7 +77,7 @@ void Line_VDB(int y1,int y2,int x,int color)
 // used since the pixel addresses are no longer contiguous in memory
 // note that the end points of the line must be on the screen
 
-unsigned char far *start_offset; // starting memory offset of line
+unsigned char *start_offset; // starting memory offset of line
 
 int index, // loop index
     temp;  // used for temporary storage during swap
@@ -256,7 +252,7 @@ for (ray=1; ray<320; ray++)
 
 // M A I N //////////////////////////////////////////////////////////////////
 
-void main(int argc, char **argv)
+void start_voxel(int argc, char **argv, CEga *ega)
 {
 char buffer[80];
 
@@ -281,7 +277,7 @@ if (argc<=2)
 
 // set the graphics mode to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // create a double buffer
 
@@ -300,7 +296,7 @@ if (!Initialize(argv[1]))
 
 // install keyboard driver
 
-Keyboard_Install_Driver();
+//Keyboard_Install_Driver();
 
 // set scale of mountains
 
@@ -317,7 +313,8 @@ Draw_Terrain(play_x,
 Display_Double_Buffer(double_buffer,0);
 
 // main event loop
-
+// Event handler
+SDL_Event e;
 while(!done)
      {
 
@@ -327,50 +324,51 @@ while(!done)
 
      // test if user is hitting keyboard
 
-     if (keys_active)
+     if (SDL_PollEvent( &e ) != 0)
         {
         // what is user trying to do
+        const Uint8* keyboard_state = SDL_GetKeyboardState(NULL);
 
         // change viewing distance
 
-        if (keyboard_state[MAKE_F])
+        if (keyboard_state[SDL_SCANCODE_F])
            play_dist+=10;
 
-        if (keyboard_state[MAKE_C])
+        if (keyboard_state[SDL_SCANCODE_C])
            play_dist-=10;
 
         // change viewing height
 
-        if (keyboard_state[MAKE_U])
+        if (keyboard_state[SDL_SCANCODE_U])
            play_z+=10;
 
-        if (keyboard_state[MAKE_D])
+        if (keyboard_state[SDL_SCANCODE_D])
            play_z-=10;
 
 
         // change viewing position
 
-        if (keyboard_state[MAKE_RIGHT])
+        if (keyboard_state[SDL_SCANCODE_RIGHT])
             if ((play_ang+=ANGLE_5) >= ANGLE_360)
                play_ang-=ANGLE_360;
 
-        if (keyboard_state[MAKE_LEFT])
+        if (keyboard_state[SDL_SCANCODE_LEFT])
             if ((play_ang-=ANGLE_5) < 0)
                play_ang+=ANGLE_360;
 
         // move foward
 
-        if (keyboard_state[MAKE_UP])
+        if (keyboard_state[SDL_SCANCODE_UP])
            speed=20;
 
         // move backward
 
-        if (keyboard_state[MAKE_DOWN])
+        if (keyboard_state[SDL_SCANCODE_DOWN])
            speed=-20;
 
         // exit demo
 
-        if (keyboard_state[MAKE_ESC])
+        if (keyboard_state[SDL_SCANCODE_ESCAPE])
            done=1;
 
 
@@ -402,9 +400,10 @@ while(!done)
         Print_String_DB(0,0,10,buffer,0);
 
         sprintf(buffer,"Pos: X=%d, Y=%d, Z=%d    ",play_x,play_y,play_z);
-        Print_String_DB(0,10,10,buffer,0);
+        Print_String_DB(0,ROM_CHAR_HEIGHT+2,10,buffer,0);
 
         Display_Double_Buffer(double_buffer,0);
+        _sync();
 
         } // end if
 
@@ -412,14 +411,10 @@ while(!done)
 
 // reset back to text mode
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 // remove the keyboard handler
 
-Keyboard_Remove_Driver();
+//Keyboard_Remove_Driver();
 
 } // end main
-
-
-
-
\ No newline at end of file
diff --git a/CHAP_17/BLACK17.C b/CHAP_17/BLACK17.C
index fc5f821..4ca8048 100755
--- a/CHAP_17/BLACK17.C
+++ b/CHAP_17/BLACK17.C
@@ -1,15 +1,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 #include <search.h>             // this one is needed for qsort()
@@ -18,10 +15,7 @@
 
 #include "black3.h"
 #include "black4.h"
-#include "black5.h"
-#include "black6.h"
 #include "black8.h"
-#include "black9.h"
 #include "black17.h"
 
 // G L O B A L S //////////////////////////////////////////////////////////////
@@ -77,7 +71,7 @@ sprite textures;                                // this holds the textures
 
 // F U N C T I O N S /////////////////////////////////////////////////////////
 
-void Triangle_Line(unsigned char far *dest_addr,
+void Triangle_Line(unsigned char *dest_addr,
                    unsigned int xs,
                    unsigned int xe,
                    int color)
@@ -132,7 +126,7 @@ _asm
 
 ////////////////////////////////////////////////////////////////////////////////
 
-void Triangle_QLine(unsigned char far *dest_addr,
+void Triangle_QLine(unsigned char *dest_addr,
                     unsigned int xs,
                     unsigned int xe,
                     unsigned int color)
@@ -279,7 +273,7 @@ int temp_x,        // used during sorting as temps
     right,         // used by clipping
     left;
 
-unsigned char far *dest_addr;
+unsigned char *dest_addr;
 
 // test order of x1 and x2
 
@@ -420,7 +414,7 @@ int temp_x,        // used during sorting as temps
     right,         // used by clipping
     left;
 
-unsigned char far *dest_addr;
+unsigned char *dest_addr;
 
 // test order of x1 and x2
 
@@ -3097,22 +3091,22 @@ color = icolor | (icolor << 8);
 
 color = color | (color<<16);
 
-fquadset((void far *)double_buffer,color,(double_buffer_size >> 1));
+fquadset((void *)double_buffer,color,(double_buffer_size >> 1));
 
 } // end Fill_Double_Buffer_32
 
 //////////////////////////////////////////////////////////////////////////////
 
-void Display_Double_Buffer_32(unsigned char far *buffer,int y)
+void Display_Double_Buffer_32(unsigned char *buffer,int y)
 {
 // this functions copies the double buffer into the video buffer at the
 // starting y location using quad byte transfers
 
-fquadcpy((void far *)(video_buffer+y*320),
-         (void far *)double_buffer,
+fquadcpy((void *)(video_buffer+y*320),
+         (void *)double_buffer,
          (double_buffer_size >> 1));
 
 } // end Display_Double_Buffer_32
 
 
-
\ No newline at end of file
+
diff --git a/CHAP_17/BLACK17.H b/CHAP_17/BLACK17.H
index 8418bc4..ed82416 100755
--- a/CHAP_17/BLACK17.H
+++ b/CHAP_17/BLACK17.H
@@ -295,7 +295,7 @@ void Draw_Top_Triangle(int x1,int y1, int x2,int y2, int x3,int y3,int color);
 
 void Draw_Bottom_Triangle(int x1,int y1, int x2,int y2, int x3,int y3,int color);
 
-void Triangle_Line(unsigned char far *dest_addr,
+void Triangle_Line(unsigned char *dest_addr,
                    unsigned int xs,
                    unsigned int xe,
                    int color);
@@ -310,28 +310,28 @@ void Make_Grey_Palette(void);
 
 // new 32 bit functions
 
-void Display_Double_Buffer_32(unsigned char far *buffer,int y);
+void Display_Double_Buffer_32(unsigned char *buffer,int y);
 
 void Fill_Double_Buffer_32(int color);
 
 // external assembly language functions
 
-void fquadcpy(void far *dest, void far *source, long count);
+void fquadcpy(void *dest, void *source, long count);
 
-void fquadset(void far *dest, long data, long count);
+void fquadset(void *dest, long data, long count);
 
-void Triangle_32Line(unsigned char far *dest_addr,
+void Triangle_32Line(unsigned char *dest_addr,
                      unsigned int xs,
                      unsigned int xe,
                      int color);
 
-void Triangle_16Line(unsigned char far *dest_addr,
+void Triangle_16Line(unsigned char *dest_addr,
                      unsigned int xs,
                      unsigned int xe,
                      int color);
 
 
-void Triangle_Asm(void far *dest_addr,int y1,int y3,
+void Triangle_Asm(void *dest_addr,int y1,int y3,
                   float xs,float xe,float dx_left,float dx_right,
                   int color);
 
@@ -391,6 +391,3 @@ extern int poly_clip_min_x,
            poly_clip_max_y;
 
 extern sprite textures;              // this holds the textures
-
-
-
\ No newline at end of file
diff --git a/CHAP_17/BLAZE3D.C b/CHAP_17/BLAZE3D.C
index 314933d..e3d4943 100755
--- a/CHAP_17/BLAZE3D.C
+++ b/CHAP_17/BLAZE3D.C
@@ -3,15 +3,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 #include <search.h>             // this one is needed for qsort()
@@ -20,11 +17,9 @@
 
 #include "black3.h"
 #include "black4.h"
-#include "black5.h"
-#include "black6.h"
 #include "black8.h"
-#include "black9.h"
-#include "black17.h"
+//#include "black17.h"
+#include "black11.h"
 
 // D E F I N E S /////////////////////////////////////////////////////////////
 
@@ -183,7 +178,7 @@ else
 
 // M A I N ////////////////////////////////////////////////////////////////////
 
-void main(int argc,char **argv)
+void start_blaze3d(int argc, char **argv, CEga *ega)
 {
 
 int done=0,         // exit flag
@@ -288,7 +283,7 @@ for (index=0; index<NUM_ASTEROIDS; index++)
 
 // set graphics to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // read the 3D color palette off disk
 
@@ -307,14 +302,15 @@ PCX_Show_Buffer((pcx_picture_ptr)&image_pcx);
 
 // install the isr keyboard driver
 
-Keyboard_Install_Driver();
+//Keyboard_Install_Driver();
 
 // scan the asteroid field
 
 Draw_Scanner((asteroid_ptr)&asteroids[0],1);
 
 // main event loop
-
+// Event handler
+SDL_Event e;
 while(!done)
      {
 
@@ -322,11 +318,22 @@ while(!done)
 
      starting_time = Timer_Query();
 
+     while( SDL_PollEvent( &e ) != 0 )
+      {
+          //User requests quit
+          if( e.type == SDL_QUIT )
+          {
+              done = 1;
+          }
+      }
+          
+      const Uint8* keyboard_state = SDL_GetKeyboardState(NULL);
+
      // erase all objects
 
      // Draw_Poly_List(1);
 
-     Fill_Double_Buffer_32(0);
+     Fill_Double_Buffer(0);
 
      // erase the scanner
 
@@ -337,7 +344,7 @@ while(!done)
 
      // change ship velocity
 
-     if (keyboard_state[MAKE_RGT_BRACKET])
+     if (keyboard_state[SDL_SCANCODE_RIGHTBRACKET])
         {
         // speed up
 
@@ -346,7 +353,7 @@ while(!done)
 
         } // end if speed increase
 
-     if (keyboard_state[MAKE_LFT_BRACKET])
+     if (keyboard_state[SDL_SCANCODE_LEFTBRACKET])
         {
         // slow down
 
@@ -357,7 +364,7 @@ while(!done)
 
      // test for turns
 
-     if (keyboard_state[MAKE_RIGHT])
+     if (keyboard_state[SDL_SCANCODE_RIGHT])
         {
         // rotate ship to right
 
@@ -366,7 +373,7 @@ while(!done)
 
         } // end if
 
-     if (keyboard_state[MAKE_LEFT])
+     if (keyboard_state[SDL_SCANCODE_LEFT])
         {
 
         // rotate ship to left
@@ -378,14 +385,14 @@ while(!done)
 
      // test for up and down
 
-     if (keyboard_state[MAKE_UP])
+     if (keyboard_state[SDL_SCANCODE_UP])
         {
 
         view_point.y-=25;
 
         } // end if
 
-     if (keyboard_state[MAKE_DOWN])
+     if (keyboard_state[SDL_SCANCODE_DOWN])
         {
 
         view_point.y+=25;
@@ -394,7 +401,7 @@ while(!done)
 
      // test for exit
 
-     if (keyboard_state[MAKE_ESC])
+     if (keyboard_state[SDL_SCANCODE_ESCAPE])
         done=1;
 
      // rotate trajectory vector to align with view direction
@@ -566,24 +573,22 @@ while(!done)
 
      // display double buffer
 
-     Display_Double_Buffer_32(double_buffer,18);
+     Display_Double_Buffer(double_buffer,18);
 
-     // lock onto 18 frames per second max
+     _sync();
 
-     while((Timer_Query()-starting_time)<1);
+      // lock onto 18 frames per second max
+
+      while((Timer_Query()-starting_time)<CLOCKS_PER_SEC/18);
 
      } // end while
 
 // restore graphics mode back to text
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 // restore the old keyboard driver
 
-Keyboard_Remove_Driver();
+//Keyboard_Remove_Driver();
 
 } // end main
-
-
-
-
\ No newline at end of file
diff --git a/CHAP_17/HostApp/CHAP17.xcodeproj/project.pbxproj b/CHAP_17/HostApp/CHAP17.xcodeproj/project.pbxproj
new file mode 100644
index 0000000..79f285e
--- /dev/null
+++ b/CHAP_17/HostApp/CHAP17.xcodeproj/project.pbxproj
@@ -0,0 +1,368 @@
+// !$*UTF8*$!
+{
+	archiveVersion = 1;
+	classes = {
+	};
+	objectVersion = 50;
+	objects = {
+
+/* Begin PBXBuildFile section */
+		2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 2DA6C5AF258AA66B002B1931 /* main.cpp */; };
+		3E017B4428ECB33A00D286E9 /* BLACK8.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E017B4328ECB33A00D286E9 /* BLACK8.C */; };
+		3E3C579628E883D700637704 /* BLACK3.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E3C579528E883D300637704 /* BLACK3.C */; };
+		3EDBE587294DEF32005E7C2C /* BLAZE3D.C in Sources */ = {isa = PBXBuildFile; fileRef = 3EDBE586294DEF32005E7C2C /* BLAZE3D.C */; };
+		3EDBE589294DF13E005E7C2C /* BLACK11.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E2CDEB328F0B76F00594EB2 /* BLACK11.C */; };
+		3EDBE58E294DF1B3005E7C2C /* BLZ3DCOC.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EDBE58D294DF1A8005E7C2C /* BLZ3DCOC.PCX */; };
+		3EDBE58F294DF1B5005E7C2C /* CUBE.PLG in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EDBE58B294DF1A8005E7C2C /* CUBE.PLG */; };
+		3EDBE590294DF1B6005E7C2C /* DART.PLG in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EDBE58C294DF1A8005E7C2C /* DART.PLG */; };
+		3EDBE591294DF1B9005E7C2C /* DIAMOND.PLG in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EDBE58A294DF1A8005E7C2C /* DIAMOND.PLG */; };
+		3EF00A5928E9A177000AC74A /* BLACK4.C in Sources */ = {isa = PBXBuildFile; fileRef = 3EF00A4F28E99F84000AC74A /* BLACK4.C */; };
+/* End PBXBuildFile section */
+
+/* Begin PBXCopyFilesBuildPhase section */
+		2DA6C5AA258AA66B002B1931 /* CopyFiles */ = {
+			isa = PBXCopyFilesBuildPhase;
+			buildActionMask = 12;
+			dstPath = "";
+			dstSubfolderSpec = 16;
+			files = (
+				3EDBE58E294DF1B3005E7C2C /* BLZ3DCOC.PCX in CopyFiles */,
+				3EDBE58F294DF1B5005E7C2C /* CUBE.PLG in CopyFiles */,
+				3EDBE590294DF1B6005E7C2C /* DART.PLG in CopyFiles */,
+				3EDBE591294DF1B9005E7C2C /* DIAMOND.PLG in CopyFiles */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXCopyFilesBuildPhase section */
+
+/* Begin PBXFileReference section */
+		2D2793D725AD90B500DEC620 /* font.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = font.h; sourceTree = "<group>"; };
+		2D9EAF1F258E6A4300297C9C /* sdl.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = sdl.h; sourceTree = "<group>"; };
+		2D9EAF26258E750E00297C9C /* HostApp.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = HostApp.entitlements; sourceTree = "<group>"; };
+		2DA6C5AC258AA66B002B1931 /* CHAP17 */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = CHAP17; sourceTree = BUILT_PRODUCTS_DIR; };
+		2DA6C5AF258AA66B002B1931 /* main.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = main.cpp; sourceTree = "<group>"; };
+		2DB9F18C258EA679000A3299 /* ega.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = ega.h; sourceTree = "<group>"; };
+		3E017B4228ECB33A00D286E9 /* BLACK8.H */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.h; name = BLACK8.H; path = ../../../CHAP_8/BLACK8.H; sourceTree = "<group>"; };
+		3E017B4328ECB33A00D286E9 /* BLACK8.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK8.C; path = ../../../CHAP_8/BLACK8.C; sourceTree = "<group>"; };
+		3E2CDEB328F0B76F00594EB2 /* BLACK11.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK11.C; path = ../../../CHAP_11/BLACK11.C; sourceTree = "<group>"; };
+		3E2CDEB428F0B76F00594EB2 /* BLACK11.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK11.H; path = ../../../CHAP_11/BLACK11.H; sourceTree = "<group>"; };
+		3E3C579428E883D300637704 /* BLACK3.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK3.H; path = ../../../CHAP_3/BLACK3.H; sourceTree = "<group>"; };
+		3E3C579528E883D300637704 /* BLACK3.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK3.C; path = ../../../CHAP_3/BLACK3.C; sourceTree = "<group>"; };
+		3EDBE583294DEE15005E7C2C /* BLACK17.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK17.H; path = ../../BLACK17.H; sourceTree = "<group>"; };
+		3EDBE584294DEE15005E7C2C /* BLACK17.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK17.C; path = ../../BLACK17.C; sourceTree = "<group>"; };
+		3EDBE586294DEF32005E7C2C /* BLAZE3D.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = BLAZE3D.C; path = ../../BLAZE3D.C; sourceTree = "<group>"; };
+		3EDBE588294DEF9C005E7C2C /* BLAZE3D.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = BLAZE3D.h; sourceTree = "<group>"; };
+		3EDBE58A294DF1A8005E7C2C /* DIAMOND.PLG */ = {isa = PBXFileReference; lastKnownFileType = text; name = DIAMOND.PLG; path = ../../DIAMOND.PLG; sourceTree = "<group>"; };
+		3EDBE58B294DF1A8005E7C2C /* CUBE.PLG */ = {isa = PBXFileReference; lastKnownFileType = text; name = CUBE.PLG; path = ../../CUBE.PLG; sourceTree = "<group>"; };
+		3EDBE58C294DF1A8005E7C2C /* DART.PLG */ = {isa = PBXFileReference; lastKnownFileType = text; name = DART.PLG; path = ../../DART.PLG; sourceTree = "<group>"; };
+		3EDBE58D294DF1A8005E7C2C /* BLZ3DCOC.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = BLZ3DCOC.PCX; path = ../../BLZ3DCOC.PCX; sourceTree = "<group>"; };
+		3EF00A4E28E99F84000AC74A /* BLACK4.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK4.H; path = ../../../CHAP_4/BLACK4.H; sourceTree = "<group>"; };
+		3EF00A4F28E99F84000AC74A /* BLACK4.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK4.C; path = ../../../CHAP_4/BLACK4.C; sourceTree = "<group>"; };
+		EE5BE75C2914126C0099C55B /* BLACK15.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK15.C; path = ../../../CHAP_15/BLACK15.C; sourceTree = "<group>"; };
+		EE5BE75D2914126C0099C55B /* BLACK15.H */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.h; name = BLACK15.H; path = ../../../CHAP_15/BLACK15.H; sourceTree = "<group>"; };
+/* End PBXFileReference section */
+
+/* Begin PBXFrameworksBuildPhase section */
+		2DA6C5A9258AA66B002B1931 /* Frameworks */ = {
+			isa = PBXFrameworksBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXFrameworksBuildPhase section */
+
+/* Begin PBXGroup section */
+		2DA6C5A3258AA66B002B1931 = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AE258AA66B002B1931 /* HostApp */,
+				2DA6C5AD258AA66B002B1931 /* Products */,
+			);
+			sourceTree = "<group>";
+		};
+		2DA6C5AD258AA66B002B1931 /* Products */ = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AC258AA66B002B1931 /* CHAP17 */,
+			);
+			name = Products;
+			sourceTree = "<group>";
+		};
+		2DA6C5AE258AA66B002B1931 /* HostApp */ = {
+			isa = PBXGroup;
+			children = (
+				2D9EAF26258E750E00297C9C /* HostApp.entitlements */,
+				2DA6C5AF258AA66B002B1931 /* main.cpp */,
+				2D9EAF1F258E6A4300297C9C /* sdl.h */,
+				2DB9F18C258EA679000A3299 /* ega.h */,
+				2D2793D725AD90B500DEC620 /* font.h */,
+				3E3C579528E883D300637704 /* BLACK3.C */,
+				3E3C579428E883D300637704 /* BLACK3.H */,
+				3EF00A4F28E99F84000AC74A /* BLACK4.C */,
+				3EF00A4E28E99F84000AC74A /* BLACK4.H */,
+				3E017B4328ECB33A00D286E9 /* BLACK8.C */,
+				3E017B4228ECB33A00D286E9 /* BLACK8.H */,
+				3E2CDEB328F0B76F00594EB2 /* BLACK11.C */,
+				3E2CDEB428F0B76F00594EB2 /* BLACK11.H */,
+				EE5BE75C2914126C0099C55B /* BLACK15.C */,
+				EE5BE75D2914126C0099C55B /* BLACK15.H */,
+				3EDBE584294DEE15005E7C2C /* BLACK17.C */,
+				3EDBE583294DEE15005E7C2C /* BLACK17.H */,
+				3EDBE586294DEF32005E7C2C /* BLAZE3D.C */,
+				3EDBE588294DEF9C005E7C2C /* BLAZE3D.h */,
+				3EDBE58D294DF1A8005E7C2C /* BLZ3DCOC.PCX */,
+				3EDBE58B294DF1A8005E7C2C /* CUBE.PLG */,
+				3EDBE58C294DF1A8005E7C2C /* DART.PLG */,
+				3EDBE58A294DF1A8005E7C2C /* DIAMOND.PLG */,
+			);
+			path = HostApp;
+			sourceTree = "<group>";
+		};
+/* End PBXGroup section */
+
+/* Begin PBXNativeTarget section */
+		2DA6C5AB258AA66B002B1931 /* CHAP17 */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = 2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP17" */;
+			buildPhases = (
+				2DA6C5A8258AA66B002B1931 /* Sources */,
+				2DA6C5A9258AA66B002B1931 /* Frameworks */,
+				2DA6C5AA258AA66B002B1931 /* CopyFiles */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+			);
+			name = CHAP17;
+			productName = CicParserSim;
+			productReference = 2DA6C5AC258AA66B002B1931 /* CHAP17 */;
+			productType = "com.apple.product-type.tool";
+		};
+/* End PBXNativeTarget section */
+
+/* Begin PBXProject section */
+		2DA6C5A4258AA66B002B1931 /* Project object */ = {
+			isa = PBXProject;
+			attributes = {
+				LastUpgradeCheck = 1240;
+				TargetAttributes = {
+					2DA6C5AB258AA66B002B1931 = {
+						CreatedOnToolsVersion = 12.2;
+					};
+				};
+			};
+			buildConfigurationList = 2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP17" */;
+			compatibilityVersion = "Xcode 9.3";
+			developmentRegion = en;
+			hasScannedForEncodings = 0;
+			knownRegions = (
+				en,
+				Base,
+			);
+			mainGroup = 2DA6C5A3258AA66B002B1931;
+			productRefGroup = 2DA6C5AD258AA66B002B1931 /* Products */;
+			projectDirPath = "";
+			projectRoot = "";
+			targets = (
+				2DA6C5AB258AA66B002B1931 /* CHAP17 */,
+			);
+		};
+/* End PBXProject section */
+
+/* Begin PBXSourcesBuildPhase section */
+		2DA6C5A8258AA66B002B1931 /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				3E017B4428ECB33A00D286E9 /* BLACK8.C in Sources */,
+				3EDBE589294DF13E005E7C2C /* BLACK11.C in Sources */,
+				2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */,
+				3EF00A5928E9A177000AC74A /* BLACK4.C in Sources */,
+				3EDBE587294DEF32005E7C2C /* BLAZE3D.C in Sources */,
+				3E3C579628E883D700637704 /* BLACK3.C in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXSourcesBuildPhase section */
+
+/* Begin XCBuildConfiguration section */
+		2DA6C5B1258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = dwarf;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				ENABLE_TESTABILITY = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_OPTIMIZATION_LEVEL = 0;
+				GCC_PREPROCESSOR_DEFINITIONS = (
+					"DEBUG=1",
+					"$(inherited)",
+				);
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Debug;
+		};
+		2DA6C5B2258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				ENABLE_NS_ASSERTIONS = NO;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = NO;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Release;
+		};
+		2DA6C5B4258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = (
+					/opt/homebrew/include/SDL2,
+					/usr/local/include/SDL2,
+				);
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/lib",
+					"-L/usr/local/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Debug;
+		};
+		2DA6C5B5258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = (
+					/opt/homebrew/include/SDL2,
+					/usr/local/include/SDL2,
+				);
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/lib",
+					"-L/usr/local/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Release;
+		};
+/* End XCBuildConfiguration section */
+
+/* Begin XCConfigurationList section */
+		2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP17" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B1258AA66B002B1931 /* Debug */,
+				2DA6C5B2258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP17" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B4258AA66B002B1931 /* Debug */,
+				2DA6C5B5258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+/* End XCConfigurationList section */
+	};
+	rootObject = 2DA6C5A4258AA66B002B1931 /* Project object */;
+}
diff --git a/CHAP_17/HostApp/CHAP17.xcodeproj/project.xcworkspace/contents.xcworkspacedata b/CHAP_17/HostApp/CHAP17.xcodeproj/project.xcworkspace/contents.xcworkspacedata
new file mode 100644
index 0000000..27a420f
--- /dev/null
+++ b/CHAP_17/HostApp/CHAP17.xcodeproj/project.xcworkspace/contents.xcworkspacedata
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "self:/Users/ac27/Dev/black_art/black_art_3d_revival/CHAP_17/HostApp/CHAP17.xcodeproj">
+   </FileRef>
+</Workspace>
diff --git a/CHAP_17/HostApp/CHAP17.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist b/CHAP_17/HostApp/CHAP17.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
new file mode 100644
index 0000000..18d9810
--- /dev/null
+++ b/CHAP_17/HostApp/CHAP17.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IDEDidComputeMac32BitWarning</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_17/HostApp/CHAP17.xcodeproj/xcshareddata/xcschemes/CHAP17.xcscheme b/CHAP_17/HostApp/CHAP17.xcodeproj/xcshareddata/xcschemes/CHAP17.xcscheme
new file mode 100644
index 0000000..6ae3f0c
--- /dev/null
+++ b/CHAP_17/HostApp/CHAP17.xcodeproj/xcshareddata/xcschemes/CHAP17.xcscheme
@@ -0,0 +1,79 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "1400"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+               BuildableName = "CHAP17"
+               BlueprintName = "CHAP17"
+               ReferencedContainer = "container:CHAP17.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES">
+      <Testables>
+      </Testables>
+   </TestAction>
+   <LaunchAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      debugServiceExtension = "internal"
+      allowLocationSimulation = "YES"
+      viewDebuggingEnabled = "No">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+            BuildableName = "CHAP17"
+            BlueprintName = "CHAP17"
+            ReferencedContainer = "container:CHAP17.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </LaunchAction>
+   <ProfileAction
+      buildConfiguration = "Release"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      debugDocumentVersioning = "YES">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+            BuildableName = "CHAP17"
+            BlueprintName = "CHAP17"
+            ReferencedContainer = "container:CHAP17.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff --git a/CHAP_17/HostApp/HostApp/BLAZE3D.h b/CHAP_17/HostApp/HostApp/BLAZE3D.h
new file mode 100644
index 0000000..92cbfaf
--- /dev/null
+++ b/CHAP_17/HostApp/HostApp/BLAZE3D.h
@@ -0,0 +1,13 @@
+//
+//  BLAZE3D.h
+//  CHAP17
+//
+//  Created by Tosha on 17/12/2022.
+//
+
+#ifndef BLAZE3D_h
+#define BLAZE3D_h
+
+void start_blaze3d(int argc, char **argv, CEga *ega);
+
+#endif /* BLAZE3D_h */
diff --git a/CHAP_17/HostApp/HostApp/BSPDEMO.h b/CHAP_17/HostApp/HostApp/BSPDEMO.h
new file mode 100644
index 0000000..5a9ca75
--- /dev/null
+++ b/CHAP_17/HostApp/HostApp/BSPDEMO.h
@@ -0,0 +1,13 @@
+//
+//  BSPDEMO.h
+//  CHAP15
+//
+//  Created by Tosha on 06/11/2022.
+//
+
+#ifndef BSPDEMO_h
+#define BSPDEMO_h
+
+void start_bspdemo(CEga *ega, int pixelSize);
+
+#endif /* BSPDEMO_h */
diff --git a/CHAP_17/HostApp/HostApp/HostApp.entitlements b/CHAP_17/HostApp/HostApp/HostApp.entitlements
new file mode 100644
index 0000000..8cc185a
--- /dev/null
+++ b/CHAP_17/HostApp/HostApp/HostApp.entitlements
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>com.apple.security.cs.disable-library-validation</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_17/HostApp/HostApp/ega.h b/CHAP_17/HostApp/HostApp/ega.h
new file mode 100644
index 0000000..b19dc71
--- /dev/null
+++ b/CHAP_17/HostApp/HostApp/ega.h
@@ -0,0 +1,63 @@
+#ifndef EGA_h
+#define EGA_h
+
+#include "font.h"
+
+typedef uint16_t WORD;
+typedef uint8_t BYTE;
+typedef uint8_t FLAG;
+typedef uint16_t WORD;
+
+typedef uint32_t DWORD;
+
+class CVideoAdapter
+{
+public:
+	virtual DWORD GetPixel(int x, int y, int p) = 0;
+};
+
+class CEga : public CVideoAdapter
+{
+	enum {
+		MemSize = 0x10000*2
+	};
+
+public:
+	DWORD memory[MemSize];
+
+    // https://www.ditig.com/256-colors-cheat-sheet
+    // Note: first 16 colors are from VGA palette, rest is from Xterm
+    DWORD palette[256] = {
+        0x000000, 0x0000b0, 0x00b000, 0x00b0b0, 0xb00000, 0xb000b0, 0xb0b000, 0xb0b0b0,
+        0x808080, 0x0000ff, 0x00ff00, 0x00ffff, 0xff0000, 0xff00ff, 0xffff00, 0xffffff, 0x000000, 0x00005f, 0x000087, 0x0000af, 0x0000d7, 0x0000ff, 0x005f00, 0x005f5f, 0x005f87, 0x005faf, 0x005fd7, 0x005fff, 0x008700, 0x00875f, 0x008787, 0x0087af, 0x0087d7, 0x0087ff, 0x00af00, 0x00af5f, 0x00af87, 0x00afaf, 0x00afd7, 0x00afff, 0x00d700, 0x00d75f, 0x00d787, 0x00d7af, 0x00d7d7, 0x00d7ff, 0x00ff00, 0x00ff5f, 0x00ff87, 0x00ffaf, 0x00ffd7, 0x00ffff, 0x5f0000, 0x5f005f, 0x5f0087, 0x5f00af, 0x5f00d7, 0x5f00ff, 0x5f5f00, 0x5f5f5f, 0x5f5f87, 0x5f5faf, 0x5f5fd7, 0x5f5fff, 0x5f8700, 0x5f875f, 0x5f8787, 0x5f87af, 0x5f87d7, 0x5f87ff, 0x5faf00, 0x5faf5f, 0x5faf87, 0x5fafaf, 0x5fafd7, 0x5fafff, 0x5fd700, 0x5fd75f, 0x5fd787, 0x5fd7af, 0x5fd7d7, 0x5fd7ff, 0x5fff00, 0x5fff5f, 0x5fff87, 0x5fffaf, 0x5fffd7, 0x5fffff, 0x870000, 0x87005f, 0x870087, 0x8700af, 0x8700d7, 0x8700ff, 0x875f00, 0x875f5f, 0x875f87, 0x875faf, 0x875fd7, 0x875fff, 0x878700, 0x87875f, 0x878787, 0x8787af, 0x8787d7, 0x8787ff, 0x87af00, 0x87af5f, 0x87af87, 0x87afaf, 0x87afd7, 0x87afff, 0x87d700, 0x87d75f, 0x87d787, 0x87d7af, 0x87d7d7, 0x87d7ff, 0x87ff00, 0x87ff5f, 0x87ff87, 0x87ffaf, 0x87ffd7, 0x87ffff, 0xaf0000, 0xaf005f, 0xaf0087, 0xaf00af, 0xaf00d7, 0xaf00ff, 0xaf5f00, 0xaf5f5f, 0xaf5f87, 0xaf5faf, 0xaf5fd7, 0xaf5fff, 0xaf8700, 0xaf875f, 0xaf8787, 0xaf87af, 0xaf87d7, 0xaf87ff, 0xafaf00, 0xafaf5f, 0xafaf87, 0xafafaf, 0xafafd7, 0xafafff, 0xafd700, 0xafd75f, 0xafd787, 0xafd7af, 0xafd7d7, 0xafd7ff, 0xafff00, 0xafff5f, 0xafff87, 0xafffaf, 0xafffd7, 0xafffff, 0xd70000, 0xd7005f, 0xd70087, 0xd700af, 0xd700d7, 0xd700ff, 0xd75f00, 0xd75f5f, 0xd75f87, 0xd75faf, 0xd75fd7, 0xd75fff, 0xd78700, 0xd7875f, 0xd78787, 0xd787af, 0xd787d7, 0xd787ff, 0xd7af00, 0xd7af5f, 0xd7af87, 0xd7afaf, 0xd7afd7, 0xd7afff, 0xd7d700, 0xd7d75f, 0xd7d787, 0xd7d7af, 0xd7d7d7, 0xd7d7ff, 0xd7ff00, 0xd7ff5f, 0xd7ff87, 0xd7ffaf, 0xd7ffd7, 0xd7ffff, 0xff0000, 0xff005f, 0xff0087, 0xff00af, 0xff00d7, 0xff00ff, 0xff5f00, 0xff5f5f, 0xff5f87, 0xff5faf, 0xff5fd7, 0xff5fff, 0xff8700, 0xff875f, 0xff8787, 0xff87af, 0xff87d7, 0xff87ff, 0xffaf00, 0xffaf5f, 0xffaf87, 0xffafaf, 0xffafd7, 0xffafff, 0xffd700, 0xffd75f, 0xffd787, 0xffd7af, 0xffd7d7, 0xffd7ff, 0xffff00, 0xffff5f, 0xffff87, 0xffffaf, 0xffffd7, 0xffffff, 0x080808, 0x121212, 0x1c1c1c, 0x262626, 0x303030, 0x3a3a3a, 0x444444, 0x4e4e4e, 0x585858, 0x626262, 0x6c6c6c, 0x767676, 0x808080, 0x8a8a8a, 0x949494, 0x9e9e9e, 0xa8a8a8, 0xb2b2b2, 0xbcbcbc, 0xc6c6c6, 0xd0d0d0, 0xdadada, 0xe4e4e4, 0xeeeeee
+    };
+
+public:
+	CEga()
+	{
+        memset(memory, 0, sizeof(memory));
+	}
+	
+    void SetPaletteIndex(int index, int rgb)
+    {
+        int r = ((rgb & 4) ? 2 : 0) + ((rgb & 32) ? 1 : 0);
+        int g = ((rgb & 2) ? 2 : 0) + ((rgb & 16) ? 1 : 0);
+        int b = ((rgb & 1) ? 2 : 0) + ((rgb & 8) ? 1 : 0);
+        r = r * 255 / 3;
+        g = g * 255 / 3;
+        b = b * 255 / 3;
+        palette[index] = b | (g << 8) | (r << 16);
+
+    }
+    
+	virtual DWORD GetPixel(int x, int y, int page = -1) override
+	{
+        BYTE* _video = (BYTE*)memory;
+        int idx = (int)_video[((y<<8) + (y<<6)) + x];
+        return palette[idx];
+	}
+};
+
+void _sync();
+
+#endif
diff --git a/CHAP_17/HostApp/HostApp/font.h b/CHAP_17/HostApp/HostApp/font.h
new file mode 100644
index 0000000..8be86b2
--- /dev/null
+++ b/CHAP_17/HostApp/HostApp/font.h
@@ -0,0 +1,313 @@
+#ifndef FONT_h
+#define FONT_h
+
+#pragma once
+
+// http://www.hampa.ch/pce/download.html
+// genoa-ega-2.41.rom
+// dd if=genoa-ega-2.41.rom of=font bs=1 skip=8224 count=3584
+// xxd -i font > font.h
+
+static const uint8_t font[] = {
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81,
+  0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xff,
+  0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
+  0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
+  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff,
+  0xff, 0xff, 0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc,
+  0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30,
+  0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x63,
+  0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06,
+  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66,
+  0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xdb,
+  0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c,
+  0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c,
+  0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c,
+  0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06,
+  0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6,
+  0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c,
+  0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x30,
+  0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c,
+  0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38, 0x78, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c,
+  0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66,
+  0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0,
+  0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x6c,
+  0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66,
+  0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x0c,
+  0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66,
+  0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
+  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60,
+  0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x30, 0x30, 0x30,
+  0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0,
+  0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
+  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xff, 0x00, 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76,
+  0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66,
+  0x3c, 0x00, 0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66,
+  0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec,
+  0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60,
+  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c,
+  0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30,
+  0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38,
+  0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38,
+  0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66,
+  0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00, 0x00,
+  0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc,
+  0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x38,
+  0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
+  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe,
+  0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x38,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x66,
+  0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x60,
+  0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c,
+  0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x76,
+  0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x6c,
+  0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00, 0x10,
+  0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00, 0x00, 0xc6,
+  0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60,
+  0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xcc, 0xcc,
+  0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x0e,
+  0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
+  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
+  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
+  0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
+  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06,
+  0x06, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c,
+  0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c,
+  0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x44, 0x11, 0x44,
+  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x55, 0xaa,
+  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
+  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
+  0xdd, 0x77, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
+  0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff,
+  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
+  0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
+  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
+  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30,
+  0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c,
+  0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c,
+  0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00,
+  0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e,
+  0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18,
+  0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00,
+  0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c,
+  0x1c, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8,
+  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+};
+
+#endif
diff --git a/CHAP_17/HostApp/HostApp/main.cpp b/CHAP_17/HostApp/HostApp/main.cpp
new file mode 100644
index 0000000..dd7757b
--- /dev/null
+++ b/CHAP_17/HostApp/HostApp/main.cpp
@@ -0,0 +1,58 @@
+//
+//  main.cpp
+//  HostApp
+//
+//
+
+#include <iostream>
+#include <vector>
+#include <sstream>
+#include <iomanip>
+#include <list>
+
+#include "sdl.h"
+#include "ega.h"
+
+#include "BLAZE3D.h"
+
+CEga mVideo;
+CSdl mSdl;
+std::list<int> keyboardBuffer;
+
+void onKey(int k, int p)
+{
+    if (!p)
+        return;
+
+    int key = 0;
+    switch (k)
+    {
+        case SDL_SCANCODE_UP: key = 0x4800; break;
+        case SDL_SCANCODE_DOWN: key = 0x5000; break;
+        case SDL_SCANCODE_LEFT: key = 0x4b00; break;
+        case SDL_SCANCODE_RIGHT: key = 0x4d00; break;
+        case SDL_SCANCODE_SPACE: key = 0x3920; break;
+        case SDL_SCANCODE_RETURN: key = 0x1c0d; break;
+    }
+
+    if (key)
+    {
+        keyboardBuffer.push_back(key);
+    }
+}
+
+void _sync()
+{
+    for (int y=0; y<mSdl.Height; y++)
+      for (int x=0; x<mSdl.Width; x++)
+        mSdl.SetPixel(x, y, mVideo.GetPixel(x, y));
+    
+    mSdl.Loop();
+}
+
+int main(int argc, char * argv[]) {
+    mSdl.Init();
+    start_blaze3d(argc, argv, &mVideo);
+    mSdl.Deinit();
+    return 0;
+}
diff --git a/CHAP_17/HostApp/HostApp/sdl.h b/CHAP_17/HostApp/HostApp/sdl.h
new file mode 100644
index 0000000..7b6b0d5
--- /dev/null
+++ b/CHAP_17/HostApp/HostApp/sdl.h
@@ -0,0 +1,144 @@
+#ifndef SDL_h
+#define SDL_h
+
+typedef uint32_t Uint32;
+#include <SDL.h>
+#include <SDL_render.h>
+
+void onKey(int k, int p);
+
+class CSdl
+{
+    
+    std::vector< unsigned char > pixels;
+
+    SDL_Renderer* renderer{nullptr};
+    SDL_Texture* texture{nullptr};
+    SDL_Window* window{nullptr};
+    bool running{true};
+    int lastKey{0};
+
+public:
+    const int pixelSize = 2;
+    enum {
+        Width = 320,//640,
+        Height = 200//350
+    };
+
+    void Init()
+    {
+        pixels.resize(Width*Height*4);
+        SDL_Init( SDL_INIT_EVERYTHING );
+        atexit( SDL_Quit );
+        
+        window = SDL_CreateWindow
+        (
+         "BlackArt simulator",
+         SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
+         Width*pixelSize, Height*pixelSize,
+         SDL_WINDOW_SHOWN
+         );
+        
+        renderer = SDL_CreateRenderer
+        (
+         window,
+         -1,
+         SDL_RENDERER_ACCELERATED
+         );
+
+        texture = SDL_CreateTexture
+        (
+         renderer,
+         SDL_PIXELFORMAT_ARGB8888,
+         SDL_TEXTUREACCESS_STREAMING,
+         Width, Height
+         );
+    }
+    
+    void Blit()
+    {
+        SDL_SetRenderDrawColor( renderer, 0, 0, 0, SDL_ALPHA_OPAQUE );
+        SDL_RenderClear( renderer );
+        
+        SDL_UpdateTexture
+        (
+         texture,
+         NULL,
+         &pixels[0],
+         Width * 4
+         );
+        
+        SDL_RenderCopy( renderer, texture, NULL, NULL );
+        SDL_RenderPresent( renderer );
+    }
+    
+    void Loop()
+    {
+//        SDL_Event event;
+//
+//        while( SDL_PollEvent( &event ) )
+//        {
+//            if (SDL_KEYDOWN == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 1);
+//            }
+//
+//            if (SDL_KEYUP == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 0);
+//            }
+//
+//            if( ( SDL_QUIT == event.type ) ||
+//               ( SDL_KEYDOWN == event.type && SDL_SCANCODE_ESCAPE == event.key.keysym.scancode ) )
+//            {
+//                running = false;
+//                break;
+//            }
+//        }
+        
+        Blit();
+
+        //const Uint64 end = SDL_GetPerformanceCounter();
+        //const static Uint64 freq = SDL_GetPerformanceFrequency();
+        //const double seconds = ( end - start ) / static_cast< double >( freq );
+        //std::cout << "Frame time: " << seconds * 1000.0 << "ms" << std::endl;
+//        if (running)
+//            SDL_Delay(20);
+    }
+    
+    void Deinit()
+    {
+        SDL_DestroyRenderer( renderer );
+        SDL_DestroyWindow( window );
+        SDL_Quit();
+    }
+    
+    void SetPixel(int x, int y, uint32_t c)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        pixels[ offset + 0 ] = (uint8_t)c;
+        pixels[ offset + 1 ] = (uint8_t)(c >> 8);
+        pixels[ offset + 2 ] = (uint8_t)(c >> 16);
+        pixels[ offset + 3 ] = SDL_ALPHA_OPAQUE;
+    }
+
+    uint32_t GetPixel(int x, int y)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        int b = pixels[ offset + 0 ];
+        int g = pixels[ offset + 1 ];
+        int r = pixels[ offset + 2 ];
+        return r | (g << 8) | (b << 16);
+    }
+
+};
+
+#endif
diff --git a/CHAP_18/HostApp/CHAP18.xcodeproj/project.pbxproj b/CHAP_18/HostApp/CHAP18.xcodeproj/project.pbxproj
new file mode 100644
index 0000000..e2ae3e7
--- /dev/null
+++ b/CHAP_18/HostApp/CHAP18.xcodeproj/project.pbxproj
@@ -0,0 +1,440 @@
+// !$*UTF8*$!
+{
+	archiveVersion = 1;
+	classes = {
+	};
+	objectVersion = 50;
+	objects = {
+
+/* Begin PBXBuildFile section */
+		2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 2DA6C5AF258AA66B002B1931 /* main.cpp */; };
+		3E017B4428ECB33A00D286E9 /* BLACK8.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E017B4328ECB33A00D286E9 /* BLACK8.C */; };
+		3E3C579628E883D700637704 /* BLACK3.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E3C579528E883D300637704 /* BLACK3.C */; };
+		3EA4331E294FBEF100C48D85 /* KRK.C in Sources */ = {isa = PBXBuildFile; fileRef = 3EA4331D294FBEF100C48D85 /* KRK.C */; };
+		3EA43337294FC7B200C48D85 /* BARRIER.PLG in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA43321294FC79A00C48D85 /* BARRIER.PLG */; };
+		3EA43338294FC7B200C48D85 /* MISSILE.PLG in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA43329294FC79A00C48D85 /* MISSILE.PLG */; };
+		3EA43339294FC7B200C48D85 /* PYLONS.PLG in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA43325294FC79A00C48D85 /* PYLONS.PLG */; };
+		3EA4333A294FC7B200C48D85 /* ROCK.PLG in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA43322294FC79A00C48D85 /* ROCK.PLG */; };
+		3EA4333B294FC7B200C48D85 /* SLIDER.PLG in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA43323294FC79A00C48D85 /* SLIDER.PLG */; };
+		3EA4333C294FC7B200C48D85 /* STATION.PLG in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA43327294FC79A00C48D85 /* STATION.PLG */; };
+		3EA4333D294FC7B200C48D85 /* TALLON.PLG in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA43324294FC79A00C48D85 /* TALLON.PLG */; };
+		3EA4333E294FC7B200C48D85 /* TELE.PLG in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA43326294FC79A00C48D85 /* TELE.PLG */; };
+		3EA4333F294FC7B200C48D85 /* TOWER.PLG in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA43328294FC79A00C48D85 /* TOWER.PLG */; };
+		3EA43340294FC7B200C48D85 /* MISSILE.PLG in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA43320294FC76900C48D85 /* MISSILE.PLG */; };
+		3EA43341294FC7BA00C48D85 /* KFIGSH1.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA4332F294FC7A800C48D85 /* KFIGSH1.PCX */; };
+		3EA43342294FC7BA00C48D85 /* KFIGSH2.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA4332C294FC7A800C48D85 /* KFIGSH2.PCX */; };
+		3EA43343294FC7BA00C48D85 /* KFIGSH3.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA4332D294FC7A800C48D85 /* KFIGSH3.PCX */; };
+		3EA43344294FC7BA00C48D85 /* KRKBAK.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA43336294FC7A800C48D85 /* KRKBAK.PCX */; };
+		3EA43345294FC7BA00C48D85 /* KRKBUTT.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA43333294FC7A800C48D85 /* KRKBUTT.PCX */; };
+		3EA43346294FC7BA00C48D85 /* KRKCP.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA4332E294FC7A800C48D85 /* KRKCP.PCX */; };
+		3EA43347294FC7BA00C48D85 /* KRKDIS.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA43332294FC7A800C48D85 /* KRKDIS.PCX */; };
+		3EA43348294FC7BA00C48D85 /* KRKFIRST.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA4332A294FC7A800C48D85 /* KRKFIRST.PCX */; };
+		3EA43349294FC7BA00C48D85 /* KRKFNT.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA43330294FC7A800C48D85 /* KRKFNT.PCX */; };
+		3EA4334A294FC7BA00C48D85 /* KRKINS.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA43335294FC7A800C48D85 /* KRKINS.PCX */; };
+		3EA4334B294FC7BA00C48D85 /* KRKREDP.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA4332B294FC7A800C48D85 /* KRKREDP.PCX */; };
+		3EA4334C294FC7BA00C48D85 /* KRKREDPC.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA43334294FC7A800C48D85 /* KRKREDPC.PCX */; };
+		3EA4334D294FC7BA00C48D85 /* WAITE.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EA43331294FC7A800C48D85 /* WAITE.PCX */; };
+		3EDBE589294DF13E005E7C2C /* BLACK11.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E2CDEB328F0B76F00594EB2 /* BLACK11.C */; };
+		3EF00A5928E9A177000AC74A /* BLACK4.C in Sources */ = {isa = PBXBuildFile; fileRef = 3EF00A4F28E99F84000AC74A /* BLACK4.C */; };
+/* End PBXBuildFile section */
+
+/* Begin PBXCopyFilesBuildPhase section */
+		2DA6C5AA258AA66B002B1931 /* CopyFiles */ = {
+			isa = PBXCopyFilesBuildPhase;
+			buildActionMask = 12;
+			dstPath = "";
+			dstSubfolderSpec = 16;
+			files = (
+				3EA43341294FC7BA00C48D85 /* KFIGSH1.PCX in CopyFiles */,
+				3EA43342294FC7BA00C48D85 /* KFIGSH2.PCX in CopyFiles */,
+				3EA43343294FC7BA00C48D85 /* KFIGSH3.PCX in CopyFiles */,
+				3EA43344294FC7BA00C48D85 /* KRKBAK.PCX in CopyFiles */,
+				3EA43345294FC7BA00C48D85 /* KRKBUTT.PCX in CopyFiles */,
+				3EA43346294FC7BA00C48D85 /* KRKCP.PCX in CopyFiles */,
+				3EA43347294FC7BA00C48D85 /* KRKDIS.PCX in CopyFiles */,
+				3EA43348294FC7BA00C48D85 /* KRKFIRST.PCX in CopyFiles */,
+				3EA43349294FC7BA00C48D85 /* KRKFNT.PCX in CopyFiles */,
+				3EA4334A294FC7BA00C48D85 /* KRKINS.PCX in CopyFiles */,
+				3EA4334B294FC7BA00C48D85 /* KRKREDP.PCX in CopyFiles */,
+				3EA4334C294FC7BA00C48D85 /* KRKREDPC.PCX in CopyFiles */,
+				3EA4334D294FC7BA00C48D85 /* WAITE.PCX in CopyFiles */,
+				3EA43337294FC7B200C48D85 /* BARRIER.PLG in CopyFiles */,
+				3EA43338294FC7B200C48D85 /* MISSILE.PLG in CopyFiles */,
+				3EA43339294FC7B200C48D85 /* PYLONS.PLG in CopyFiles */,
+				3EA4333A294FC7B200C48D85 /* ROCK.PLG in CopyFiles */,
+				3EA4333B294FC7B200C48D85 /* SLIDER.PLG in CopyFiles */,
+				3EA4333C294FC7B200C48D85 /* STATION.PLG in CopyFiles */,
+				3EA4333D294FC7B200C48D85 /* TALLON.PLG in CopyFiles */,
+				3EA4333E294FC7B200C48D85 /* TELE.PLG in CopyFiles */,
+				3EA4333F294FC7B200C48D85 /* TOWER.PLG in CopyFiles */,
+				3EA43340294FC7B200C48D85 /* MISSILE.PLG in CopyFiles */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXCopyFilesBuildPhase section */
+
+/* Begin PBXFileReference section */
+		2D2793D725AD90B500DEC620 /* font.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = font.h; sourceTree = "<group>"; };
+		2D9EAF1F258E6A4300297C9C /* sdl.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = sdl.h; sourceTree = "<group>"; };
+		2D9EAF26258E750E00297C9C /* HostApp.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = HostApp.entitlements; sourceTree = "<group>"; };
+		2DA6C5AC258AA66B002B1931 /* CHAP18 */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = CHAP18; sourceTree = BUILT_PRODUCTS_DIR; };
+		2DA6C5AF258AA66B002B1931 /* main.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = main.cpp; sourceTree = "<group>"; };
+		2DB9F18C258EA679000A3299 /* ega.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = ega.h; sourceTree = "<group>"; };
+		3E017B4228ECB33A00D286E9 /* BLACK8.H */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.h; name = BLACK8.H; path = ../../../CHAP_8/BLACK8.H; sourceTree = "<group>"; };
+		3E017B4328ECB33A00D286E9 /* BLACK8.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK8.C; path = ../../../CHAP_8/BLACK8.C; sourceTree = "<group>"; };
+		3E2CDEB328F0B76F00594EB2 /* BLACK11.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK11.C; path = ../../../CHAP_11/BLACK11.C; sourceTree = "<group>"; };
+		3E2CDEB428F0B76F00594EB2 /* BLACK11.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK11.H; path = ../../../CHAP_11/BLACK11.H; sourceTree = "<group>"; };
+		3E3C579428E883D300637704 /* BLACK3.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK3.H; path = ../../../CHAP_3/BLACK3.H; sourceTree = "<group>"; };
+		3E3C579528E883D300637704 /* BLACK3.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK3.C; path = ../../../CHAP_3/BLACK3.C; sourceTree = "<group>"; };
+		3EA4331D294FBEF100C48D85 /* KRK.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = KRK.C; path = ../../KRK.C; sourceTree = "<group>"; };
+		3EA4331F294FC6FA00C48D85 /* KRK.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = KRK.h; sourceTree = "<group>"; };
+		3EA43320294FC76900C48D85 /* MISSILE.PLG */ = {isa = PBXFileReference; lastKnownFileType = text; name = MISSILE.PLG; path = ../../MISSILE.PLG; sourceTree = "<group>"; };
+		3EA43321294FC79A00C48D85 /* BARRIER.PLG */ = {isa = PBXFileReference; lastKnownFileType = text; name = BARRIER.PLG; path = ../../BARRIER.PLG; sourceTree = "<group>"; };
+		3EA43322294FC79A00C48D85 /* ROCK.PLG */ = {isa = PBXFileReference; lastKnownFileType = text; name = ROCK.PLG; path = ../../ROCK.PLG; sourceTree = "<group>"; };
+		3EA43323294FC79A00C48D85 /* SLIDER.PLG */ = {isa = PBXFileReference; lastKnownFileType = text; name = SLIDER.PLG; path = ../../SLIDER.PLG; sourceTree = "<group>"; };
+		3EA43324294FC79A00C48D85 /* TALLON.PLG */ = {isa = PBXFileReference; lastKnownFileType = text; name = TALLON.PLG; path = ../../TALLON.PLG; sourceTree = "<group>"; };
+		3EA43325294FC79A00C48D85 /* PYLONS.PLG */ = {isa = PBXFileReference; lastKnownFileType = text; name = PYLONS.PLG; path = ../../PYLONS.PLG; sourceTree = "<group>"; };
+		3EA43326294FC79A00C48D85 /* TELE.PLG */ = {isa = PBXFileReference; lastKnownFileType = text; name = TELE.PLG; path = ../../TELE.PLG; sourceTree = "<group>"; };
+		3EA43327294FC79A00C48D85 /* STATION.PLG */ = {isa = PBXFileReference; lastKnownFileType = text; name = STATION.PLG; path = ../../STATION.PLG; sourceTree = "<group>"; };
+		3EA43328294FC79A00C48D85 /* TOWER.PLG */ = {isa = PBXFileReference; lastKnownFileType = text; name = TOWER.PLG; path = ../../TOWER.PLG; sourceTree = "<group>"; };
+		3EA43329294FC79A00C48D85 /* MISSILE.PLG */ = {isa = PBXFileReference; lastKnownFileType = text; name = MISSILE.PLG; path = ../../MISSILE.PLG; sourceTree = "<group>"; };
+		3EA4332A294FC7A800C48D85 /* KRKFIRST.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = KRKFIRST.PCX; path = ../../KRKFIRST.PCX; sourceTree = "<group>"; };
+		3EA4332B294FC7A800C48D85 /* KRKREDP.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = KRKREDP.PCX; path = ../../KRKREDP.PCX; sourceTree = "<group>"; };
+		3EA4332C294FC7A800C48D85 /* KFIGSH2.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = KFIGSH2.PCX; path = ../../KFIGSH2.PCX; sourceTree = "<group>"; };
+		3EA4332D294FC7A800C48D85 /* KFIGSH3.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = KFIGSH3.PCX; path = ../../KFIGSH3.PCX; sourceTree = "<group>"; };
+		3EA4332E294FC7A800C48D85 /* KRKCP.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = KRKCP.PCX; path = ../../KRKCP.PCX; sourceTree = "<group>"; };
+		3EA4332F294FC7A800C48D85 /* KFIGSH1.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = KFIGSH1.PCX; path = ../../KFIGSH1.PCX; sourceTree = "<group>"; };
+		3EA43330294FC7A800C48D85 /* KRKFNT.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = KRKFNT.PCX; path = ../../KRKFNT.PCX; sourceTree = "<group>"; };
+		3EA43331294FC7A800C48D85 /* WAITE.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = WAITE.PCX; path = ../../WAITE.PCX; sourceTree = "<group>"; };
+		3EA43332294FC7A800C48D85 /* KRKDIS.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = KRKDIS.PCX; path = ../../KRKDIS.PCX; sourceTree = "<group>"; };
+		3EA43333294FC7A800C48D85 /* KRKBUTT.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = KRKBUTT.PCX; path = ../../KRKBUTT.PCX; sourceTree = "<group>"; };
+		3EA43334294FC7A800C48D85 /* KRKREDPC.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = KRKREDPC.PCX; path = ../../KRKREDPC.PCX; sourceTree = "<group>"; };
+		3EA43335294FC7A800C48D85 /* KRKINS.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = KRKINS.PCX; path = ../../KRKINS.PCX; sourceTree = "<group>"; };
+		3EA43336294FC7A800C48D85 /* KRKBAK.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = KRKBAK.PCX; path = ../../KRKBAK.PCX; sourceTree = "<group>"; };
+		3EF00A4E28E99F84000AC74A /* BLACK4.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK4.H; path = ../../../CHAP_4/BLACK4.H; sourceTree = "<group>"; };
+		3EF00A4F28E99F84000AC74A /* BLACK4.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK4.C; path = ../../../CHAP_4/BLACK4.C; sourceTree = "<group>"; };
+		EE5BE75C2914126C0099C55B /* BLACK15.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK15.C; path = ../../../CHAP_15/BLACK15.C; sourceTree = "<group>"; };
+		EE5BE75D2914126C0099C55B /* BLACK15.H */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.h; name = BLACK15.H; path = ../../../CHAP_15/BLACK15.H; sourceTree = "<group>"; };
+/* End PBXFileReference section */
+
+/* Begin PBXFrameworksBuildPhase section */
+		2DA6C5A9258AA66B002B1931 /* Frameworks */ = {
+			isa = PBXFrameworksBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXFrameworksBuildPhase section */
+
+/* Begin PBXGroup section */
+		2DA6C5A3258AA66B002B1931 = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AE258AA66B002B1931 /* HostApp */,
+				2DA6C5AD258AA66B002B1931 /* Products */,
+			);
+			sourceTree = "<group>";
+		};
+		2DA6C5AD258AA66B002B1931 /* Products */ = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AC258AA66B002B1931 /* CHAP18 */,
+			);
+			name = Products;
+			sourceTree = "<group>";
+		};
+		2DA6C5AE258AA66B002B1931 /* HostApp */ = {
+			isa = PBXGroup;
+			children = (
+				2D9EAF26258E750E00297C9C /* HostApp.entitlements */,
+				2DA6C5AF258AA66B002B1931 /* main.cpp */,
+				2D9EAF1F258E6A4300297C9C /* sdl.h */,
+				2DB9F18C258EA679000A3299 /* ega.h */,
+				2D2793D725AD90B500DEC620 /* font.h */,
+				3E3C579528E883D300637704 /* BLACK3.C */,
+				3E3C579428E883D300637704 /* BLACK3.H */,
+				3EF00A4F28E99F84000AC74A /* BLACK4.C */,
+				3EF00A4E28E99F84000AC74A /* BLACK4.H */,
+				3E017B4328ECB33A00D286E9 /* BLACK8.C */,
+				3E017B4228ECB33A00D286E9 /* BLACK8.H */,
+				3E2CDEB328F0B76F00594EB2 /* BLACK11.C */,
+				3E2CDEB428F0B76F00594EB2 /* BLACK11.H */,
+				EE5BE75C2914126C0099C55B /* BLACK15.C */,
+				EE5BE75D2914126C0099C55B /* BLACK15.H */,
+				3EA4331F294FC6FA00C48D85 /* KRK.h */,
+				3EA4331D294FBEF100C48D85 /* KRK.C */,
+				3EA43321294FC79A00C48D85 /* BARRIER.PLG */,
+				3EA43329294FC79A00C48D85 /* MISSILE.PLG */,
+				3EA4332F294FC7A800C48D85 /* KFIGSH1.PCX */,
+				3EA4332C294FC7A800C48D85 /* KFIGSH2.PCX */,
+				3EA4332D294FC7A800C48D85 /* KFIGSH3.PCX */,
+				3EA43336294FC7A800C48D85 /* KRKBAK.PCX */,
+				3EA43333294FC7A800C48D85 /* KRKBUTT.PCX */,
+				3EA4332E294FC7A800C48D85 /* KRKCP.PCX */,
+				3EA43332294FC7A800C48D85 /* KRKDIS.PCX */,
+				3EA4332A294FC7A800C48D85 /* KRKFIRST.PCX */,
+				3EA43330294FC7A800C48D85 /* KRKFNT.PCX */,
+				3EA43335294FC7A800C48D85 /* KRKINS.PCX */,
+				3EA4332B294FC7A800C48D85 /* KRKREDP.PCX */,
+				3EA43334294FC7A800C48D85 /* KRKREDPC.PCX */,
+				3EA43331294FC7A800C48D85 /* WAITE.PCX */,
+				3EA43325294FC79A00C48D85 /* PYLONS.PLG */,
+				3EA43322294FC79A00C48D85 /* ROCK.PLG */,
+				3EA43323294FC79A00C48D85 /* SLIDER.PLG */,
+				3EA43327294FC79A00C48D85 /* STATION.PLG */,
+				3EA43324294FC79A00C48D85 /* TALLON.PLG */,
+				3EA43326294FC79A00C48D85 /* TELE.PLG */,
+				3EA43328294FC79A00C48D85 /* TOWER.PLG */,
+				3EA43320294FC76900C48D85 /* MISSILE.PLG */,
+			);
+			path = HostApp;
+			sourceTree = "<group>";
+		};
+/* End PBXGroup section */
+
+/* Begin PBXNativeTarget section */
+		2DA6C5AB258AA66B002B1931 /* CHAP18 */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = 2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP18" */;
+			buildPhases = (
+				2DA6C5A8258AA66B002B1931 /* Sources */,
+				2DA6C5A9258AA66B002B1931 /* Frameworks */,
+				2DA6C5AA258AA66B002B1931 /* CopyFiles */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+			);
+			name = CHAP18;
+			productName = CicParserSim;
+			productReference = 2DA6C5AC258AA66B002B1931 /* CHAP18 */;
+			productType = "com.apple.product-type.tool";
+		};
+/* End PBXNativeTarget section */
+
+/* Begin PBXProject section */
+		2DA6C5A4258AA66B002B1931 /* Project object */ = {
+			isa = PBXProject;
+			attributes = {
+				LastUpgradeCheck = 1240;
+				TargetAttributes = {
+					2DA6C5AB258AA66B002B1931 = {
+						CreatedOnToolsVersion = 12.2;
+					};
+				};
+			};
+			buildConfigurationList = 2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP18" */;
+			compatibilityVersion = "Xcode 9.3";
+			developmentRegion = en;
+			hasScannedForEncodings = 0;
+			knownRegions = (
+				en,
+				Base,
+			);
+			mainGroup = 2DA6C5A3258AA66B002B1931;
+			productRefGroup = 2DA6C5AD258AA66B002B1931 /* Products */;
+			projectDirPath = "";
+			projectRoot = "";
+			targets = (
+				2DA6C5AB258AA66B002B1931 /* CHAP18 */,
+			);
+		};
+/* End PBXProject section */
+
+/* Begin PBXSourcesBuildPhase section */
+		2DA6C5A8258AA66B002B1931 /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				3EA4331E294FBEF100C48D85 /* KRK.C in Sources */,
+				3E017B4428ECB33A00D286E9 /* BLACK8.C in Sources */,
+				3EDBE589294DF13E005E7C2C /* BLACK11.C in Sources */,
+				2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */,
+				3EF00A5928E9A177000AC74A /* BLACK4.C in Sources */,
+				3E3C579628E883D700637704 /* BLACK3.C in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXSourcesBuildPhase section */
+
+/* Begin XCBuildConfiguration section */
+		2DA6C5B1258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = dwarf;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				ENABLE_TESTABILITY = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_OPTIMIZATION_LEVEL = 0;
+				GCC_PREPROCESSOR_DEFINITIONS = (
+					"DEBUG=1",
+					"$(inherited)",
+				);
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Debug;
+		};
+		2DA6C5B2258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				ENABLE_NS_ASSERTIONS = NO;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = NO;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Release;
+		};
+		2DA6C5B4258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = (
+					/opt/homebrew/include/SDL2,
+					/usr/local/include/SDL2,
+				);
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/lib",
+					"-L/usr/local/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Debug;
+		};
+		2DA6C5B5258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = (
+					/opt/homebrew/include/SDL2,
+					/usr/local/include/SDL2,
+				);
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/lib",
+					"-L/usr/local/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Release;
+		};
+/* End XCBuildConfiguration section */
+
+/* Begin XCConfigurationList section */
+		2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP18" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B1258AA66B002B1931 /* Debug */,
+				2DA6C5B2258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP18" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B4258AA66B002B1931 /* Debug */,
+				2DA6C5B5258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+/* End XCConfigurationList section */
+	};
+	rootObject = 2DA6C5A4258AA66B002B1931 /* Project object */;
+}
diff --git a/CHAP_18/HostApp/CHAP18.xcodeproj/project.xcworkspace/contents.xcworkspacedata b/CHAP_18/HostApp/CHAP18.xcodeproj/project.xcworkspace/contents.xcworkspacedata
new file mode 100644
index 0000000..618b21c
--- /dev/null
+++ b/CHAP_18/HostApp/CHAP18.xcodeproj/project.xcworkspace/contents.xcworkspacedata
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "self:/Users/ac27/Dev/black_art/black_art_3d_revival/CHAP_18/HostApp/CHAP18.xcodeproj">
+   </FileRef>
+</Workspace>
diff --git a/CHAP_18/HostApp/CHAP18.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist b/CHAP_18/HostApp/CHAP18.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
new file mode 100644
index 0000000..18d9810
--- /dev/null
+++ b/CHAP_18/HostApp/CHAP18.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IDEDidComputeMac32BitWarning</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_18/HostApp/CHAP18.xcodeproj/xcshareddata/xcschemes/CHAP18.xcscheme b/CHAP_18/HostApp/CHAP18.xcodeproj/xcshareddata/xcschemes/CHAP18.xcscheme
new file mode 100644
index 0000000..2fa9ed8
--- /dev/null
+++ b/CHAP_18/HostApp/CHAP18.xcodeproj/xcshareddata/xcschemes/CHAP18.xcscheme
@@ -0,0 +1,79 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "1400"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+               BuildableName = "CHAP18"
+               BlueprintName = "CHAP18"
+               ReferencedContainer = "container:CHAP18.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES">
+      <Testables>
+      </Testables>
+   </TestAction>
+   <LaunchAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      debugServiceExtension = "internal"
+      allowLocationSimulation = "YES"
+      viewDebuggingEnabled = "No">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+            BuildableName = "CHAP18"
+            BlueprintName = "CHAP18"
+            ReferencedContainer = "container:CHAP18.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </LaunchAction>
+   <ProfileAction
+      buildConfiguration = "Release"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      debugDocumentVersioning = "YES">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "2DA6C5AB258AA66B002B1931"
+            BuildableName = "CHAP18"
+            BlueprintName = "CHAP18"
+            ReferencedContainer = "container:CHAP18.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff --git a/CHAP_18/HostApp/HostApp/HostApp.entitlements b/CHAP_18/HostApp/HostApp/HostApp.entitlements
new file mode 100644
index 0000000..8cc185a
--- /dev/null
+++ b/CHAP_18/HostApp/HostApp/HostApp.entitlements
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>com.apple.security.cs.disable-library-validation</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_18/HostApp/HostApp/KRK.h b/CHAP_18/HostApp/HostApp/KRK.h
new file mode 100644
index 0000000..58bd1c0
--- /dev/null
+++ b/CHAP_18/HostApp/HostApp/KRK.h
@@ -0,0 +1,13 @@
+//
+//  KRK.h
+//  CHAP18
+//
+//  Created by Tosha on 18/12/2022.
+//
+
+#ifndef KRK_h
+#define KRK_h
+
+void start_krk(int argc, char **argv, CEga *ega);
+
+#endif /* KRK_h */
diff --git a/CHAP_18/HostApp/HostApp/ega.h b/CHAP_18/HostApp/HostApp/ega.h
new file mode 100644
index 0000000..0b428d5
--- /dev/null
+++ b/CHAP_18/HostApp/HostApp/ega.h
@@ -0,0 +1,62 @@
+#ifndef EGA_h
+#define EGA_h
+
+#include "font.h"
+
+typedef uint16_t WORD;
+typedef uint8_t BYTE;
+typedef uint8_t FLAG;
+typedef uint16_t WORD;
+
+typedef uint32_t DWORD;
+
+class CVideoAdapter
+{
+public:
+	virtual DWORD GetPixel(int x, int y, int p) = 0;
+};
+
+class CEga : public CVideoAdapter
+{
+	enum {
+		MemSize = 0x10000*2
+	};
+
+public:
+	DWORD memory[MemSize];
+
+    // https://www.ditig.com/256-colors-cheat-sheet
+    // Note: first 16 colors are from VGA palette, rest is from Xterm
+    DWORD palette[256] = {
+        0x000000, 0x00002A, 0x002A00, 0x002A2A, 0x2A0000, 0x2A002A, 0x2A1500, 0x2A2A2A, 0x151515, 0x15153F, 0x153F15, 0x153F3F, 0x3F1515, 0x3F153F, 0x3F3F15, 0x3F3F3F, 0x000000, 0x050505, 0x080808, 0x0B0B0B, 0x0E0E0E, 0x111111, 0x141414, 0x181818, 0x1C1C1C, 0x202020, 0x242424, 0x282828, 0x2D2D2D, 0x323232, 0x383838, 0x3F3F3F, 0x00003F, 0x10003F, 0x1F003F, 0x2F003F, 0x3F003F, 0x3F002F, 0x3F001F, 0x3F0010, 0x3F0000, 0x3F1000, 0x3F1F00, 0x3F2F00, 0x3F3F00, 0x2F3F00, 0x1F3F00, 0x103F00, 0x003F00, 0x003F10, 0x003F1F, 0x003F2F, 0x003F3F, 0x002F3F, 0x001F3F, 0x00103F, 0x1F1F3F, 0x271F3F, 0x2F1F3F, 0x371F3F, 0x3F1F3F, 0x3F1F37, 0x3F1F2F, 0x3F1F27, 0x3F1F1F, 0x3F271F, 0x3F2F1F, 0x3F371F, 0x3F3F1F, 0x373F1F, 0x2F3F1F, 0x273F1F, 0x1F3F1F, 0x1F3F27, 0x1F3F2F, 0x1F3F37, 0x1F3F3F, 0x1F373F, 0x1F2F3F, 0x1F273F, 0x2D2D3F, 0x312D3F, 0x362D3F, 0x3A2D3F, 0x3F2D3F, 0x3F2D3A, 0x3F2D36, 0x3F2D31, 0x3F2D2D, 0x3F312D, 0x3F362D, 0x3F3A2D, 0x3F3F2D, 0x3A3F2D, 0x363F2D, 0x313F2D, 0x2D3F2D, 0x2D3F31, 0x2D3F36, 0x2D3F3A, 0x2D3F3F, 0x2D3A3F, 0x2D363F, 0x2D313F, 0x00001C, 0x07001C, 0x0E001C, 0x15001C, 0x1C001C, 0x1C0015, 0x1C000E, 0x1C0007, 0x1C0000, 0x1C0700, 0x1C0E00, 0x1C1500, 0x1C1C00, 0x151C00, 0x0E1C00, 0x071C00, 0x001C00, 0x001C07, 0x001C0E, 0x001C15, 0x001C1C, 0x00151C, 0x000E1C, 0x00071C, 0x0E0E1C, 0x110E1C, 0x150E1C, 0x180E1C, 0x1C0E1C, 0x1C0E18, 0x1C0E15, 0x1C0E11, 0x1C0E0E, 0x1C110E, 0x1C150E, 0x1C180E, 0x1C1C0E, 0x181C0E, 0x151C0E, 0x111C0E, 0x0E1C0E, 0x0E1C11, 0x0E1C15, 0x0E1C18, 0x0E1C1C, 0x0E181C, 0x0E151C, 0x0E111C, 0x14141C, 0x16141C, 0x18141C, 0x1A141C, 0x1C141C, 0x1C141A, 0x1C1418, 0x1C1416, 0x1C1414, 0x1C1614, 0x1C1814, 0x1C1A14, 0x1C1C14, 0x1A1C14, 0x181C14, 0x161C14, 0x141C14, 0x141C16, 0x141C18, 0x141C1A, 0x141C1C, 0x141A1C, 0x14181C, 0x14161C, 0x000010, 0x040010, 0x080010, 0x0C0010, 0x100010, 0x10000C, 0x100008, 0x100004, 0x100000, 0x100400, 0x100800, 0x100C00, 0x101000, 0x0C1000, 0x081000, 0x041000, 0x001000, 0x001004, 0x001008, 0x00100C, 0x001010, 0x000C10, 0x000810, 0x000410, 0x080810, 0x0A0810, 0x0C0810, 0x0E0810, 0x100810, 0x10080E, 0x10080C, 0x10080A, 0x100808, 0x100A08, 0x100C08, 0x100E08, 0x101008, 0x0E1008, 0x0C1008, 0x0A1008, 0x081008, 0x08100A, 0x08100C, 0x08100E, 0x081010, 0x080E10, 0x080C10, 0x080A10, 0x0B0B10, 0x0C0B10, 0x0D0B10, 0x0F0B10, 0x100B10, 0x100B0F, 0x100B0D, 0x100B0C, 0x100B0B, 0x100C0B, 0x100D0B, 0x100F0B, 0x10100B, 0x0F100B, 0x0D100B, 0x0C100B, 0x0B100B, 0x0B100C, 0x0B100D, 0x0B100F, 0x0B1010, 0x0B0F10, 0x0B0D10, 0x0B0C10, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
+    };
+
+public:
+	CEga()
+	{
+        memset(memory, 0, sizeof(memory));
+	}
+	
+    void SetPaletteIndex(int index, int rgb)
+    {
+        int r = ((rgb & 4) ? 2 : 0) + ((rgb & 32) ? 1 : 0);
+        int g = ((rgb & 2) ? 2 : 0) + ((rgb & 16) ? 1 : 0);
+        int b = ((rgb & 1) ? 2 : 0) + ((rgb & 8) ? 1 : 0);
+        r = r * 255 / 3;
+        g = g * 255 / 3;
+        b = b * 255 / 3;
+        palette[index] = b | (g << 8) | (r << 16);
+
+    }
+    
+	virtual DWORD GetPixel(int x, int y, int page = -1) override
+	{
+        BYTE* _video = (BYTE*)memory;
+        int idx = (int)_video[((y<<8) + (y<<6)) + x];
+        return palette[idx];
+	}
+};
+
+void _sync();
+
+#endif
diff --git a/CHAP_18/HostApp/HostApp/font.h b/CHAP_18/HostApp/HostApp/font.h
new file mode 100644
index 0000000..8be86b2
--- /dev/null
+++ b/CHAP_18/HostApp/HostApp/font.h
@@ -0,0 +1,313 @@
+#ifndef FONT_h
+#define FONT_h
+
+#pragma once
+
+// http://www.hampa.ch/pce/download.html
+// genoa-ega-2.41.rom
+// dd if=genoa-ega-2.41.rom of=font bs=1 skip=8224 count=3584
+// xxd -i font > font.h
+
+static const uint8_t font[] = {
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81,
+  0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xff,
+  0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
+  0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
+  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff,
+  0xff, 0xff, 0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc,
+  0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30,
+  0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x63,
+  0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06,
+  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66,
+  0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xdb,
+  0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c,
+  0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c,
+  0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c,
+  0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06,
+  0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6,
+  0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c,
+  0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x30,
+  0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c,
+  0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38, 0x78, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c,
+  0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66,
+  0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0,
+  0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x6c,
+  0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66,
+  0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x0c,
+  0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66,
+  0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
+  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60,
+  0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x30, 0x30, 0x30,
+  0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0,
+  0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
+  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xff, 0x00, 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76,
+  0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66,
+  0x3c, 0x00, 0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66,
+  0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec,
+  0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60,
+  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c,
+  0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30,
+  0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38,
+  0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38,
+  0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66,
+  0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00, 0x00,
+  0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc,
+  0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x38,
+  0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
+  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe,
+  0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x38,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x66,
+  0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x60,
+  0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c,
+  0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x76,
+  0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x6c,
+  0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00, 0x10,
+  0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00, 0x00, 0xc6,
+  0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60,
+  0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xcc, 0xcc,
+  0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x0e,
+  0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
+  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
+  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
+  0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
+  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06,
+  0x06, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c,
+  0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c,
+  0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x44, 0x11, 0x44,
+  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x55, 0xaa,
+  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
+  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
+  0xdd, 0x77, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
+  0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff,
+  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
+  0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
+  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
+  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30,
+  0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c,
+  0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c,
+  0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00,
+  0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e,
+  0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18,
+  0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00,
+  0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c,
+  0x1c, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8,
+  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+};
+
+#endif
diff --git a/CHAP_18/HostApp/HostApp/main.cpp b/CHAP_18/HostApp/HostApp/main.cpp
new file mode 100644
index 0000000..c986a8a
--- /dev/null
+++ b/CHAP_18/HostApp/HostApp/main.cpp
@@ -0,0 +1,58 @@
+//
+//  main.cpp
+//  HostApp
+//
+//
+
+#include <iostream>
+#include <vector>
+#include <sstream>
+#include <iomanip>
+#include <list>
+
+#include "sdl.h"
+#include "ega.h"
+
+#include "KRK.h"
+
+CEga mVideo;
+CSdl mSdl;
+std::list<int> keyboardBuffer;
+
+void onKey(int k, int p)
+{
+    if (!p)
+        return;
+
+    int key = 0;
+    switch (k)
+    {
+        case SDL_SCANCODE_UP: key = 0x4800; break;
+        case SDL_SCANCODE_DOWN: key = 0x5000; break;
+        case SDL_SCANCODE_LEFT: key = 0x4b00; break;
+        case SDL_SCANCODE_RIGHT: key = 0x4d00; break;
+        case SDL_SCANCODE_SPACE: key = 0x3920; break;
+        case SDL_SCANCODE_RETURN: key = 0x1c0d; break;
+    }
+
+    if (key)
+    {
+        keyboardBuffer.push_back(key);
+    }
+}
+
+void _sync()
+{
+    for (int y=0; y<mSdl.Height; y++)
+      for (int x=0; x<mSdl.Width; x++)
+        mSdl.SetPixel(x, y, mVideo.GetPixel(x, y));
+    
+    mSdl.Loop();
+}
+
+int main(int argc, char * argv[]) {
+    mSdl.Init();
+    start_krk(argc, argv, &mVideo);
+    mSdl.Deinit();
+    return 0;
+}
diff --git a/CHAP_18/HostApp/HostApp/sdl.h b/CHAP_18/HostApp/HostApp/sdl.h
new file mode 100644
index 0000000..2552eec
--- /dev/null
+++ b/CHAP_18/HostApp/HostApp/sdl.h
@@ -0,0 +1,147 @@
+#ifndef SDL_h
+#define SDL_h
+
+typedef uint32_t Uint32;
+#include <SDL.h>
+#include <SDL_render.h>
+
+void onKey(int k, int p);
+
+class CSdl
+{
+    
+    std::vector< unsigned char > pixels;
+
+    SDL_Renderer* renderer{nullptr};
+    SDL_Texture* texture{nullptr};
+    SDL_Window* window{nullptr};
+    bool running{true};
+    int lastKey{0};
+
+public:
+    const int pixelSize = 2;
+    enum {
+        Width = 320,//640,
+        Height = 200//350
+    };
+
+    void Init()
+    {
+        pixels.resize(Width*Height*4);
+        SDL_Init( SDL_INIT_EVERYTHING );
+        atexit( SDL_Quit );
+        
+        window = SDL_CreateWindow
+        (
+         "BlackArt simulator",
+         SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
+         Width*pixelSize, Height*pixelSize,
+         SDL_WINDOW_SHOWN
+         );
+        SDL_RaiseWindow(window);
+        
+        renderer = SDL_CreateRenderer
+        (
+         window,
+         -1,
+         SDL_RENDERER_ACCELERATED
+         );
+
+        texture = SDL_CreateTexture
+        (
+         renderer,
+         SDL_PIXELFORMAT_ARGB8888,
+         SDL_TEXTUREACCESS_STREAMING,
+         Width, Height
+         );
+    }
+    
+    void Blit()
+    {
+        SDL_SetRenderDrawColor( renderer, 0, 0, 0, SDL_ALPHA_OPAQUE );
+        SDL_RenderClear( renderer );
+        
+        SDL_UpdateTexture
+        (
+         texture,
+         NULL,
+         &pixels[0],
+         Width * 4
+         );
+        
+        SDL_RenderCopy( renderer, texture, NULL, NULL );
+        SDL_RenderPresent( renderer );
+    }
+    
+    void Loop()
+    {
+//        SDL_Event event;
+//
+//        while( SDL_PollEvent( &event ) )
+//        {
+//            if (SDL_KEYDOWN == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 1);
+//            }
+//
+//            if (SDL_KEYUP == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 0);
+//            }
+//
+//            if( ( SDL_QUIT == event.type ) ||
+//               ( SDL_KEYDOWN == event.type && SDL_SCANCODE_ESCAPE == event.key.keysym.scancode ) )
+//            {
+//                running = false;
+//                break;
+//            }
+//        }
+        SDL_PollEvent(NULL);
+        
+        Blit();
+
+        //const Uint64 end = SDL_GetPerformanceCounter();
+        //const static Uint64 freq = SDL_GetPerformanceFrequency();
+        //const double seconds = ( end - start ) / static_cast< double >( freq );
+        //std::cout << "Frame time: " << seconds * 1000.0 << "ms" << std::endl;
+//        if (running)
+//            SDL_Delay(20);
+    }
+    
+    void Deinit()
+    {
+        SDL_DestroyRenderer( renderer );
+        SDL_DestroyWindow( window );
+        SDL_Quit();
+    }
+    
+    void SetPixel(int x, int y, uint32_t c)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        c <<= 2;
+        pixels[ offset + 0 ] = (uint8_t)c;
+        pixels[ offset + 1 ] = (uint8_t)(c >> 8);
+        pixels[ offset + 2 ] = (uint8_t)(c >> 16);
+        pixels[ offset + 3 ] = SDL_ALPHA_OPAQUE;
+    }
+
+    uint32_t GetPixel(int x, int y)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        int b = pixels[ offset + 0 ];
+        int g = pixels[ offset + 1 ];
+        int r = pixels[ offset + 2 ];
+        return r | (g << 8) | (b << 16);
+    }
+
+};
+
+#endif
diff --git a/CHAP_18/KRK.C b/CHAP_18/KRK.C
index 41ba90e..d5df1db 100755
--- a/CHAP_18/KRK.C
+++ b/CHAP_18/KRK.C
@@ -3,15 +3,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 
@@ -19,12 +16,13 @@
 
 #include "black3.h"
 #include "black4.h"
-#include "black5.h"
-#include "black6.h"
+//#include "black5.h"
+//#include "black6.h"
 #include "black8.h"
-#include "black9.h"
+//#include "black9.h"
 
-#include "black18.h"    // the newest version of the 3-D library
+//#include "black18.h"    // the newest version of the 3-D library
+#include "BLACK11.H"
 
 // D E F I N E S /////////////////////////////////////////////////////////////
 
@@ -382,11 +380,11 @@ void Draw_Background(int mountain_pos);
 
 void Draw_Box(int x1,int y1,int x2, int y2,int color);
 
-void Tech_Print(int x,int y,char *string,unsigned char far *destination);
+void Tech_Print(int x,int y,char *string,unsigned char *destination);
 
 void Font_Engine_1(int x,int y,
                    int font,int color,
-                   char *string,unsigned char far *destination);
+                   char *string,unsigned char *destination);
 
 void Panel_FX(int reset);
 
@@ -414,7 +412,7 @@ void Digital_FX_Close(void);
 
 int Digital_FX_Play(int the_effect, int priority);
 
-int Parse_Commands(int argc, char **argv);
+void Parse_Commands(int argc, char **argv);
 
 void Draw_Stationary_Objects(void);
 
@@ -454,7 +452,7 @@ pcx_picture image_pcx,        // general PCX image used to load background and i
 sprite tactical_spr,          // holds the images for the tactical displays
        buttons_spr;           // holds the images for the control buttons
 
-RGB_color color_1,color_2;    // used for temporaries during color rotation
+//RGB_color color_1,color_2;    // used for temporaries during color rotation
 
 RGB_palette game_palette;     // this will hold the startup system palette
 
@@ -498,11 +496,11 @@ int game_sequence[]  = {11,8,2,3,1,2,5,8,6,1,0,2,4,5,2,1,0,3,4,8};
 
 int game_seq_index   = 0; // starting game index number of sequence to be played
 
-music song;    // the music structure
-
-// sound fx stuff
-
-sound digital_FX[NUM_SOUND_FX];
+//music song;    // the music structure
+//
+//// sound fx stuff
+//
+//sound digital_FX[NUM_SOUND_FX];
 
 // basic colors
 
@@ -715,24 +713,26 @@ Fill_Screen(0);
 
 // make sure user isn't hitting the enter key still
 
-while(keys_active);
+//while(keys_active);
 
 // enter into main event loop
-
+SDL_Event e;
 while(!done)
      {
      // clear the double buffer
 
-     Fill_Double_Buffer_32(0);
+     Fill_Double_Buffer(0);
 
      // get user input
 
-     if (keys_active)
+     if (SDL_PollEvent( &e ) != 0)
         {
 
+        const Uint8* keyboard_state = SDL_GetKeyboardState(NULL);
+
         // test for various inputs
 
-        if (keyboard_state[MAKE_RIGHT])
+        if (keyboard_state[SDL_SCANCODE_RIGHT])
            {
            // move to next ship
 
@@ -747,7 +747,7 @@ while(!done)
 
            } // end if
         else
-        if (keyboard_state[MAKE_LEFT])
+        if (keyboard_state[SDL_SCANCODE_LEFT])
            {
            // move to previous ship
 
@@ -762,7 +762,7 @@ while(!done)
 
            } // end if
         else
-        if (keyboard_state[MAKE_ENTER])
+        if (keyboard_state[SDL_SCANCODE_RETURN])
            {
            // select the current ship
 
@@ -780,7 +780,7 @@ while(!done)
 
            } // end if
         else
-        if (keyboard_state[MAKE_ESC])
+        if (keyboard_state[SDL_SCANCODE_ESCAPE])
            {
            // exit this menu and go back to main menu
 
@@ -902,7 +902,7 @@ while(!done)
 
      // display double buffer
 
-     Display_Double_Buffer_32(double_buffer,0);
+     Display_Double_Buffer(double_buffer,0);
 
      // slow things down a bit
 
@@ -910,22 +910,22 @@ while(!done)
 
      // check on music
 
-     if (music_enabled)
-        {
-        // test if piece is complete or has been stopped
-
-        if (Music_Status()==2 || Music_Status()==0)
-           {
-           // advance to next sequence
-
-           if (++intro_seq_index==14)
-              intro_seq_index=0;
-
-           Music_Play((music_ptr)&song,intro_sequence[intro_seq_index]);
-
-           } // end if
-
-        } // end if music enabled
+//     if (music_enabled)
+//        {
+//        // test if piece is complete or has been stopped
+//
+//        if (Music_Status()==2 || Music_Status()==0)
+//           {
+//           // advance to next sequence
+//
+//           if (++intro_seq_index==14)
+//              intro_seq_index=0;
+//
+//           Music_Play((music_ptr)&song,intro_sequence[intro_seq_index]);
+//
+//           } // end if
+//
+//        } // end if music enabled
 
      } // end while
 
@@ -2713,7 +2713,7 @@ color = SKY_COLOR_1;
 color = color | (color << 8);
 color = color | (color << 16);
 
-fquadset(double_buffer, color, 4*320/4);
+memset(double_buffer, color, 4*320);
 
 // draw layer 2
 
@@ -2722,7 +2722,7 @@ color = SKY_COLOR_2;
 color = color | (color << 8);
 color = color | (color << 16);
 
-fquadset(double_buffer+320*4, color, 8*320/4);
+memset(double_buffer+320*4, color, 8*320);
 
 // draw layer 3
 
@@ -2731,7 +2731,7 @@ color = SKY_COLOR_3;
 color = color | (color << 8);
 color = color | (color << 16);
 
-fquadset(double_buffer+320*12, color, 44*320/4);
+memset(double_buffer+320*12, color, 44*320);
 
 // now draw the scrolling mountainscape
 
@@ -2747,7 +2747,7 @@ color = GND_COLOR_1;
 color = color | (color << 8);
 color = color | (color << 16);
 
-fquadset(double_buffer+320*99, color, 3*320/4);
+memset(double_buffer+320*99, color, 3*320);
 
 // layer 2
 
@@ -2756,14 +2756,14 @@ color = GND_COLOR_2;
 color = color | (color << 8);
 color = color | (color << 16);
 
-fquadset(double_buffer+320*102, color, 6*320/4);
+memset(double_buffer+320*102, color, 6*320);
 
 color = GND_COLOR_3;
 
 color = color | (color << 8);
 color = color | (color << 16);
 
-fquadset(double_buffer+320*108, color, 21*320/4);
+memset(double_buffer+320*108, color, 21*320);
 
 } // end Draw_Background
 
@@ -2782,7 +2782,7 @@ Line_V(y1,y2,x2,color);
 
 ///////////////////////////////////////////////////////////////////////////////
 
-void Tech_Print(int x,int y,char *string,unsigned char far *destination)
+void Tech_Print(int x,int y,char *string,unsigned char *destination)
 {
 // this function is used to print text out like a teletypwriter,it looks
 // cool, trust me!
@@ -2833,7 +2833,7 @@ for (index=0; index<length; index++)
 
 void Font_Engine_1(int x,int y,
                    int font,int color,
-                   char *string,unsigned char far *destination)
+                   char *string,unsigned char *destination)
 {
 // this function prints a string out using one of the graphics fonts that
 // we have drawn, note this first version doesn't use the font field, but
@@ -2876,7 +2876,7 @@ if (!font_loaded)
        tech_font[index].y = 1 + (index / 16) * (TECH_FONT_HEIGHT+1);
 
        Bitmap_Get((bitmap_ptr)&tech_font[index],
-                  (unsigned char far *)image_pcx.buffer);
+                  (unsigned char *)image_pcx.buffer);
 
        } // end for index
    // font is loaded, delete pcx file and set flag
@@ -2892,7 +2892,7 @@ else
 
    // pre-compute length of string
 
-   length=strlen(string);
+   length = string == NULL ? 0 : strlen(string);
 
    // print the string character by character
 
@@ -2910,7 +2910,7 @@ else
        // display bitmap
 
        Bitmap_Put((bitmap_ptr)&tech_font[c_index],
-                  (unsigned char far*)destination,0);
+                  (unsigned char*)destination,0);
 
        // move to next character position
 
@@ -3026,7 +3026,7 @@ int index; // looping variable
 
 // data output fields
 
-static char *template[]={"PLANET:   ",
+static char *_template[]={"PLANET:   ",
                          "TYPE:     ",
                          "MASS:     ",
                          "TEMP:     ",
@@ -3069,7 +3069,7 @@ for (index=0; index<7; index++)
     // draw header field
 
     Font_Engine_1(START_MESS_X,START_MESS_Y+index*10,0,0,
-                  template[index],
+                  _template[index],
                   video_buffer);
 
 
@@ -3116,14 +3116,14 @@ Fill_Screen(0);
 
 Write_Palette(0,255,(RGB_palette_ptr)&game_palette);
 
-if (music_enabled)
-   {
-   Music_Stop();
-   Music_Play((music_ptr)&song,11);
-   } // end if
+//if (music_enabled)
+//   {
+//   Music_Stop();
+//   Music_Play((music_ptr)&song,11);
+//   } // end if
 
 // print out the credits
-
+SDL_Event e;
 for (index=0; index<=11; index++)
     {
 
@@ -3131,7 +3131,7 @@ for (index=0; index<=11; index++)
                8+index*(TECH_FONT_HEIGHT+4),
                extra_credits[index],video_buffer);
 
-    if (keys_active)
+    if (SDL_PollEvent( &e ) != 0)
        return;
 
     Time_Delay(10);
@@ -3144,11 +3144,11 @@ Time_Delay(50);
 
 for (index=0; index<135; index++)
     {
-    fquadcpy(video_buffer,video_buffer+320,16000-80);
+    memcpy(video_buffer,video_buffer+320,16000-80);
 
     // test for exit
 
-    if (keys_active)
+    if (SDL_PollEvent( &e ) != 0)
        return;
 
     } // end for index
@@ -3267,15 +3267,16 @@ for (index=0; index<NUM_LINES_PAGE; index++)
     Font_Engine_1(78,24+index*8,0,0,instructions[index+page*17],video_buffer);
 
 // enter main event loop
-
+SDL_Event e;
 while(!done)
      {
      // has the user pressed a key
 
-     if (keys_active>0)
+     if (SDL_PollEvent( &e ) != 0)
         {
+        const Uint8* keyboard_state = SDL_GetKeyboardState(NULL);
 
-        if (keyboard_state[MAKE_UP])
+        if (keyboard_state[SDL_SCANCODE_UP])
            {
            // page up
 
@@ -3290,7 +3291,7 @@ while(!done)
 
            } // end if up
 
-        if (keyboard_state[MAKE_DOWN])
+        if (keyboard_state[SDL_SCANCODE_DOWN])
            {
            // page down
 
@@ -3305,7 +3306,7 @@ while(!done)
 
            } // end if down
 
-        if (keyboard_state[MAKE_ESC])
+        if (keyboard_state[SDL_SCANCODE_ESCAPE])
            {
 
            Digital_FX_Play(KRKKEY_VOC,3);
@@ -3327,22 +3328,22 @@ while(!done)
 
      // check on music
 
-     if (music_enabled)
-        {
-        // test if piece is complete or has been stopped
-
-        if (Music_Status()==2 || Music_Status()==0)
-           {
-           // advance to next sequence
-
-           if (++intro_seq_index==14)
-              intro_seq_index=0;
-
-           Music_Play((music_ptr)&song,intro_sequence[intro_seq_index]);
-
-           } // end if
-
-        } // end if music enabled
+//     if (music_enabled)
+//        {
+//        // test if piece is complete or has been stopped
+//
+//        if (Music_Status()==2 || Music_Status()==0)
+//           {
+//           // advance to next sequence
+//
+//           if (++intro_seq_index==14)
+//              intro_seq_index=0;
+//
+//           Music_Play((music_ptr)&song,intro_sequence[intro_seq_index]);
+//
+//           } // end if
+//
+//        } // end if music enabled
 
      } // end main while
 
@@ -3385,18 +3386,18 @@ void Music_Init(void)
 
 static int loaded=0;
 
-// has the music already been loaded
-
-if (!music_enabled)
-   return;
-
-if (!loaded)
-   {
-   Music_Load("krkmus.xmi",(music_ptr)&song);
-   loaded=1;
-   } // end if not loaded
-
-// reset sequence counters
+//// has the music already been loaded
+//
+//if (!music_enabled)
+//   return;
+//
+//if (!loaded)
+//   {
+//   Music_Load("krkmus.xmi",(music_ptr)&song);
+//   loaded=1;
+//   } // end if not loaded
+//
+//// reset sequence counters
 
 game_seq_index=0;
 intro_seq_index=0;
@@ -3409,13 +3410,13 @@ void Music_Close(void)
 {
 // this function unloads the music files
 
-if (!music_enabled)
-   return;
-
-// turn off music and unload song
-
-Music_Stop();
-Music_Unload((music_ptr)&song);
+//if (!music_enabled)
+//   return;
+//
+//// turn off music and unload song
+//
+//Music_Stop();
+//Music_Unload((music_ptr)&song);
 
 } // end Music_Close
 
@@ -3427,30 +3428,30 @@ void Digital_FX_Init(void)
 
 static int loaded=0;
 
-if (!digital_enabled)
-   return;
-
-// have the sound fx been loaded?
-
-if (!loaded)
-   {
-   // load int sounds
-
-   Sound_Load("KRKMIS.VOC" ,  (sound_ptr)&digital_FX[KRKMIS_VOC ] ,1);
-   Sound_Load("KRKEMIS2.VOC",  (sound_ptr)&digital_FX[KRKEMIS_VOC],1);
-   Sound_Load("KRKTAC.VOC" ,  (sound_ptr)&digital_FX[KRKTAC_VOC ],1);
-   Sound_Load("KRKSCN.VOC" ,  (sound_ptr)&digital_FX[KRKSCN_VOC ],1);
-   Sound_Load("KRKHUD.VOC" ,  (sound_ptr)&digital_FX[KRKHUD_VOC ],1);
-
-   Sound_Load("KRKKEY.VOC" ,  (sound_ptr)&digital_FX[KRKKEY_VOC ],1);
-   Sound_Load("KRKEX1.VOC" ,  (sound_ptr)&digital_FX[KRKEX1_VOC ],1);
-   Sound_Load("KRKEX2.VOC" ,  (sound_ptr)&digital_FX[KRKEX2_VOC ],1);
-
-   // set loaded flag
-
-   loaded=1;
-
-   } // end if sound effects aren't loaded
+//if (!digital_enabled)
+//   return;
+//
+//// have the sound fx been loaded?
+//
+//if (!loaded)
+//   {
+//   // load int sounds
+//
+//   Sound_Load("KRKMIS.VOC" ,  (sound_ptr)&digital_FX[KRKMIS_VOC ] ,1);
+//   Sound_Load("KRKEMIS2.VOC",  (sound_ptr)&digital_FX[KRKEMIS_VOC],1);
+//   Sound_Load("KRKTAC.VOC" ,  (sound_ptr)&digital_FX[KRKTAC_VOC ],1);
+//   Sound_Load("KRKSCN.VOC" ,  (sound_ptr)&digital_FX[KRKSCN_VOC ],1);
+//   Sound_Load("KRKHUD.VOC" ,  (sound_ptr)&digital_FX[KRKHUD_VOC ],1);
+//
+//   Sound_Load("KRKKEY.VOC" ,  (sound_ptr)&digital_FX[KRKKEY_VOC ],1);
+//   Sound_Load("KRKEX1.VOC" ,  (sound_ptr)&digital_FX[KRKEX1_VOC ],1);
+//   Sound_Load("KRKEX2.VOC" ,  (sound_ptr)&digital_FX[KRKEX2_VOC ],1);
+//
+//   // set loaded flag
+//
+//   loaded=1;
+//
+//   } // end if sound effects aren't loaded
 
 } // end Digital_FX_Init
 
@@ -3460,21 +3461,21 @@ void Digital_FX_Close(void)
 {
 // this function unloads all the digital FX
 
-if (!digital_enabled)
-   return;
-
-// unload all the sound fx from memory
-
-Sound_Unload((sound_ptr)&digital_FX[KRKMIS_VOC]);
-Sound_Unload((sound_ptr)&digital_FX[KRKEMIS_VOC]);
-Sound_Unload((sound_ptr)&digital_FX[KRKTAC_VOC]);
-Sound_Unload((sound_ptr)&digital_FX[KRKSCN_VOC]);
-Sound_Unload((sound_ptr)&digital_FX[KRKHUD_VOC]);
-
-Sound_Unload((sound_ptr)&digital_FX[KRKPOW_VOC]);
-Sound_Unload((sound_ptr)&digital_FX[KRKKEY_VOC]);
-Sound_Unload((sound_ptr)&digital_FX[KRKEX1_VOC]);
-Sound_Unload((sound_ptr)&digital_FX[KRKEX2_VOC]);
+//if (!digital_enabled)
+//   return;
+//
+//// unload all the sound fx from memory
+//
+//Sound_Unload((sound_ptr)&digital_FX[KRKMIS_VOC]);
+//Sound_Unload((sound_ptr)&digital_FX[KRKEMIS_VOC]);
+//Sound_Unload((sound_ptr)&digital_FX[KRKTAC_VOC]);
+//Sound_Unload((sound_ptr)&digital_FX[KRKSCN_VOC]);
+//Sound_Unload((sound_ptr)&digital_FX[KRKHUD_VOC]);
+//
+//Sound_Unload((sound_ptr)&digital_FX[KRKPOW_VOC]);
+//Sound_Unload((sound_ptr)&digital_FX[KRKKEY_VOC]);
+//Sound_Unload((sound_ptr)&digital_FX[KRKEX1_VOC]);
+//Sound_Unload((sound_ptr)&digital_FX[KRKEX2_VOC]);
 
 } // end Digital_FX_Close
 
@@ -3492,34 +3493,34 @@ int Digital_FX_Play(int the_effect, int priority)
 
 // is the digital fx system on-line?
 
-if (!digital_enabled)
-   return(0);
-
-// is there a sound playing?
-
-if (!Sound_Status() || (priority <= digital_FX_priority))
-   {
-   // start new sound
-
-   Sound_Stop();
-
-   Sound_Play((sound_ptr)&digital_FX[the_effect]);
-
-   // set the priority
-
-   digital_FX_priority = priority;
-
-   return(1);
-
-   } // end if
-else // the current sound is of higher priority
+//if (!digital_enabled)
+//   return(0);
+//
+//// is there a sound playing?
+//
+//if (!Sound_Status() || (priority <= digital_FX_priority))
+//   {
+//   // start new sound
+//
+//   Sound_Stop();
+//
+//   Sound_Play((sound_ptr)&digital_FX[the_effect]);
+//
+//   // set the priority
+//
+//   digital_FX_priority = priority;
+//
+//   return(1);
+//
+//   } // end if
+//else // the current sound is of higher priority
    return(0);
 
 } // end Digital_FX_Play
 
 /////////////////////////////////////////////////////////////////////////////
 
-int Parse_Commands(int argc, char **argv)
+void Parse_Commands(int argc, char **argv)
 {
 // this function is used to parse the commands line parameters that are to be
 // used as switched to enable different modes of operation
@@ -3585,7 +3586,7 @@ for (index=0; index<NUM_OBSTACLES_1; index++)
 
        // remove the backfaces and shade object
 
-       Remove_Backfaces_And_Shade(&static_obj[OBSTACLES_1_TEMPLATE],-1);
+           Remove_Backfaces_And_Shade(&static_obj[OBSTACLES_1_TEMPLATE],-1);
 
        // convert world coordinates to camera coordinate
 
@@ -3781,7 +3782,7 @@ for (index=0; index<NUM_TELEPODS; index++)
 
        // remove the backfaces and shade object
 
-       Remove_Backfaces_And_Shade(&static_obj[TELEPODS_TEMPLATE],-1);
+      Remove_Backfaces_And_Shade(&static_obj[TELEPODS_TEMPLATE],-1);
 
        // convert world coordinates to camera coordinate
 
@@ -4100,7 +4101,7 @@ for (index=0; index<NUM_STATIONS; index++)
 
 // M A I N //////////////////////////////////////////////////////////////////
 
-void main(int argc, char **argv)
+void start_krk(int argc, char **argv, CEga *ega)
 {
 
 // the main controls most of the platyer and remote logic, normally we would
@@ -4143,15 +4144,15 @@ Parse_Commands(argc,argv);
 
 // set the graphics mode to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // start up music system
 
-if (music_enabled)
-   {
-   Music_Init();
-   Music_Play((music_ptr)&song,16);
-   } // end if music enabled
+//if (music_enabled)
+//   {
+//   Music_Init();
+//   Music_Play((music_ptr)&song,16);
+//   } // end if music enabled
 
 //INTRODUCTION SECTION/////////////////////////////////////////////////////////
 
@@ -4182,7 +4183,7 @@ Tech_Print(START_MESS_X,START_MESS_Y+26," DOUBLE BUFFER CREATED",video_buffer);
 
 // install the keyboard driver
 
-Keyboard_Install_Driver();
+//Keyboard_Install_Driver();
 Tech_Print(START_MESS_X,START_MESS_Y+36," NEURAL INTERFACE ACTIVATED",video_buffer);
 
 // load and create background layer
@@ -4206,12 +4207,12 @@ Tech_Print(START_MESS_X,START_MESS_Y+56," TACTICAL ONLINE",video_buffer);
 
 // memory problem
 
-if (digital_enabled)
-   {
-   Sound_Load("KRKPOW.VOC" ,  (sound_ptr)&digital_FX[KRKPOW_VOC ],1);
-   Digital_FX_Play(KRKPOW_VOC,3);
-   Sound_Unload((sound_ptr)&digital_FX[KRKPOW_VOC]);
-   } // end if
+//if (digital_enabled)
+//   {
+//   Sound_Load("KRKPOW.VOC" ,  (sound_ptr)&digital_FX[KRKPOW_VOC ],1);
+//   Digital_FX_Play(KRKPOW_VOC,3);
+//   Sound_Unload((sound_ptr)&digital_FX[KRKPOW_VOC]);
+//   } // end if
 
 // end memory problem
 
@@ -4251,12 +4252,12 @@ Read_Palette(0,255,(RGB_palette_ptr)&game_palette);
 
 
 // main event loop ///////////////////////////////////////////////////////////
-
+SDL_Event e;
+const Uint8* keyboard_state;
 while(game_state!=GAME_OVER)
      {
      // test the overall game state
 
-
 //SETUP SECTION////////////////////////////////////////////////////////////////
 
      if (game_state==GAME_SETUP)
@@ -4292,8 +4293,10 @@ while(game_state!=GAME_OVER)
              // this event loop is for the setup phase
 
              // test for up or down
+             SDL_PollEvent( &e );
+             keyboard_state = SDL_GetKeyboardState(NULL);
 
-             if (keyboard_state[MAKE_UP])
+             if (keyboard_state[SDL_SCANCODE_UP])
                 {
 
                 // erase current cursor position
@@ -4337,7 +4340,7 @@ while(game_state!=GAME_OVER)
 
                 } // end if
 
-             if (keyboard_state[MAKE_DOWN])
+             if (keyboard_state[SDL_SCANCODE_DOWN])
                 {
 
                 // erase current cursor position
@@ -4384,7 +4387,7 @@ while(game_state!=GAME_OVER)
 
              // test for a selection via enter key
 
-             if (keyboard_state[MAKE_ENTER])
+             if (keyboard_state[SDL_SCANCODE_RETURN])
                 {
 
                 Digital_FX_Play(KRKKEY_VOC,3);
@@ -4461,24 +4464,25 @@ while(game_state!=GAME_OVER)
 
              if (music_enabled)
                 {
-                // test if piece is complete or has been stopped
-
-                if (Music_Status()==2 || Music_Status()==0)
-                   {
-                   // advance to next sequence
-
-                   if (++intro_seq_index==14)
-                      intro_seq_index=0;
-
-                   Music_Play((music_ptr)&song,intro_sequence[intro_seq_index]);
-
-                   } // end if
-
+//                // test if piece is complete or has been stopped
+//
+//                if (Music_Status()==2 || Music_Status()==0)
+//                   {
+//                   // advance to next sequence
+//
+//                   if (++intro_seq_index==14)
+//                      intro_seq_index=0;
+//
+//                   Music_Play((music_ptr)&song,intro_sequence[intro_seq_index]);
+//
+//                   } // end if
+//
                 } // end if music enabled
 
              // do special fx
 
              Panel_FX(0);
+             _sync();
 
              } // end setup event loop
 
@@ -4506,21 +4510,21 @@ while(game_state!=GAME_OVER)
 
         // start music
 
-        if (music_enabled)
-           {
-           Music_Stop();
-
-           // start from begining sequence
-
-           game_seq_index=0;
-
-           Music_Play((music_ptr)&song,game_sequence[game_seq_index]);
-
-           } // end if music enabled
+//        if (music_enabled)
+//           {
+//           Music_Stop();
+//
+//           // start from begining sequence
+//
+//           game_seq_index=0;
+//
+//           Music_Play((music_ptr)&song,game_sequence[game_seq_index]);
+//
+//           } // end if music enabled
 
         // clear double buffer
 
-        Fill_Double_Buffer_32(0);
+        Fill_Double_Buffer(0);
 
         // load in instrument area
 
@@ -4550,10 +4554,12 @@ while(game_state!=GAME_OVER)
              starting_time = Timer_Query();
 
              // keyboard input section
+             SDL_PollEvent( &e );
+             keyboard_state = SDL_GetKeyboardState(NULL);
 
              // change ship velocity
 
-             if (keyboard_state[MAKE_UP])
+             if (keyboard_state[SDL_SCANCODE_UP])
                 {
                 // speed up
 
@@ -4562,7 +4568,7 @@ while(game_state!=GAME_OVER)
 
                 } // end if speed increase
 
-             if (keyboard_state[MAKE_DOWN])
+             if (keyboard_state[SDL_SCANCODE_DOWN])
                 {
                 // slow down
 
@@ -4573,7 +4579,7 @@ while(game_state!=GAME_OVER)
 
              // test for turns
 
-             if (keyboard_state[MAKE_RIGHT])
+             if (keyboard_state[SDL_SCANCODE_RIGHT])
                 {
                 // rotate ship to right
 
@@ -4582,7 +4588,7 @@ while(game_state!=GAME_OVER)
 
                 } // end if
 
-             if (keyboard_state[MAKE_LEFT])
+             if (keyboard_state[SDL_SCANCODE_LEFT])
                 {
 
                 // rotate ship to left
@@ -4594,7 +4600,7 @@ while(game_state!=GAME_OVER)
 
              // test for weapons fire
 
-             if (keyboard_state[MAKE_SPACE])
+             if (keyboard_state[SDL_SCANCODE_SPACE])
                 {
                 // fire a missile
 
@@ -4619,7 +4625,7 @@ while(game_state!=GAME_OVER)
 
               // left hand scanner
 
-              if (keyboard_state[MAKE_S])
+              if (keyboard_state[SDL_SCANCODE_S])
                  {
                  if (scanner_state==1)
                     {
@@ -4653,7 +4659,7 @@ while(game_state!=GAME_OVER)
 
              // right half tactical display
 
-             if (keyboard_state[MAKE_T])
+             if (keyboard_state[SDL_SCANCODE_T])
                 {
 
                 // test if tactical was off
@@ -4686,7 +4692,7 @@ while(game_state!=GAME_OVER)
 
              // heads up display
 
-             if (keyboard_state[MAKE_H])
+             if (keyboard_state[SDL_SCANCODE_H])
                 {
                 // toggle hud
 
@@ -4715,7 +4721,7 @@ while(game_state!=GAME_OVER)
 
              // test for exit
 
-             if (keyboard_state[MAKE_ESC])
+             if (keyboard_state[SDL_SCANCODE_ESCAPE])
                 game_state=GAME_SETUP;
 
 
@@ -4885,35 +4891,36 @@ while(game_state!=GAME_OVER)
                 // test for time intervals
 
                 if (ship_timer>5 && (rand()%3)==1)
-                   Fill_Double_Buffer_32(SHIP_FLAME_COLOR+rand()%16);
+                   Fill_Double_Buffer(SHIP_FLAME_COLOR+rand()%16);
 
                 } // end if ship hit
 
              // display double buffer
 
-             Display_Double_Buffer_32(double_buffer,0);
+             Display_Double_Buffer(double_buffer,0);
+             _sync();
 
              // lock onto 18 frames per second max
 
-             while((Timer_Query()-starting_time)<1);
+             while((Timer_Query()-starting_time)<CLOCKS_PER_SEC/18);
 
              // check on music
 
-             if (music_enabled)
-                {
-                if (Music_Status()==2 || Music_Status()==0)
-                   {
-
-                   // advance to next sequence
-
-                   if (++game_seq_index==21)
-                      game_seq_index=0;
-
-                   Music_Play((music_ptr)&song,game_sequence[game_seq_index]);
-
-                    } // end if
-
-                 } // end if music enabled
+//             if (music_enabled)
+//                {
+//                if (Music_Status()==2 || Music_Status()==0)
+//                   {
+//
+//                   // advance to next sequence
+//
+//                   if (++game_seq_index==21)
+//                      game_seq_index=0;
+//
+//                   Music_Play((music_ptr)&song,game_sequence[game_seq_index]);
+//
+//                    } // end if
+//
+//                 } // end if music enabled
 
              } // end game loop
 
@@ -4923,15 +4930,15 @@ while(game_state!=GAME_OVER)
 
         // restart intro music
 
-        if (music_enabled)
-           {
-           // stop game music, start intro music again
-
-           intro_seq_index=0;
-           Music_Stop();
-           Music_Play((music_ptr)&song,intro_sequence[intro_seq_index]);
-
-           } // end if music enabled
+//        if (music_enabled)
+//           {
+//           // stop game music, start intro music again
+//
+//           intro_seq_index=0;
+//           Music_Stop();
+//           Music_Play((music_ptr)&song,intro_sequence[intro_seq_index]);
+//
+//           } // end if music enabled
 
         } // end if running
 
@@ -4961,14 +4968,12 @@ Music_Close();
 
 // remove the keyboard handler
 
-Keyboard_Remove_Driver();
+//Keyboard_Remove_Driver();
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 // see ya!
 
 printf("\nKILL OR BE KILLED:Normal Shutdown.\n");
 
 } // end main
-
-
\ No newline at end of file
diff --git a/CHAP_3/BLACK3.C b/CHAP_3/BLACK3.C
index b5261eb..2f4830f 100755
--- a/CHAP_3/BLACK3.C
+++ b/CHAP_3/BLACK3.C
@@ -1,24 +1,31 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
+//#include <io.h>
+//#include <conio.h>
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
+//#include <dos.h>
+//#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
+//#include <malloc.h>
 #include <math.h>
 #include <string.h>
 
-#include "black3.h"   // the header file for this module
+#include <time.h>
+
+#include "BLACK3.H"   // the header file for this module
+#include "font.h"
 
 // G L O B A L S //////////////////////////////////////////////////////////////
 
-unsigned char far *video_buffer = (unsigned char far *)0xA0000000L;
-unsigned char far *rom_char_set = (unsigned char far *)0xF000FA6EL;
+unsigned char *video_buffer;// = (unsigned char *)0xA0000000L;
+unsigned char *rom_char_set = (unsigned char *)font;
+
+uint32_t *palette;
 
 // F U N C T I O N S /////////////////////////////////////////////////////////
 
@@ -33,7 +40,7 @@ int offset,               // offset into video memory
          x,               // loop variable
          y;               // loop variable
 
-unsigned char far *work_char; // pointer to character being printed
+unsigned char *work_char; // pointer to character being printed
 
 unsigned char bit_mask;       // bitmask used to extract proper bit
 
@@ -133,18 +140,21 @@ return((int)(video_buffer[((y<<8) + (y<<6)) + x]));
 
 //////////////////////////////////////////////////////////////////////////////
 
-void Set_Graphics_Mode(int mode)
+void Set_Graphics_Mode(CEga *ega, int mode)
 {
 
-// use the video interrupt 10h and the C interrupt function to set
-// the video mode
-
-union REGS inregs,outregs;
+video_buffer = (unsigned char *)&ega->memory;
+palette = ega->palette;
 
-inregs.h.ah = 0;                    // set video mode sub-function
-inregs.h.al = (unsigned char)mode;  // video mode to change to
-
-_int86(0x10, &inregs, &outregs);
+//// use the video interrupt 10h and the C interrupt function to set
+//// the video mode
+//
+//union REGS inregs,outregs;
+//
+//inregs.h.ah = 0;                    // set video mode sub-function
+//inregs.h.al = (unsigned char)mode;  // video mode to change to
+//
+//_int86(0x10, &inregs, &outregs);
 
 } // end Set_Graphics_Mode
 
@@ -156,18 +166,22 @@ void Time_Delay(int clicks)
 // the actual amount of real time is the number of clicks * (time per click)
 // usually the time per click is set to 1/18th of a second or 55ms
 
-long far *clock = (long far *)0x0000046CL; // address of timer
-
-long start_time; // starting time
-
-// get current time
-
-start_time = *clock;
-
-// when the current time minus the starting time >= the requested delay then
-// the function can exit
-
-while(labs(*clock - start_time) < (long)clicks){}
+_sync();
+SDL_Delay(clicks * 55);
+    
+////long far *clock = (long far *)0x0000046CL; // address of timer
+//
+//long start_time; // starting time
+//
+//// get current time
+//
+//start_time = clock();
+//
+//// when the current time minus the starting time >= the requested delay then
+//// the function can exit
+//
+//while(labs(clock() - start_time) < (long)(CLOCKS_PER_SEC * clicks / 18)){}
+//_sync();
 
 } // end Time_Delay
 
@@ -192,7 +206,7 @@ if (x1>x2)
 
 // draw the row of pixels
 
-_fmemset((char far *)(video_buffer + ((y<<8) + (y<<6)) + x1),
+memset((char *)(video_buffer + ((y<<8) + (y<<6)) + x1),
          (unsigned char)color,x2-x1+1);
 
 } // end Line_H
@@ -205,7 +219,7 @@ void Line_V(int y1,int y2,int x,int color)
 // used since the pixel addresses are no longer contiguous in memory
 // note that the end points of the line must be on the screen
 
-unsigned char far *start_offset; // starting memory offset of line
+unsigned char *start_offset; // starting memory offset of line
 
 int index, // loop index
     temp;  // used for temporary storage during swap
@@ -242,20 +256,22 @@ for (index=0; index<=y2-y1; index++)
 void Write_Color_Reg(int index, RGB_color_ptr color)
 {
 
+palette[index] = (color->red << 16) | (color->green << 8) | color->blue;
+
 // this function is used to write a color register with the RGB value
 // within "color"
 
 // tell vga card which color register to update
 
-_outp(COLOR_REGISTER_WR, index);
-
-// update the color register RGB triple, note the same port is used each time
-// the hardware will make sure each of the components is stored in the
-// proper location
-
-_outp(COLOR_DATA,color->red);
-_outp(COLOR_DATA,color->green);
-_outp(COLOR_DATA,color->blue);
+//_outp(COLOR_REGISTER_WR, index);
+//
+//// update the color register RGB triple, note the same port is used each time
+//// the hardware will make sure each of the components is stored in the
+//// proper location
+//
+//_outp(COLOR_DATA,color->red);
+//_outp(COLOR_DATA,color->green);
+//_outp(COLOR_DATA,color->blue);
 
 } // end Write_Color_Reg
 
@@ -264,20 +280,26 @@ _outp(COLOR_DATA,color->blue);
 RGB_color_ptr Read_Color_Reg(int index, RGB_color_ptr color)
 {
 
+color->red = (palette[index] >> 16) & 0x7f;
+color->green = (palette[index] >> 8) & 0x7f;
+color->blue = palette[index] & 0x7f;
+//color->red = (palette[index] >> 18) & 0x7f;
+//color->green = (palette[index] >> 10) & 0x7f;
+//color->blue = (palette[index] >> 2) & 0x7f;
 // this function reads the RGB triple out of a palette register and places it
 // into "color"
 
 // tell vga card which register to read
 
-_outp(COLOR_REGISTER_RD, index);
-
-// now extract the data
-
-color->red   = (unsigned char)_inp(COLOR_DATA);
-color->green = (unsigned char)_inp(COLOR_DATA);
-color->blue  = (unsigned char)_inp(COLOR_DATA);
-
-// return a pointer to color so that the function can be used as an RVALUE
+//_outp(COLOR_REGISTER_RD, index);
+//
+//// now extract the data
+//
+//color->red   = (unsigned char)_inp(COLOR_DATA);
+//color->green = (unsigned char)_inp(COLOR_DATA);
+//color->blue  = (unsigned char)_inp(COLOR_DATA);
+//
+//// return a pointer to color so that the function can be used as an RVALUE
 
 return(color);
 
@@ -347,7 +369,7 @@ void Draw_Rectangle(int x1,int y1,int x2,int y2,int color)
 // and (x1,y1) is the upper left hand corner and (x2,y2) is the lower
 // right hand corner
 
-unsigned char far *start_offset;   // starting memory offset of first row
+unsigned char *start_offset;   // starting memory offset of first row
 
 int width;   // width of rectangle
 
@@ -365,7 +387,7 @@ while(y1++<=y2)
      {
      // draw the line
 
-     _fmemset((char far *)start_offset,(unsigned char)color,width);
+     memset((char *)start_offset,(unsigned char)color,width);
 
      // move the memory pointer to the next line
 
@@ -380,23 +402,27 @@ while(y1++<=y2)
 void Fill_Screen(int color)
 {
 // this function will fill the entire screen with the sent color
+    
+    for (int y=0; y<200; y++)
+      for (int x=0; x<320; x++)
+          video_buffer[((y<<8) + (y<<6)) + x] = (unsigned char)color;
 
 // use the inline assembler for speed
 
-_asm
-   {
-
-   les di,video_buffer   ; point es:di to video buffer
-
-   mov al,BYTE PTR color ; move the color into al and ah
-
-   mov ah,al             ; replicate color into ah
-
-   mov cx,320*200/2      ; number of words to fill(using word is faster than bytes)
-
-   rep stosw             ; move the color into the video buffer really fast!
-
-   } // end inline asm
+//_asm
+//   {
+//
+//   les di,video_buffer   ; point es:di to video buffer
+//
+//   mov al,BYTE PTR color ; move the color into al and ah
+//
+//   mov ah,al             ; replicate color into ah
+//
+//   mov cx,320*200/2      ; number of words to fill(using word is faster than bytes)
+//
+//   rep stosw             ; move the color into the video buffer really fast!
+//
+//   } // end inline asm
 
 } // end Fill_Screen
 
@@ -404,22 +430,25 @@ _asm
 
 void Fill_Screen_Z(int color)
 {
+
+throw "Fill_Screen_Z is not implemented.";
+
 // this function will fill the mode Z video buffer with the sent color
 
 // use the inline assembler for speed
 
-_asm
-   {
-   mov dx,SEQUENCER          ; address the sequencer
-   mov al,SEQ_PLANE_ENABLE   ; select the plane enable register
-   mov ah,0fh                ; enable all four planes
-   out dx,ax                 ; do it baby!
-   les di,video_buffer   ; point es:di to video buffer
-   mov al,BYTE PTR color ; move the color into al and ah
-   mov ah,al             ; replicate color into ah
-   mov cx,320*400/8      ; number of words to fill(using word is faster than bytes)
-   rep stosw             ; move the color into the video buffer really fast!
-   } // end inline asm
+//_asm
+//   {
+//   mov dx,SEQUENCER          ; address the sequencer
+//   mov al,SEQ_PLANE_ENABLE   ; select the plane enable register
+//   mov ah,0fh                ; enable all four planes
+//   out dx,ax                 ; do it baby!
+//   les di,video_buffer   ; point es:di to video buffer
+//   mov al,BYTE PTR color ; move the color into al and ah
+//   mov ah,al             ; replicate color into ah
+//   mov cx,320*400/8      ; number of words to fill(using word is faster than bytes)
+//   rep stosw             ; move the color into the video buffer really fast!
+//   } // end inline asm
 
 } // end Fill_Screen_Z
 
@@ -428,26 +457,28 @@ _asm
 void Write_Pixel_Z(int x,int y,int color)
 {
 
+throw "Write_Pixel_Z is not implemented.";
+
 // this function will write a pixel to screen in mode Z
 
 // first select the proper color plane use inline for speed
 // if we used C then there would be a function call and about 10-15 more
 // instructions!
 
-_asm
-   {
-   mov dx,SEQUENCER          ; address the sequencer
-   mov al,SEQ_PLANE_ENABLE   ; select the plane enable register
-   mov cl,BYTE PTR x         ; extract lower byte from x
-   and cl,03h                ; extract the plane number = x MOD 4
-   mov ah,1                  ; a "1" selects the plane in the plane enable
-   shl ah,cl                 ; shift the "1" bit proper number of times
-   out dx,ax                 ; do it baby!
-   } // end asm
+//_asm
+//   {
+//   mov dx,SEQUENCER          ; address the sequencer
+//   mov al,SEQ_PLANE_ENABLE   ; select the plane enable register
+//   mov cl,BYTE PTR x         ; extract lower byte from x
+//   and cl,03h                ; extract the plane number = x MOD 4
+//   mov ah,1                  ; a "1" selects the plane in the plane enable
+//   shl ah,cl                 ; shift the "1" bit proper number of times
+//   out dx,ax                 ; do it baby!
+//   } // end asm
 
 // write the pixel, offset = (y*320+x)/4
 
-video_buffer[(y<<6)+(y<<4)+(x>>2)] = (unsigned char )color;
+//video_buffer[(y<<6)+(y<<4)+(x>>2)] = (unsigned char )color;
 
 } // end Write_Pixel_Z
 
@@ -455,83 +486,83 @@ video_buffer[(y<<6)+(y<<4)+(x>>2)] = (unsigned char )color;
 
 void Set_Mode_Z(void)
 {
+throw "Set_Mode_Z is not implemented.";
+
 // this function will set the video mode to 320x400x256
 
-int data;  // used to store data
+//int data;  // used to store data
 
 // set system to mode 13h and use it as a foundation to base 320x400 mode on
 
-_asm
-   {
-   mov ax,0013h  ; ah=function number 00(set graphics mode), al=13h
-   int 10h       ; video interrupt 10h
-   } // end asm
+//_asm
+//   {
+//   mov ax,0013h  ; ah=function number 00(set graphics mode), al=13h
+//   int 10h       ; video interrupt 10h
+//   } // end asm
 
 // make changes to the crt controller first
 
 // set number of scanlines to 1
 
-_outp(CRT_CONTROLLER,CRT_MAX_SCANLINE);
-data=_inp(CRT_CONTROLLER+1);
-_outp(CRT_CONTROLLER+1,RESET_BITS(data,0x0f));
-
-// use byte addressing instead of word
-
-_outp(CRT_CONTROLLER,CRT_ADDR_MODE);
-data=_inp(CRT_CONTROLLER+1);
-_outp(CRT_CONTROLLER+1,RESET_BITS(data,0x40));
-
-// second register that needs to reflect byte addressing
-
-_outp(CRT_CONTROLLER,CRT_MODE_CONTROL);
-data=_inp(CRT_CONTROLLER+1);
-_outp(CRT_CONTROLLER+1,SET_BITS(data,0x40));
-
-// make changes to graphics controller
-
-// set addressing to not use odd/even memory writes
-
-_outp(GFX_CONTROLLER,GFX_WRITE_MODE);
-data=_inp(GFX_CONTROLLER+1);
-_outp(GFX_CONTROLLER+1,RESET_BITS(data,0x10));
-
-// don't chain the memory maps together
-
-_outp(GFX_CONTROLLER,GFX_MISC);
-data=_inp(GFX_CONTROLLER+1);
-_outp(GFX_CONTROLLER+1,RESET_BITS(data,0x02));
-
-// make changes to sequencer
-
-// again we must select no chaining and no odd/even memory addressing
-
-_outp(SEQUENCER,SEQ_MEMORY_MODE);
-data =_inp(SEQUENCER+1);
-data = RESET_BITS(data,0x08);
-data = SET_BITS(data,0x04);
-_outp(SEQUENCER+1,data);
-
-// now clear the screen
-
-_outp(SEQUENCER,SEQ_PLANE_ENABLE);
-_outp(SEQUENCER+1,0x0f);
-
-// clear the screen, remember it is 320x400, but that is divided into four
-// planes, hence we need only to clear 32k out since there will ne four planes
-// each being cleared in parallel for a total of 4*32k or 128 = 320x400
-// note: "k" in this example means 1000 not 1024
-
-_asm
-   {
-
-   les di,video_buffer   ; point es:di to video buffer, same addre for mode Z
-   xor ax,ax             ; move a zero into al and ah
-   mov cx,320*400/8      ; number of words to fill(using word is faster than bytes)
-   rep stosw             ; move the color into the video buffer really fast!
-
-   } // end inline asm
+//_outp(CRT_CONTROLLER,CRT_MAX_SCANLINE);
+//data=_inp(CRT_CONTROLLER+1);
+//_outp(CRT_CONTROLLER+1,RESET_BITS(data,0x0f));
+//
+//// use byte addressing instead of word
+//
+//_outp(CRT_CONTROLLER,CRT_ADDR_MODE);
+//data=_inp(CRT_CONTROLLER+1);
+//_outp(CRT_CONTROLLER+1,RESET_BITS(data,0x40));
+//
+//// second register that needs to reflect byte addressing
+//
+//_outp(CRT_CONTROLLER,CRT_MODE_CONTROL);
+//data=_inp(CRT_CONTROLLER+1);
+//_outp(CRT_CONTROLLER+1,SET_BITS(data,0x40));
+//
+//// make changes to graphics controller
+//
+//// set addressing to not use odd/even memory writes
+//
+//_outp(GFX_CONTROLLER,GFX_WRITE_MODE);
+//data=_inp(GFX_CONTROLLER+1);
+//_outp(GFX_CONTROLLER+1,RESET_BITS(data,0x10));
+//
+//// don't chain the memory maps together
+//
+//_outp(GFX_CONTROLLER,GFX_MISC);
+//data=_inp(GFX_CONTROLLER+1);
+//_outp(GFX_CONTROLLER+1,RESET_BITS(data,0x02));
+//
+//// make changes to sequencer
+//
+//// again we must select no chaining and no odd/even memory addressing
+//
+//_outp(SEQUENCER,SEQ_MEMORY_MODE);
+//data =_inp(SEQUENCER+1);
+//data = RESET_BITS(data,0x08);
+//data = SET_BITS(data,0x04);
+//_outp(SEQUENCER+1,data);
+//
+//// now clear the screen
+//
+//_outp(SEQUENCER,SEQ_PLANE_ENABLE);
+//_outp(SEQUENCER+1,0x0f);
+//
+//// clear the screen, remember it is 320x400, but that is divided into four
+//// planes, hence we need only to clear 32k out since there will ne four planes
+//// each being cleared in parallel for a total of 4*32k or 128 = 320x400
+//// note: "k" in this example means 1000 not 1024
+//
+//_asm
+//   {
+//
+//   les di,video_buffer   ; point es:di to video buffer, same addre for mode Z
+//   xor ax,ax             ; move a zero into al and ah
+//   mov cx,320*400/8      ; number of words to fill(using word is faster than bytes)
+//   rep stosw             ; move the color into the video buffer really fast!
+//
+//   } // end inline asm
 
 } // end Set_Mode_Z
 
-
-
\ No newline at end of file
diff --git a/CHAP_3/BLACK3.H b/CHAP_3/BLACK3.H
index 269abef..fafd5b2 100755
--- a/CHAP_3/BLACK3.H
+++ b/CHAP_3/BLACK3.H
@@ -1,3 +1,7 @@
+#ifndef BLACK3_h
+#define BLACK3_h
+
+#include "ega.h"
 
 // Header file for chapter 3 - BLACK3.H
 
@@ -15,7 +19,7 @@
 #define ROM_CHAR_SET_OFF 0xFA6E   // begining offset of 8x8 ROM character set
 
 #define ROM_CHAR_WIDTH      8     // width of ROM 8x8 character set in pixels
-#define ROM_CHAR_HEIGHT     8     // height of ROM 8x8 character set in pixels
+#define ROM_CHAR_HEIGHT     14     // height of ROM 8x8 character set in pixels
 
 #define MODE13_WIDTH   (unsigned int)320 // mode 13h screen dimensions
 #define MODE13_HEIGHT  (unsigned int)200
@@ -75,9 +79,9 @@
 typedef struct RGB_color_typ
         {
 
-        unsigned char red;    // red   component of color 0-63
-        unsigned char green;  // green component of color 0-63
-        unsigned char blue;   // blue  component of color 0-63
+        uint8_t red;    // red   component of color 0-63
+        uint8_t green;  // green component of color 0-63
+        uint8_t blue;   // blue  component of color 0-63
 
         } RGB_color, *RGB_color_ptr;
 
@@ -102,7 +106,7 @@ void Write_Pixel(int x,int y,int color);
 
 int Read_Pixel(int x,int y);
 
-void Set_Graphics_Mode(int mode);
+void Set_Graphics_Mode(CEga *ega,  int mode);
 
 void Time_Delay(int clicks);
 
@@ -130,8 +134,7 @@ void Set_Mode_Z(void);
 
 // G L O B A L S /////////////////////////////////////////////////////////////
 
-extern unsigned char far *video_buffer;   // video ram byte ptr
-extern unsigned char far *rom_char_set;   // rom characters 8x8
-
+extern unsigned char *video_buffer;   // video ram byte ptr
+extern unsigned char *rom_char_set;   // rom characters 8x8
 
-
\ No newline at end of file
+#endif
diff --git a/CHAP_3/HostApp/CHAP3.xcodeproj/project.pbxproj b/CHAP_3/HostApp/CHAP3.xcodeproj/project.pbxproj
new file mode 100644
index 0000000..c960b8a
--- /dev/null
+++ b/CHAP_3/HostApp/CHAP3.xcodeproj/project.pbxproj
@@ -0,0 +1,325 @@
+// !$*UTF8*$!
+{
+	archiveVersion = 1;
+	classes = {
+	};
+	objectVersion = 50;
+	objects = {
+
+/* Begin PBXBuildFile section */
+		2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 2DA6C5AF258AA66B002B1931 /* main.cpp */; };
+		3E48A2EB28E25E830076C7AC /* MODE13.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E48A2E928E25E830076C7AC /* MODE13.C */; };
+		3E48A2EC28E25E830076C7AC /* BLACK3.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E48A2EA28E25E830076C7AC /* BLACK3.C */; };
+/* End PBXBuildFile section */
+
+/* Begin PBXCopyFilesBuildPhase section */
+		2DA6C5AA258AA66B002B1931 /* CopyFiles */ = {
+			isa = PBXCopyFilesBuildPhase;
+			buildActionMask = 2147483647;
+			dstPath = /usr/share/man/man1/;
+			dstSubfolderSpec = 0;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 1;
+		};
+/* End PBXCopyFilesBuildPhase section */
+
+/* Begin PBXFileReference section */
+		2D2793D725AD90B500DEC620 /* font.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = font.h; sourceTree = "<group>"; };
+		2D9EAF1F258E6A4300297C9C /* sdl.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = sdl.h; sourceTree = "<group>"; };
+		2D9EAF26258E750E00297C9C /* HostApp.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = HostApp.entitlements; sourceTree = "<group>"; };
+		2DA6C5AC258AA66B002B1931 /* CHAP3 */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = CHAP3; sourceTree = BUILT_PRODUCTS_DIR; };
+		2DA6C5AF258AA66B002B1931 /* main.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = main.cpp; sourceTree = "<group>"; };
+		2DB9F18C258EA679000A3299 /* ega.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = ega.h; sourceTree = "<group>"; };
+		3E48A2E728E25E830076C7AC /* MODE13.H */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.h; name = MODE13.H; path = ../../MODE13.H; sourceTree = "<group>"; };
+		3E48A2E828E25E830076C7AC /* BLACK3.H */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.h; name = BLACK3.H; path = ../../BLACK3.H; sourceTree = "<group>"; };
+		3E48A2E928E25E830076C7AC /* MODE13.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = MODE13.C; path = ../../MODE13.C; sourceTree = "<group>"; };
+		3E48A2EA28E25E830076C7AC /* BLACK3.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK3.C; path = ../../BLACK3.C; sourceTree = "<group>"; };
+/* End PBXFileReference section */
+
+/* Begin PBXFrameworksBuildPhase section */
+		2DA6C5A9258AA66B002B1931 /* Frameworks */ = {
+			isa = PBXFrameworksBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXFrameworksBuildPhase section */
+
+/* Begin PBXGroup section */
+		2DA6C5A3258AA66B002B1931 = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AE258AA66B002B1931 /* HostApp */,
+				2DA6C5AD258AA66B002B1931 /* Products */,
+			);
+			sourceTree = "<group>";
+		};
+		2DA6C5AD258AA66B002B1931 /* Products */ = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AC258AA66B002B1931 /* CHAP3 */,
+			);
+			name = Products;
+			sourceTree = "<group>";
+		};
+		2DA6C5AE258AA66B002B1931 /* HostApp */ = {
+			isa = PBXGroup;
+			children = (
+				2D9EAF26258E750E00297C9C /* HostApp.entitlements */,
+				2DA6C5AF258AA66B002B1931 /* main.cpp */,
+				2D9EAF1F258E6A4300297C9C /* sdl.h */,
+				2DB9F18C258EA679000A3299 /* ega.h */,
+				2D2793D725AD90B500DEC620 /* font.h */,
+				3E48A2EA28E25E830076C7AC /* BLACK3.C */,
+				3E48A2E828E25E830076C7AC /* BLACK3.H */,
+				3E48A2E928E25E830076C7AC /* MODE13.C */,
+				3E48A2E728E25E830076C7AC /* MODE13.H */,
+			);
+			path = HostApp;
+			sourceTree = "<group>";
+		};
+/* End PBXGroup section */
+
+/* Begin PBXNativeTarget section */
+		2DA6C5AB258AA66B002B1931 /* CHAP3 */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = 2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP3" */;
+			buildPhases = (
+				2DA6C5A8258AA66B002B1931 /* Sources */,
+				2DA6C5A9258AA66B002B1931 /* Frameworks */,
+				2DA6C5AA258AA66B002B1931 /* CopyFiles */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+			);
+			name = CHAP3;
+			productName = CicParserSim;
+			productReference = 2DA6C5AC258AA66B002B1931 /* CHAP3 */;
+			productType = "com.apple.product-type.tool";
+		};
+/* End PBXNativeTarget section */
+
+/* Begin PBXProject section */
+		2DA6C5A4258AA66B002B1931 /* Project object */ = {
+			isa = PBXProject;
+			attributes = {
+				LastUpgradeCheck = 1240;
+				TargetAttributes = {
+					2DA6C5AB258AA66B002B1931 = {
+						CreatedOnToolsVersion = 12.2;
+					};
+				};
+			};
+			buildConfigurationList = 2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP3" */;
+			compatibilityVersion = "Xcode 9.3";
+			developmentRegion = en;
+			hasScannedForEncodings = 0;
+			knownRegions = (
+				en,
+				Base,
+			);
+			mainGroup = 2DA6C5A3258AA66B002B1931;
+			productRefGroup = 2DA6C5AD258AA66B002B1931 /* Products */;
+			projectDirPath = "";
+			projectRoot = "";
+			targets = (
+				2DA6C5AB258AA66B002B1931 /* CHAP3 */,
+			);
+		};
+/* End PBXProject section */
+
+/* Begin PBXSourcesBuildPhase section */
+		2DA6C5A8258AA66B002B1931 /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				3E48A2EB28E25E830076C7AC /* MODE13.C in Sources */,
+				2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */,
+				3E48A2EC28E25E830076C7AC /* BLACK3.C in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXSourcesBuildPhase section */
+
+/* Begin XCBuildConfiguration section */
+		2DA6C5B1258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = dwarf;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				ENABLE_TESTABILITY = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_OPTIMIZATION_LEVEL = 0;
+				GCC_PREPROCESSOR_DEFINITIONS = (
+					"DEBUG=1",
+					"$(inherited)",
+				);
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Debug;
+		};
+		2DA6C5B2258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				ENABLE_NS_ASSERTIONS = NO;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = NO;
+				MTL_FAST_MATH = YES;
+				SDKROOT = macosx;
+			};
+			name = Release;
+		};
+		2DA6C5B4258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = (
+					/opt/homebrew/include/SDL2,
+					/usr/local/include/SDL2,
+				);
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/lib",
+					"-L/usr/local/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Debug;
+		};
+		2DA6C5B5258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = (
+					/opt/homebrew/include/SDL2,
+					/usr/local/include/SDL2,
+				);
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/lib",
+					"-L/usr/local/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Release;
+		};
+/* End XCBuildConfiguration section */
+
+/* Begin XCConfigurationList section */
+		2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP3" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B1258AA66B002B1931 /* Debug */,
+				2DA6C5B2258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP3" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B4258AA66B002B1931 /* Debug */,
+				2DA6C5B5258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+/* End XCConfigurationList section */
+	};
+	rootObject = 2DA6C5A4258AA66B002B1931 /* Project object */;
+}
diff --git a/CHAP_3/HostApp/CHAP3.xcodeproj/project.xcworkspace/contents.xcworkspacedata b/CHAP_3/HostApp/CHAP3.xcodeproj/project.xcworkspace/contents.xcworkspacedata
new file mode 100644
index 0000000..bd876c3
--- /dev/null
+++ b/CHAP_3/HostApp/CHAP3.xcodeproj/project.xcworkspace/contents.xcworkspacedata
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "self:/Users/ac27/Dev/black_art/black_art_3d_revival/CHAP_3/HostApp/CHAP3.xcodeproj">
+   </FileRef>
+</Workspace>
diff --git a/CHAP_3/HostApp/CHAP3.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist b/CHAP_3/HostApp/CHAP3.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
new file mode 100644
index 0000000..18d9810
--- /dev/null
+++ b/CHAP_3/HostApp/CHAP3.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IDEDidComputeMac32BitWarning</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_3/HostApp/HostApp/HostApp.entitlements b/CHAP_3/HostApp/HostApp/HostApp.entitlements
new file mode 100644
index 0000000..8cc185a
--- /dev/null
+++ b/CHAP_3/HostApp/HostApp/HostApp.entitlements
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>com.apple.security.cs.disable-library-validation</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_3/HostApp/HostApp/cpu.cpp b/CHAP_3/HostApp/HostApp/cpu.cpp
new file mode 100644
index 0000000..fdf299e
--- /dev/null
+++ b/CHAP_3/HostApp/HostApp/cpu.cpp
@@ -0,0 +1,316 @@
+//
+//  cpu.c
+//  HostApp
+//
+//  Created by Tosha on 25/09/2022.
+//
+
+#include "cpu.h"
+
+#include <iostream>
+#include <sstream>
+#include <iomanip>
+#include <list>
+
+template <class DST, class SRC, class DIR>
+void _movsb()
+{
+    //memory[adr(_es, _di)] = memory[adr(_ds, _si)];
+    DIR::Assert();
+    DST::Set8(_es, DIR::Move(_di), SRC::Get8(_ds, DIR::Move(_si)));
+}
+
+
+
+template <class DST, class SRC, class DIR>
+void _rep_movsb()
+{
+    _ASSERT(_cx < 0x6000);
+    _ASSERT(_cx);
+    while (_cx--)
+        _movsb<DST, SRC, DIR>();
+    _cx = 0;
+}
+
+template <class DST, class SRC, class DIR>
+void _movsw()
+{
+    DIR::Assert();
+    DST::Set8(_es, DIR::Move(_di), SRC::Get8(_ds, DIR::Move(_si)));
+    DST::Set8(_es, DIR::Move(_di), SRC::Get8(_ds, DIR::Move(_si)));
+}
+
+template <class DST, class SRC, class DIR>
+void _rep_movsw()
+{
+    _ASSERT(_cx < 0x6000);
+    _ASSERT(_cx);
+    while (_cx--)
+        _movsw<DST, SRC, DIR>();
+    _cx = 0;
+}
+
+template <class DST, class DIR>
+void _rep_stosb()
+{
+    _ASSERT(_cx < 0x7000);
+    _ASSERT(_cx);
+    while (_cx--)
+        _stosb<DST, DIR>();
+    _cx = 0;
+}
+
+template <class DST, class DIR>
+void _stosb()
+{
+    DIR::Assert();
+    DST::Set8(_es, DIR::Move(_di), _al);
+}
+
+template <class DST, class DIR>
+void _rep_stosw()
+{
+    _ASSERT(_cx == 0x7a34 || _cx < 0x5000);
+    if (_cx)
+    {
+        while (_cx--)
+            _stosw<DST, DIR>();
+        _cx = 0;
+
+    }
+}
+
+template <class DST, class DIR>
+void _stosw()
+{
+    DIR::Assert();
+    DST::Set8(_es, DIR::Move(_di), _al);
+    DST::Set8(_es, DIR::Move(_di), _ah);
+}
+/*
+template <class SRC, class DIR>
+void _rep_lodsw()
+{
+    _ASSERT(_cx);
+    while (_cx--)
+        _lodsw<SRC, DIR>();
+    _cx = 0;
+}*/
+
+template <class SRC, class DIR>
+void _lodsw()
+{
+    DIR::Assert();
+    _al = SRC::Get8(_ds, DIR::Move(_si));
+    _ah = SRC::Get8(_ds, DIR::Move(_si));
+}
+
+template <class SRC, class DIR>
+void _lodsb()
+{
+    DIR::Assert();
+    _al = SRC::Get8(_ds, DIR::Move(_si));
+}
+
+
+std::vector<WORD> m_arrStack;
+//
+
+void StackWrite(int nOffset, WORD nData)
+{
+    _ASSERT(nOffset/2 >= 0 && nOffset/2 < (int)m_arrStack.size());
+    _ASSERT((nOffset&1) == 0);
+    m_arrStack[nOffset/2] = nData;
+}
+
+WORD StackRead(int nOffset)
+{
+    _ASSERT(nOffset/2 >= 0 && nOffset/2 < (int)m_arrStack.size());
+    _ASSERT((nOffset&1) == 0);
+    return m_arrStack[nOffset/2];
+}
+
+void _push(WORD data)
+{
+    StackWrite(_sp, data);
+    _sp -= 2;
+}
+
+WORD _pop()
+{
+    _sp += 2;
+    return StackRead(_sp);
+}
+
+void _xchg(BYTE& a, BYTE& b) { BYTE t = a; a = b; b = t; }
+void _xchg(WORD& a, WORD& b) { WORD t = a; a = b; b = t; }
+//void _lea(WORD& r, WORD o) { _ASSERT(0); }
+void _lea(WORD& r, WORD s, WORD o)
+{
+    r = o;
+}
+
+void _repne_scasw();
+void _les(WORD& reg, WORD addr)
+{
+    reg = memory16(_ds, addr);
+    _es = memory16(_ds, addr+2);
+}
+template <typename INT>
+INT rol(INT val) {
+    return (val << 1) | (val >> (sizeof(INT)*CHAR_BIT-1));
+}
+template <typename INT>
+INT ror(INT val) {
+    return (val >> 1) | (val << (sizeof(INT)*CHAR_BIT-1));
+}
+
+void _rol(WORD& b, BYTE l)
+{
+    _ASSERT(l>=0 && l <= 7);
+    while (l--) b = rol<WORD>(b);
+}
+
+void _rol(BYTE& b, BYTE l)
+{
+    _ASSERT(l>=0 && l <= 7);
+    while (l--) b = rol<BYTE>(b);
+}
+
+void _ror(WORD & b, BYTE l)
+{
+    _ASSERT(l == 1);
+    b = ror<WORD>(b);
+}
+
+
+void _ror(BYTE& b, BYTE l)
+{
+    _ASSERT(l == 1);
+    b = ror<BYTE>(b);
+}
+
+void _div(WORD& r)
+{
+    _ASSERT(r != 0);
+    WORD result = _ax / r;
+    WORD remain = _ax % r;
+    _ax = result;
+    _dx = remain;
+}
+
+void _rcl(WORD& r, BYTE c)
+{
+    _ASSERT(c == 1);
+    int newCarry = !!(r & 0x8000);
+    r <<= 1;
+    r |= _flags.carry;
+    _flags.carry = newCarry;
+}
+
+void _cwd()
+{
+    if (_ax & 0x8000)
+        _dx = 0xffff;
+    else
+        _dx = 0x0000;
+}
+
+void _rcl(BYTE& r, BYTE c)
+{
+    _ASSERT(c == 1);
+    int newCarry = !!(r & 0x80);
+    r <<= 1;
+    r |= _flags.carry;
+    _flags.carry = newCarry;
+}
+
+void _repne_scasb()
+{
+    _ASSERT(_flags.direction == 0);
+    _flags.zero = 0;
+    while ( _cx-- && _flags.zero == 0 )
+    {
+        _flags.zero = (_al - memory(_es, _di)) == 0;
+        _di++;
+    }
+}
+
+void _idiv(WORD d)
+{
+    // DX:AX / d -> AX result, DX remainder
+    int32_t dw = (_dx << 16) | _ax;
+    WORD result = dw / d;
+    WORD remainder = dw % d;
+    _ax = result;
+    _dx = remainder;
+}
+
+void _div(BYTE dby)
+{
+  int res = _ax / dby;
+  int rem = _ax % dby;
+  _al = res;
+  _ah = rem;
+}
+
+void _sar(WORD& a, BYTE b)
+{
+    int16_t& sa = (short&)a;
+    sa >>= b;
+}
+
+void _cbw()
+{
+    if (_al & 0x80)
+        _ah = 0xff;
+    else
+        _ah = 0;
+}
+
+WORD& _stack16(int ofs)
+{
+    int nOffset = ofs;
+    _ASSERT(nOffset/2 >= 0 && nOffset/2 < (int)m_arrStack.size());
+    _ASSERT((nOffset&1) == 0);
+    return m_arrStack.data()[nOffset/2];
+}
+
+WORD& _stack16(int a, int b)
+{
+    return _stack16(a+b);
+}
+
+void _stackReduce(int n)
+{
+    _sp += n;
+    _ASSERT( _sp >= 0 && _sp < m_arrStack.size());
+}
+
+void _mul(WORD w)
+{
+    int v = w * _ax;
+    _ax = v & 0xffff;
+    _dx = v >> 16;
+}
+void _mul(BYTE b)
+{
+    int v = b * _ax;
+    _ax = v & 0xffff;
+}
+
+void _xlat()
+{
+    _al = memory(_ds, _bx+_al);
+}
+
+void _repne_scasw()
+{
+    _ASSERT(0);
+}
+
+bool _fixme_()
+{
+    _ASSERT(0);
+    return false;
+}
diff --git a/CHAP_3/HostApp/HostApp/ega.h b/CHAP_3/HostApp/HostApp/ega.h
new file mode 100644
index 0000000..d3f3feb
--- /dev/null
+++ b/CHAP_3/HostApp/HostApp/ega.h
@@ -0,0 +1,61 @@
+#ifndef EGA_h
+#define EGA_h
+
+#include "font.h"
+
+typedef uint16_t WORD;
+typedef uint8_t BYTE;
+typedef uint8_t FLAG;
+typedef uint16_t WORD;
+
+typedef uint32_t DWORD;
+
+class CVideoAdapter
+{
+public:
+	virtual DWORD GetPixel(int x, int y, int p) = 0;
+};
+
+class CEga : public CVideoAdapter
+{
+	enum {
+		MemSize = 0x10000*2
+	};
+
+public:
+	DWORD memory[MemSize];
+
+    // from https://ffmpeg-devel.ffmpeg.narkive.com/KN7SkXlW/default-vga-palette
+    DWORD palette[256] = {
+        0x000000, 0x00002A, 0x002A00, 0x002A2A, 0x2A0000, 0x2A002A, 0x2A1500, 0x2A2A2A, 0x151515, 0x15153F, 0x153F15, 0x153F3F, 0x3F1515, 0x3F153F, 0x3F3F15, 0x3F3F3F, 0x000000, 0x050505, 0x080808, 0x0B0B0B, 0x0E0E0E, 0x111111, 0x141414, 0x181818, 0x1C1C1C, 0x202020, 0x242424, 0x282828, 0x2D2D2D, 0x323232, 0x383838, 0x3F3F3F, 0x00003F, 0x10003F, 0x1F003F, 0x2F003F, 0x3F003F, 0x3F002F, 0x3F001F, 0x3F0010, 0x3F0000, 0x3F1000, 0x3F1F00, 0x3F2F00, 0x3F3F00, 0x2F3F00, 0x1F3F00, 0x103F00, 0x003F00, 0x003F10, 0x003F1F, 0x003F2F, 0x003F3F, 0x002F3F, 0x001F3F, 0x00103F, 0x1F1F3F, 0x271F3F, 0x2F1F3F, 0x371F3F, 0x3F1F3F, 0x3F1F37, 0x3F1F2F, 0x3F1F27, 0x3F1F1F, 0x3F271F, 0x3F2F1F, 0x3F371F, 0x3F3F1F, 0x373F1F, 0x2F3F1F, 0x273F1F, 0x1F3F1F, 0x1F3F27, 0x1F3F2F, 0x1F3F37, 0x1F3F3F, 0x1F373F, 0x1F2F3F, 0x1F273F, 0x2D2D3F, 0x312D3F, 0x362D3F, 0x3A2D3F, 0x3F2D3F, 0x3F2D3A, 0x3F2D36, 0x3F2D31, 0x3F2D2D, 0x3F312D, 0x3F362D, 0x3F3A2D, 0x3F3F2D, 0x3A3F2D, 0x363F2D, 0x313F2D, 0x2D3F2D, 0x2D3F31, 0x2D3F36, 0x2D3F3A, 0x2D3F3F, 0x2D3A3F, 0x2D363F, 0x2D313F, 0x00001C, 0x07001C, 0x0E001C, 0x15001C, 0x1C001C, 0x1C0015, 0x1C000E, 0x1C0007, 0x1C0000, 0x1C0700, 0x1C0E00, 0x1C1500, 0x1C1C00, 0x151C00, 0x0E1C00, 0x071C00, 0x001C00, 0x001C07, 0x001C0E, 0x001C15, 0x001C1C, 0x00151C, 0x000E1C, 0x00071C, 0x0E0E1C, 0x110E1C, 0x150E1C, 0x180E1C, 0x1C0E1C, 0x1C0E18, 0x1C0E15, 0x1C0E11, 0x1C0E0E, 0x1C110E, 0x1C150E, 0x1C180E, 0x1C1C0E, 0x181C0E, 0x151C0E, 0x111C0E, 0x0E1C0E, 0x0E1C11, 0x0E1C15, 0x0E1C18, 0x0E1C1C, 0x0E181C, 0x0E151C, 0x0E111C, 0x14141C, 0x16141C, 0x18141C, 0x1A141C, 0x1C141C, 0x1C141A, 0x1C1418, 0x1C1416, 0x1C1414, 0x1C1614, 0x1C1814, 0x1C1A14, 0x1C1C14, 0x1A1C14, 0x181C14, 0x161C14, 0x141C14, 0x141C16, 0x141C18, 0x141C1A, 0x141C1C, 0x141A1C, 0x14181C, 0x14161C, 0x000010, 0x040010, 0x080010, 0x0C0010, 0x100010, 0x10000C, 0x100008, 0x100004, 0x100000, 0x100400, 0x100800, 0x100C00, 0x101000, 0x0C1000, 0x081000, 0x041000, 0x001000, 0x001004, 0x001008, 0x00100C, 0x001010, 0x000C10, 0x000810, 0x000410, 0x080810, 0x0A0810, 0x0C0810, 0x0E0810, 0x100810, 0x10080E, 0x10080C, 0x10080A, 0x100808, 0x100A08, 0x100C08, 0x100E08, 0x101008, 0x0E1008, 0x0C1008, 0x0A1008, 0x081008, 0x08100A, 0x08100C, 0x08100E, 0x081010, 0x080E10, 0x080C10, 0x080A10, 0x0B0B10, 0x0C0B10, 0x0D0B10, 0x0F0B10, 0x100B10, 0x100B0F, 0x100B0D, 0x100B0C, 0x100B0B, 0x100C0B, 0x100D0B, 0x100F0B, 0x10100B, 0x0F100B, 0x0D100B, 0x0C100B, 0x0B100B, 0x0B100C, 0x0B100D, 0x0B100F, 0x0B1010, 0x0B0F10, 0x0B0D10, 0x0B0C10, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
+    };
+
+public:
+	CEga()
+	{
+        memset(memory, 0, sizeof(memory));
+	}
+	
+    void SetPaletteIndex(int index, int rgb)
+    {
+        int r = ((rgb & 4) ? 2 : 0) + ((rgb & 32) ? 1 : 0);
+        int g = ((rgb & 2) ? 2 : 0) + ((rgb & 16) ? 1 : 0);
+        int b = ((rgb & 1) ? 2 : 0) + ((rgb & 8) ? 1 : 0);
+        r = r * 255 / 3;
+        g = g * 255 / 3;
+        b = b * 255 / 3;
+        palette[index] = b | (g << 8) | (r << 16);
+
+    }
+    
+	virtual DWORD GetPixel(int x, int y, int page = -1) override
+	{
+        BYTE* _video = (BYTE*)memory;
+        int idx = (int)_video[((y<<8) + (y<<6)) + x];
+        return palette[idx];
+	}
+};
+
+void _sync();
+
+#endif
diff --git a/CHAP_3/HostApp/HostApp/font.h b/CHAP_3/HostApp/HostApp/font.h
new file mode 100644
index 0000000..e7fd63e
--- /dev/null
+++ b/CHAP_3/HostApp/HostApp/font.h
@@ -0,0 +1,315 @@
+#ifndef FONT_h
+#define FONT_h
+
+#pragma once
+
+// TODO: use https://github.com/spacerace/romfont/blob/master/font-headers/GENOA_8x8.h
+
+// http://www.hampa.ch/pce/download.html
+// genoa-ega-2.41.rom
+// dd if=genoa-ega-2.41.rom of=font bs=1 skip=8224 count=3584
+// xxd -i font > font.h
+
+static const uint8_t font[] = {
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81,
+  0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xff,
+  0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
+  0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
+  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff,
+  0xff, 0xff, 0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc,
+  0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30,
+  0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x63,
+  0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06,
+  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66,
+  0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xdb,
+  0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c,
+  0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c,
+  0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c,
+  0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06,
+  0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6,
+  0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c,
+  0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x30,
+  0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c,
+  0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38, 0x78, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c,
+  0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66,
+  0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0,
+  0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x6c,
+  0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66,
+  0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x0c,
+  0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66,
+  0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
+  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60,
+  0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x30, 0x30, 0x30,
+  0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0,
+  0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
+  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xff, 0x00, 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76,
+  0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66,
+  0x3c, 0x00, 0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66,
+  0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec,
+  0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60,
+  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c,
+  0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30,
+  0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38,
+  0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38,
+  0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66,
+  0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00, 0x00,
+  0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc,
+  0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x38,
+  0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
+  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe,
+  0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x38,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x66,
+  0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x60,
+  0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c,
+  0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x76,
+  0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x6c,
+  0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00, 0x10,
+  0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00, 0x00, 0xc6,
+  0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60,
+  0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xcc, 0xcc,
+  0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x0e,
+  0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
+  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
+  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
+  0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
+  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06,
+  0x06, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c,
+  0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c,
+  0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x44, 0x11, 0x44,
+  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x55, 0xaa,
+  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
+  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
+  0xdd, 0x77, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
+  0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff,
+  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
+  0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
+  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
+  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30,
+  0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c,
+  0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c,
+  0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00,
+  0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e,
+  0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18,
+  0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00,
+  0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c,
+  0x1c, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8,
+  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+};
+
+#endif
diff --git a/CHAP_3/HostApp/HostApp/main.cpp b/CHAP_3/HostApp/HostApp/main.cpp
new file mode 100644
index 0000000..5fbb64f
--- /dev/null
+++ b/CHAP_3/HostApp/HostApp/main.cpp
@@ -0,0 +1,58 @@
+//
+//  main.cpp
+//  HostApp
+//
+//
+
+#include <iostream>
+#include <vector>
+#include <sstream>
+#include <iomanip>
+#include <list>
+
+#include "sdl.h"
+#include "ega.h"
+
+#include "MODE13.H"
+
+CEga mVideo;
+CSdl mSdl;
+std::list<int> keyboardBuffer;
+
+void onKey(int k, int p)
+{
+    if (!p)
+        return;
+
+    int key = 0;
+    switch (k)
+    {
+        case SDL_SCANCODE_UP: key = 0x4800; break;
+        case SDL_SCANCODE_DOWN: key = 0x5000; break;
+        case SDL_SCANCODE_LEFT: key = 0x4b00; break;
+        case SDL_SCANCODE_RIGHT: key = 0x4d00; break;
+        case SDL_SCANCODE_SPACE: key = 0x3920; break;
+        case SDL_SCANCODE_RETURN: key = 0x1c0d; break;
+    }
+
+    if (key)
+    {
+        keyboardBuffer.push_back(key);
+    }
+}
+
+void _sync()
+{
+    for (int y=0; y<mSdl.Height; y++)
+      for (int x=0; x<mSdl.Width; x++)
+        mSdl.SetPixel(x, y, mVideo.GetPixel(x, y));
+    
+    mSdl.Loop();
+}
+
+int main(int argc, const char * argv[]) {
+    mSdl.Init();
+    start(&mVideo);
+    mSdl.Deinit();
+    return 0;
+}
diff --git a/CHAP_3/HostApp/HostApp/sdl.h b/CHAP_3/HostApp/HostApp/sdl.h
new file mode 100644
index 0000000..835359c
--- /dev/null
+++ b/CHAP_3/HostApp/HostApp/sdl.h
@@ -0,0 +1,145 @@
+#ifndef SDL_h
+#define SDL_h
+
+typedef uint32_t Uint32;
+#include <SDL.h>
+#include <SDL_render.h>
+
+void onKey(int k, int p);
+
+class CSdl
+{
+    
+    std::vector< unsigned char > pixels;
+    const int pixelSize = 2;
+
+    SDL_Renderer* renderer{nullptr};
+    SDL_Texture* texture{nullptr};
+    SDL_Window* window{nullptr};
+    bool running{true};
+    int lastKey{0};
+
+public:
+    enum {
+        Width = 320,//640,
+        Height = 200//350
+    };
+
+    void Init()
+    {
+        pixels.resize(Width*Height*4);
+        SDL_Init( SDL_INIT_EVERYTHING );
+        atexit( SDL_Quit );
+        
+        window = SDL_CreateWindow
+        (
+         "BlackArt simulator",
+         SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
+         Width*pixelSize, Height*pixelSize,
+         SDL_WINDOW_SHOWN
+         );
+        
+        renderer = SDL_CreateRenderer
+        (
+         window,
+         -1,
+         SDL_RENDERER_ACCELERATED
+         );
+
+        texture = SDL_CreateTexture
+        (
+         renderer,
+         SDL_PIXELFORMAT_ARGB8888,
+         SDL_TEXTUREACCESS_STREAMING,
+         Width, Height
+         );
+    }
+    
+    void Blit()
+    {
+        SDL_SetRenderDrawColor( renderer, 0, 0, 0, SDL_ALPHA_OPAQUE );
+        SDL_RenderClear( renderer );
+        
+        SDL_UpdateTexture
+        (
+         texture,
+         NULL,
+         &pixels[0],
+         Width * 4
+         );
+        
+        SDL_RenderCopy( renderer, texture, NULL, NULL );
+        SDL_RenderPresent( renderer );
+    }
+    
+    void Loop()
+    {
+        SDL_Event event;
+
+        while( SDL_PollEvent( &event ) )
+        {
+            if (SDL_KEYDOWN == event.type)
+            {
+                lastKey = event.key.keysym.scancode;
+                onKey(event.key.keysym.scancode, 1);
+            }
+
+            if (SDL_KEYUP == event.type)
+            {
+                lastKey = event.key.keysym.scancode;
+                onKey(event.key.keysym.scancode, 0);
+            }
+
+            if( ( SDL_QUIT == event.type ) ||
+               ( SDL_KEYDOWN == event.type && SDL_SCANCODE_ESCAPE == event.key.keysym.scancode ) )
+            {
+                running = false;
+                break;
+            }
+        }
+        
+        Blit();
+        
+        //const Uint64 end = SDL_GetPerformanceCounter();
+        //const static Uint64 freq = SDL_GetPerformanceFrequency();
+        //const double seconds = ( end - start ) / static_cast< double >( freq );
+        //std::cout << "Frame time: " << seconds * 1000.0 << "ms" << std::endl;
+        if (running)
+            SDL_Delay(20);
+    }
+    
+    void Deinit()
+    {
+        SDL_DestroyRenderer( renderer );
+        SDL_DestroyWindow( window );
+        SDL_Quit();
+    }
+    
+    void SetPixel(int x, int y, uint32_t c)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        c <<= 2;
+        pixels[ offset + 0 ] = (uint8_t)c;
+        pixels[ offset + 1 ] = (uint8_t)(c >> 8);
+        pixels[ offset + 2 ] = (uint8_t)(c >> 16);
+        pixels[ offset + 3 ] = SDL_ALPHA_OPAQUE;
+    }
+
+    uint32_t GetPixel(int x, int y)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        int b = pixels[ offset + 0 ];
+        int g = pixels[ offset + 1 ];
+        int r = pixels[ offset + 2 ];
+        return r | (g << 8) | (b << 16);
+    }
+
+};
+
+#endif
diff --git a/CHAP_3/MODE13.C b/CHAP_3/MODE13.C
index 3409aad..6c7d94a 100755
--- a/CHAP_3/MODE13.C
+++ b/CHAP_3/MODE13.C
@@ -3,23 +3,38 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 
-#include "black3.h"   // the header file for this module
+#include <iostream>
+#include <vector>
+#include <sstream>
+#include <iomanip>
+#include <list>
+
+#include "ega.h"
+
+#include "BLACK3.H"   // the header file for this module
 
 // M A I N ////////////////////////////////////////////////////////////////////
 
-void main(int argc, char **argv)
+void getch() {
+    _sync();
+    SDL_Event event;
+    while(1) {    // wait for input to break
+        SDL_PollEvent(&event);
+        if(event.type == SDL_KEYDOWN)
+            return;
+    }
+}
+
+void start(CEga *ega)
 {
 
 RGB_color color;  // used as temporary color variable
@@ -32,7 +47,7 @@ getch();
 
 // set the graphics mode to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // show some text
 
@@ -41,9 +56,11 @@ getch();
 
 // print a few hundred strings on the screen
 
-for (index=0; index<1000; index++)
-    Print_String(rand()%(320-256),rand()%190,rand()%256,
-                 "This is a demo of text printing",1);
+    for (index=0; index<1000; index++) {
+        Print_String(rand()%(320-256),rand()%190,rand()%256,
+                     "This is a demo of text printing",1);
+        if (index%10 == 0) _sync();
+    }
 
 Print_String(0,0,15,"Hit a key to see screen filling        ",0);
 getch();
@@ -57,8 +74,10 @@ getch();
 
 // plot 10000 random pixels
 
-for (index=0; index<10000; index++)
-    Write_Pixel(rand()%320,rand()%200,12);
+    for (index=0; index<10000; index++) {
+        Write_Pixel(rand()%320,rand()%200,12);
+        if (index%100 == 0) _sync();
+    }
 
 Print_String(0,0,15,"Hit a key to see lines                 ",0);
 getch();
@@ -69,6 +88,7 @@ for (index=0; index<1000; index++)
     {
     Line_H(rand()%320,rand()%320,rand()%200,rand()%256);
     Line_V(rand()%200,rand()%200,rand()%320,rand()%256);
+    if (index%10 == 0) _sync();
     } // end for index
 
 Print_String(0,0,15,"Hit a key to change color registers    ",0);
@@ -93,6 +113,8 @@ for (index=0; index<256; index++)
     Write_Color_Reg(index,(RGB_color_ptr)&color);
 
     // let user see it happen
+    
+    //_sync();
 
     Time_Delay(1);
 
@@ -118,7 +140,7 @@ getch();
 
 // restore graphics mode to text
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 } // end main
-
\ No newline at end of file
+
diff --git a/CHAP_3/MODE13.H b/CHAP_3/MODE13.H
new file mode 100644
index 0000000..61548ba
--- /dev/null
+++ b/CHAP_3/MODE13.H
@@ -0,0 +1,13 @@
+//
+//  MODE13.H
+//  HostApp
+//
+//  Created by Tosha on 25/09/2022.
+//
+
+#ifndef MODE13_h
+#define MODE13_h
+
+void start(CEga *ega);
+
+#endif /* MODE13_h */
diff --git a/CHAP_4/ALIEN.C b/CHAP_4/ALIEN.C
index 9f74383..b8064bf 100755
--- a/CHAP_4/ALIEN.C
+++ b/CHAP_4/ALIEN.C
@@ -3,15 +3,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 
@@ -60,13 +57,13 @@ RGB_color fire_color = {63,0,0};   // used for engines
 
 // M A I N //////////////////////////////////////////////////////////////////
 
-void main(int argc, char **argv)
+void start_alien(CEga *ega)
 {
 int done=0;  // main event loop exit flag
 
 // set the graphics mode to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // create the double buffer
 
@@ -133,8 +130,18 @@ Layer_Build((layer_ptr)&grass_5,0,0,
 
 // main event loop, process until keyboard hit
 
-while(!kbhit())
+bool running = true;
+while(running)
      {
+         SDL_Event event;
+         while( SDL_PollEvent( &event ) )
+         {
+             if (SDL_KEYDOWN == event.type)
+             {
+                 running = false;
+                 break;
+             }
+         }
 
      // move the alien
 
@@ -190,7 +197,7 @@ while(!kbhit())
 
      // change color of fire
 
-     fire_color.red = 20 + rand() % 44;
+     fire_color.red = (20 + rand() % 44) << 2;
 
      Write_Color_Reg(32,(RGB_color_ptr)&fire_color);
 
@@ -200,7 +207,8 @@ while(!kbhit())
 
      // lock onto 18 frames per second max
 
-     Time_Delay(1);
+     _sync();
+     Time_Delay(50000);
 
      } // end while
 
@@ -214,8 +222,6 @@ Sprite_Delete((sprite_ptr)&alien);
 
 Delete_Double_Buffer();
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 } // end main
-
-
\ No newline at end of file
diff --git a/CHAP_4/BLACK4.C b/CHAP_4/BLACK4.C
index 7dcb600..6cb21fd 100755
--- a/CHAP_4/BLACK4.C
+++ b/CHAP_4/BLACK4.C
@@ -3,15 +3,10 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 
@@ -26,7 +21,7 @@ unsigned int sprite_width         = SPRITE_WIDTH;
 
 unsigned int sprite_height        = SPRITE_HEIGHT;
 
-unsigned char far *double_buffer  = NULL;  // the double buffer
+unsigned char *double_buffer  = NULL;  // the double buffer
 
 // the default dimensions of the double buffer
 
@@ -36,9 +31,9 @@ unsigned int double_buffer_height = SCREEN_HEIGHT;
 
 unsigned int double_buffer_size   = SCREEN_WIDTH*SCREEN_HEIGHT/2;
 
-unsigned char far *page_0_buffer  = (unsigned char far *)0xA0000000L;
+unsigned char *page_0_buffer  = (unsigned char *)0xA0000000L;
 
-unsigned char far *page_1_buffer  = (unsigned char far *)0xA0008000L;
+unsigned char *page_1_buffer  = (unsigned char *)0xA0008000L;
 
 int mode_z_page                   = PAGE_0;
 
@@ -49,7 +44,7 @@ int PCX_Init(pcx_picture_ptr image)
 // this function allocates the buffer that the image data will be loaded into
 // when a PCX file is decompressed
 
-if (!(image->buffer = (unsigned char far *)_fmalloc(SCREEN_WIDTH * SCREEN_HEIGHT + 1)))
+if (!(image->buffer = (unsigned char *)malloc(SCREEN_WIDTH * SCREEN_HEIGHT + 1)))
    {
    printf("\nPCX SYSTEM - Couldn't allocate PCX image buffer");
    return(0);
@@ -80,7 +75,7 @@ long count;              // the total number of bytes decompressed
 
 unsigned char data;      // the current pixel data
 
-char far *temp_buffer;   // working buffer
+char *temp_buffer;   // working buffer
 
 // open the file, test if it exists
 
@@ -93,7 +88,7 @@ if ((fp = fopen(filename,"rb"))==NULL)
 
 // load the header
 
-temp_buffer = (char far *)image;
+temp_buffer = (char *)image;
 
 for (index=0; index<128; index++)
     {
@@ -199,7 +194,7 @@ void PCX_Delete(pcx_picture_ptr image)
 {
 // this function de-allocates the buffer region used for the pcx file load
 
-_ffree(image->buffer);
+free(image->buffer);
 
 } // end PCX_Delete
 
@@ -209,37 +204,39 @@ void PCX_Show_Buffer(pcx_picture_ptr image)
 {
 // just copy he pcx buffer into the video buffer
 
-char far *data; // temp variable used for aliasing
-
-// alias image buffer
-
-data = image->buffer;
-
-// use inline assembly for speed
-
-_asm
-   {
-   push ds               ; save the data segment
-   les di, video_buffer  ; point es:di to video buffer
-   lds si, data          ; point ds:si to data area
-   mov cx,320*200/2      ; move 32000 words
-   cld                   ; set direction to foward
-   rep movsw             ; do the string operation
-   pop ds                ; restore the data segment
-   }  // end inline
+memcpy(video_buffer, image->buffer, image->header.width*image->header.height);
+
+//char *data; // temp variable used for aliasing
+//
+//// alias image buffer
+//
+//data = image->buffer;
+//
+//// use inline assembly for speed
+//
+//_asm
+//   {
+//   push ds               ; save the data segment
+//   les di, video_buffer  ; point es:di to video buffer
+//   lds si, data          ; point ds:si to data area
+//   mov cx,320*200/2      ; move 32000 words
+//   cld                   ; set direction to foward
+//   rep movsw             ; do the string operation
+//   pop ds                ; restore the data segment
+//   }  // end inline
 
 } // end PCX_Show_Buffer
 
 ///////////////////////////////////////////////////////////////////////////////
 
-void PCX_Copy_To_Buffer(pcx_picture_ptr image,unsigned char far *buffer)
+void PCX_Copy_To_Buffer(pcx_picture_ptr image,unsigned char *buffer)
 {
 // this function is used to copy the data in the PCX buffer to another buffer
 // usually the double buffer
 
 // use the word copy function, note: double_buffer_size is in WORDS
 
-fwordcpy((void far *)buffer,(void far *)image->buffer,double_buffer_size);
+fwordcpy((void *)buffer,(void *)image->buffer,double_buffer_size);
 
 } // end PCX_Copy_To_Buffer
 
@@ -262,7 +259,7 @@ int x_off,  // position of sprite cell in PCX image buffer
     width,  // size of sprite
     height;
 
-unsigned char far *sprite_data;
+unsigned char *sprite_data;
 
 // extract width and height of sprite
 
@@ -271,7 +268,7 @@ height = sprite->height;
 
 // first allocate the memory for the sprite in the sprite structure
 
-sprite->frames[sprite_frame] = (unsigned char far *)_fmalloc(width * height + 1);
+sprite->frames[sprite_frame] = (unsigned char *)malloc(width * height + 1);
 
 // create an alias to the sprite frame for ease of access
 
@@ -292,9 +289,9 @@ for (y=0; y<height; y++,y_off+=320)
     {
     // copy the row of pixels
 
-    _fmemcpy((void far *)&sprite_data[y*width],
+    memcpy((void *)&sprite_data[y*width],
 
-             (void far *)&(image->buffer[y_off + x_off]),
+             (void *)&(image->buffer[y_off + x_off]),
              width);
 
     } // end for y
@@ -331,7 +328,7 @@ sprite->threshold_3  = t3;
 sprite->curr_frame   = 0;
 sprite->state        = SPRITE_DEAD;
 sprite->num_frames   = 0;
-sprite->background   = (unsigned char far *)_fmalloc(width * height+1);
+sprite->background   = (unsigned char *)malloc(width * height+1);
 
 // set all bitmap pointers to null
 
@@ -348,24 +345,24 @@ void Sprite_Delete(sprite_ptr sprite)
 
 int index;
 
-_ffree(sprite->background);
+free(sprite->background);
 
 // now de-allocate all the animation frames
 
 for (index=0; index<MAX_SPRITE_FRAMES; index++)
-    _ffree(sprite->frames[index]);
+    free(sprite->frames[index]);
 
 } // end Sprite_Delete
 
 ////////////////////////////////////////////////////////////////////////////////
 
-void Sprite_Under(sprite_ptr sprite, unsigned char far *buffer)
+void Sprite_Under(sprite_ptr sprite, unsigned char *buffer)
 {
 
 // this function scans the background under a sprite so that when the sprite
 // is drawn the background isn't obliterated
 
-unsigned char far *back_buffer; // background buffer for sprite
+unsigned char *back_buffer; // background buffer for sprite
 
 int y,                          // current line being scanned
     width,                      // size of sprite
@@ -388,8 +385,8 @@ for (y=0; y<height; y++)
     {
     // copy the next row out off image buffer into sprite background buffer
 
-    _fmemcpy((void far *)back_buffer,
-             (void far *)buffer,
+    memcpy((void *)back_buffer,
+             (void *)buffer,
              width);
 
     // move to next line in source buffer and in sprite background buffer
@@ -403,13 +400,13 @@ for (y=0; y<height; y++)
 
 //////////////////////////////////////////////////////////////////////////////
 
-void Sprite_Erase(sprite_ptr sprite,unsigned char far *buffer)
+void Sprite_Erase(sprite_ptr sprite,unsigned char *buffer)
 {
 // replace the background that was behind the sprite
 // this function replaces the background that was saved from where a sprite
 // was going to be placed
 
-unsigned char far *back_buffer; // background buffer for sprite
+unsigned char *back_buffer; // background buffer for sprite
 
 int y,                          // current line being scanned
     width,                      // size of sprite
@@ -432,8 +429,8 @@ for (y=0; y<height; y++)
     {
     // copy the next from sprite background buffer to destination buffer
 
-    _fmemcpy((void far *)buffer,
-             (void far *)back_buffer,
+    memcpy((void *)buffer,
+             (void *)back_buffer,
              width);
 
     // move to next line in destination buffer and in sprite background buffer
@@ -447,7 +444,7 @@ for (y=0; y<height; y++)
 
 //////////////////////////////////////////////////////////////////////////////
 
-void Sprite_Draw(sprite_ptr sprite, unsigned char far *buffer,int transparent)
+void Sprite_Draw(sprite_ptr sprite, unsigned char *buffer,int transparent)
 {
 
 // this function draws a sprite on the screen row by row very quickly
@@ -455,8 +452,8 @@ void Sprite_Draw(sprite_ptr sprite, unsigned char far *buffer,int transparent)
 // if the transparent flag is true then pixels wil be draw one by one
 // else a memcpy will be used to draw each line
 
-unsigned char far *sprite_data; // pointer to sprite data
-unsigned char far *dest_buffer; // pointer to destination buffer
+unsigned char *sprite_data; // pointer to sprite data
+unsigned char *dest_buffer; // pointer to destination buffer
 
 int x,y,                        // looping variables
     width,                      // width of sprite
@@ -515,7 +512,7 @@ else
        {
        // copy the next row into the destination buffer
 
-       _fmemcpy((void far *)dest_buffer,(void far *)sprite_data,width);
+       memcpy((void *)dest_buffer,(void *)sprite_data,width);
 
        // move to next line in desintation buffer and sprite image buffer
 
@@ -531,14 +528,14 @@ else
 
 ////////////////////////////////////////////////////////////////////////////////
 
-void Sprite_Under_Clip(sprite_ptr sprite, unsigned char far *buffer)
+void Sprite_Under_Clip(sprite_ptr sprite, unsigned char *buffer)
 {
 
 // this function scans the background under a sprite, but only those
 // portions that are visible
 
-unsigned char far *back_buffer;   // pointer to sprite background buffer
-unsigned char far *source_buffer; // pointer to source buffer
+unsigned char *back_buffer;   // pointer to sprite background buffer
+unsigned char *source_buffer; // pointer to source buffer
 
 int x,y,                        // looping variables
     sx,sy,                      // position of sprite
@@ -630,7 +627,7 @@ for (y=0; y<bitmap_height; y++)
     {
     // copy the next row into the destination buffer
 
-    _fmemcpy((void far *)back_buffer,(void far *)source_buffer,bitmap_width);
+    memcpy((void *)back_buffer,(void *)source_buffer,bitmap_width);
 
     // move to next line in desintation buffer and sprite image buffer
 
@@ -652,13 +649,13 @@ sprite->visible     = 1;
 
 //////////////////////////////////////////////////////////////////////////////
 
-void Sprite_Erase_Clip(sprite_ptr sprite,unsigned char far *buffer)
+void Sprite_Erase_Clip(sprite_ptr sprite,unsigned char *buffer)
 {
 // replace the background that was behind the sprite
 // this function replaces the background that was saved from where a sprite
 // was going to be placed
 
-unsigned char far *back_buffer; // background buffer for sprite
+unsigned char *back_buffer; // background buffer for sprite
 
 int y,                          // current line being scanned
     width,                      // size of sprite background buffer
@@ -689,8 +686,8 @@ for (y=0; y<bitmap_height; y++)
     {
     // copy the next row from sprite background buffer to destination buffer
 
-    _fmemcpy((void far *)buffer,
-             (void far *)back_buffer,
+    memcpy((void *)buffer,
+             (void *)back_buffer,
              bitmap_width);
 
     // move to next line in destination buffer and in sprite background buffer
@@ -704,7 +701,7 @@ for (y=0; y<bitmap_height; y++)
 
 //////////////////////////////////////////////////////////////////////////////
 
-void Sprite_Draw_Clip(sprite_ptr sprite, unsigned char far *buffer,int transparent)
+void Sprite_Draw_Clip(sprite_ptr sprite, unsigned char *buffer,int transparent)
 {
 
 // this function draws a sprite on the screen row by row very quickly
@@ -714,8 +711,8 @@ void Sprite_Draw_Clip(sprite_ptr sprite, unsigned char far *buffer,int transpare
 // this function also performs clipping. It will test if the sprite
 // is totally visible/invisible and will only draw the portions that are visible
 
-unsigned char far *sprite_data; // pointer to sprite data
-unsigned char far *dest_buffer; // pointer to destination buffer
+unsigned char *sprite_data; // pointer to sprite data
+unsigned char *dest_buffer; // pointer to destination buffer
 
 int x,y,                        // looping variables
     sx,sy,                      // position of sprite
@@ -845,7 +842,7 @@ else
        {
        // copy the next row into the destination buffer
 
-       _fmemcpy((void far *)dest_buffer,(void far *)sprite_data,bitmap_width);
+       memcpy((void *)dest_buffer,(void *)sprite_data,bitmap_width);
 
        // move to next line in desintation buffer and sprite image buffer
 
@@ -881,25 +878,28 @@ return(0);
 
 ///////////////////////////////////////////////////////////////////////////////
 
-void Display_Double_Buffer(unsigned char far *buffer,int y)
+void Display_Double_Buffer(unsigned char *buffer,int y)
 {
-// this functions copies the double buffer into the video buffer at the
-// starting y location
 
-_asm
-   {
-   push ds                     ; save DS on stack
-   mov cx,double_buffer_size   ; this is the size of buffer in WORDS
-   les di,video_buffer         ; es:di is destination of memory move
-
-   mov ax,320                  ; multiply y by 320 i.e. screen width
-   mul y
-   add di,ax                   ; add result to es:di
-
-   lds si,buffer               ; ds:si is source of memory move
-   rep movsw                   ; move all the words
-   pop ds                      ; restore the data segment
-   } // end asm
+memcpy(video_buffer + SCREEN_WIDTH*y, buffer, double_buffer_size*2);
+
+//// this functions copies the double buffer into the video buffer at the
+//// starting y location
+//
+//_asm
+//   {
+//   push ds                     ; save DS on stack
+//   mov cx,double_buffer_size   ; this is the size of buffer in WORDS
+//   les di,video_buffer         ; es:di is destination of memory move
+//
+//   mov ax,320                  ; multiply y by 320 i.e. screen width
+//   mul y
+//   add di,ax                   ; add result to es:di
+//
+//   lds si,buffer               ; ds:si is source of memory move
+//   rep movsw                   ; move all the words
+//   pop ds                      ; restore the data segment
+//   } // end asm
 
 } // end Display_Double_Buffer
 
@@ -910,7 +910,7 @@ int Create_Double_Buffer(int num_lines)
 
 // allocate enough memory to hold the double buffer
 
-if ((double_buffer = (unsigned char far *)_fmalloc(SCREEN_WIDTH * (num_lines + 1)))==NULL)
+if ((double_buffer = (unsigned char *)malloc(SCREEN_WIDTH * (num_lines + 1)))==NULL)
    {
    printf("\nCouldn't allocate double buffer.");
    return(0);
@@ -924,7 +924,7 @@ double_buffer_size = SCREEN_WIDTH * num_lines/2;
 
 // fill the buffer with black
 
-_fmemset(double_buffer, 0, SCREEN_WIDTH * num_lines);
+memset(double_buffer, 0, SCREEN_WIDTH * num_lines);
 
 // everything was ok
 
@@ -936,17 +936,20 @@ return(1);
 
 void Fill_Double_Buffer(int color)
 {
-// this function fills in the double buffer with the sent color a WORD at
-// a time
-
-_asm
-   {
-   mov cx,double_buffer_size ; this is the size of buffer in WORDS
-   mov al, BYTE PTR color    ; move the color into al
-   mov ah,al                 ; move the color in ah
-   les di,double_buffer      ; es:di points to the double buffer
-   rep stosw                 ; fill all the words
-   } // end asm
+    
+memset(double_buffer, color, double_buffer_size*2);
+
+//// this function fills in the double buffer with the sent color a WORD at
+//// a time
+//
+//_asm
+//   {
+//   mov cx,double_buffer_size ; this is the size of buffer in WORDS
+//   mov al, BYTE PTR color    ; move the color into al
+//   mov ah,al                 ; move the color in ah
+//   les di,double_buffer      ; es:di points to the double buffer
+//   rep stosw                 ; fill all the words
+//   } // end asm
 
 } // end Fill_Double_Buffer
 
@@ -958,7 +961,7 @@ void Delete_Double_Buffer(void)
 // make sure to use FAR version
 
 if (double_buffer)
-  _ffree(double_buffer);
+  free(double_buffer);
 
 } // end Delete_Double_Buffer
 
@@ -1137,6 +1140,9 @@ switch(effect)
 
 void Wait_For_Vertical_Retrace(void)
 {
+
+_sync();
+    
 // this function waits for the start of a vertical retrace, if a vertical
 // retrace is in progress then it waits until the next one
 // therefore the function can wait a maximum of 2/70 th's of a second
@@ -1144,17 +1150,17 @@ void Wait_For_Vertical_Retrace(void)
 // this function can be used to synchronize video updates to the vertical blank
 // or as a high resolution time reference
 
-while(_inp(VGA_INPUT_STATUS_1) & VGA_VRETRACE_MASK)
-     {
-     // do nothing, vga is already in retrace
-     } // end while
+//while(_inp(VGA_INPUT_STATUS_1) & VGA_VRETRACE_MASK)
+//     {
+//     // do nothing, vga is already in retrace
+//     } // end while
 
 // now wait for start of vertical retrace and exit
 
-while(!(_inp(VGA_INPUT_STATUS_1) & VGA_VRETRACE_MASK))
-     {
-     // do nothing, wait for start of retrace
-     } // end while
+//while(!(_inp(VGA_INPUT_STATUS_1) & VGA_VRETRACE_MASK))
+//     {
+//     // do nothing, wait for start of retrace
+//     } // end while
 
 // at this point a vertical retrace is occuring, so return back to caller
 
@@ -1162,27 +1168,30 @@ while(!(_inp(VGA_INPUT_STATUS_1) & VGA_VRETRACE_MASK))
 
 ///////////////////////////////////////////////////////////////////////////////
 
-void fwordcpy(void far *destination, void far *source,int num_words)
+void fwordcpy(void *destination, void *source,int num_words)
 {
-// this function is similar to fmemcpy except that is moves data in words
-// it is about 25% faster than memcpy which uses bytes
-
-_asm
-   {
-   push ds              ; need to save segment registers i.e. ds
-   les di,destination   ; point es:di to destination of memory move
-   lds si,source        ; point ds:si to source of memory move
-   mov cx,num_words     ; move into cx the number of words to be moved
-   rep movsw            ; let the processor do the memory move
-   pop ds               ; restore the ds segment register
 
-   } // end inline asm
+memcpy(destination, source, num_words*2);
+    
+//// this function is similar to fmemcpy except that is moves data in words
+//// it is about 25% faster than memcpy which uses bytes
+//
+//_asm
+//   {
+//   push ds              ; need to save segment registers i.e. ds
+//   les di,destination   ; point es:di to destination of memory move
+//   lds si,source        ; point ds:si to source of memory move
+//   mov cx,num_words     ; move into cx the number of words to be moved
+//   rep movsw            ; let the processor do the memory move
+//   pop ds               ; restore the ds segment register
+//
+//   } // end inline asm
 
 } // end fwordcpy
 
 //////////////////////////////////////////////////////////////////////////////
 
-void Bitmap_Put(bitmap_ptr image, unsigned char far *destination,int transparent)
+void Bitmap_Put(bitmap_ptr image, unsigned char *destination,int transparent)
 {
 // this fucntion will draw a bitmap on the destination buffer which could
 // be a double buffer or the video buffer
@@ -1190,8 +1199,8 @@ void Bitmap_Put(bitmap_ptr image, unsigned char far *destination,int transparent
 int x,y,                        // looping variables
     width,height;               // size of bitmap
 
-unsigned char far *bitmap_data; // pointer to bitmap buffer
-unsigned char far *dest_buffer; // pointer to destination buffer
+unsigned char *bitmap_data; // pointer to bitmap buffer
+unsigned char *dest_buffer; // pointer to destination buffer
 
 unsigned char pixel;            // current pixel value being processed
 
@@ -1247,8 +1256,8 @@ else
        {
        // copy the next row into the destination buffer using memcpy for speed
 
-       _fmemcpy((void far *)dest_buffer,
-                (void far *)bitmap_data,width);
+       memcpy((void *)dest_buffer,
+                (void *)bitmap_data,width);
 
        // move to next line in destination buffer and in bitmap buffer
 
@@ -1263,7 +1272,7 @@ else
 
 //////////////////////////////////////////////////////////////////////////////
 
-void Bitmap_Get(bitmap_ptr image, unsigned char far *source)
+void Bitmap_Get(bitmap_ptr image, unsigned char *source)
 {
 // this function will scan a bitmap fomr the source buffer
 // could be a double buffer, video buffer or any other buffer with a
@@ -1275,7 +1284,7 @@ unsigned int source_off,       // offsets into destination and source buffers
 int y,                         // looping variable
     width,height;              // size of bitmap
 
-unsigned char far *bitmap_data; // pointer to bitmap buffer
+unsigned char *bitmap_data; // pointer to bitmap buffer
 
 
 // compute offset of bitmap in source buffer. note: all video or double
@@ -1299,8 +1308,8 @@ for (y=0; y<height; y++)
     {
     // copy the next row into the bitmap buffer using memcpy for speed
 
-    _fmemcpy((void far *)&bitmap_data[bitmap_off],
-             (void far *)&source[source_off],width);
+    memcpy((void *)&bitmap_data[bitmap_off],
+             (void *)&source[source_off],width);
 
     // move to next line in source buffer and in bitmap buffer
 
@@ -1317,7 +1326,7 @@ int Bitmap_Allocate(bitmap_ptr image, int width, int height)
 {
 // this function can be used to allocate the memory needed for a bitmap
 
-if ((image->buffer = (unsigned char far *)_fmalloc(width*height+1))==NULL)
+if ((image->buffer = (unsigned char *)malloc(width*height+1))==NULL)
    return(0);
 else
    return(1);
@@ -1331,14 +1340,14 @@ void Bitmap_Delete(bitmap_ptr the_bitmap)
 // this function deletes the memory used by a bitmap
 
 if (the_bitmap->buffer)
-   _ffree(the_bitmap->buffer);
+   free(the_bitmap->buffer);
 
 } // end Bitmap_Delete
 
 //////////////////////////////////////////////////////////////////////////////
 
 void Layer_Draw(layer_ptr source_layer, int source_x, int source_y,
-                unsigned char far *dest_buffer,int dest_y,int dest_height,
+                unsigned char *dest_buffer,int dest_y,int dest_height,
                 int transparent)
 {
 // this function will map down a section of the layer onto the destination
@@ -1351,10 +1360,10 @@ int x,y,                        // looping variables
     right_width,                // the width of the right and left half of
     left_width;                 // the layer to be drawn
 
-unsigned char far *layer_buffer_l; // pointers to the left and right halves
-unsigned char far *dest_buffer_l;  // of the layer buffer and destination
-unsigned char far *layer_buffer_r; // buffer
-unsigned char far *dest_buffer_r;
+unsigned char *layer_buffer_l; // pointers to the left and right halves
+unsigned char *dest_buffer_l;  // of the layer buffer and destination
+unsigned char *layer_buffer_r; // buffer
+unsigned char *dest_buffer_r;
 
 unsigned char pixel;            // current pixel value being processed
 
@@ -1459,8 +1468,8 @@ else
        {
        // copy the next row into the destination buffer using memcpy for speed
 
-       _fmemcpy((void far *)dest_buffer_l,
-                (void far *)layer_buffer_l,left_width);
+       memcpy((void *)dest_buffer_l,
+                (void *)layer_buffer_l,left_width);
 
        // move to next line in double buffer and in bitmap buffer
 
@@ -1478,8 +1487,8 @@ else
           {
           // copy the next row into the destination buffer using memcpy for speed
 
-          _fmemcpy((void far *)dest_buffer_r,
-                   (void far *)layer_buffer_r,right_width);
+          memcpy((void *)dest_buffer_r,
+                   (void *)layer_buffer_r,right_width);
 
           // move to next line in double buffer and in bitmap buffer
 
@@ -1497,7 +1506,7 @@ else
 //////////////////////////////////////////////////////////////////////////////
 
 void Layer_Build(layer_ptr dest_layer,int dest_x, int dest_y,
-                 unsigned char far *source_buffer,int source_x,int source_y,
+                 unsigned char *source_buffer,int source_x,int source_y,
                  int width,int height)
 {
 // this function is used to build up the layer out of smaller pieces
@@ -1507,8 +1516,8 @@ void Layer_Build(layer_ptr dest_layer,int dest_x, int dest_y,
 int y,                       // looping variable
     layer_width;             // the width of the layer
 
-unsigned char far *source_data;   // pointer to start of source bitmap image
-unsigned char far *layer_buffer;  // pointer to layer buffer
+unsigned char *source_data;   // pointer to start of source bitmap image
+unsigned char *layer_buffer;  // pointer to layer buffer
 
 // extract width of layer
 
@@ -1528,8 +1537,8 @@ for (y=0; y<height; y++)
     {
     // copy the next row into the layer buffer using memcpy for speed
 
-    _fmemcpy((void far *)layer_buffer,
-             (void far *)source_data,width);
+    memcpy((void *)layer_buffer,
+             (void *)source_data,width);
 
     // move to next line in source buffer and in layer buffer
 
@@ -1547,7 +1556,7 @@ int Layer_Create(layer_ptr dest_layer, int width, int height)
 // this function can be used to allocate the memory needed for a layer
 // the width must be divisible by two.
 
-if ((dest_layer->buffer = (unsigned char far *)_fmalloc(width*height+2))==NULL)
+if ((dest_layer->buffer = (unsigned char *)malloc(width*height+2))==NULL)
    return(0);
 else
    {
@@ -1569,7 +1578,7 @@ void Layer_Delete(layer_ptr the_layer)
 // this function deletes the memory used by a layer
 
 if (the_layer->buffer)
-   _ffree(the_layer->buffer);
+   free(the_layer->buffer);
 
 } // end Layer_Delete
 
@@ -1586,7 +1595,7 @@ int offset,               // offset into video memory
          x,               // loop variable
          y;               // loop variable
 
-unsigned char far *work_char; // pointer to character being printed
+unsigned char *work_char; // pointer to character being printed
 
 unsigned char bit_mask;       // bitmask used to extract proper bit
 
@@ -1687,41 +1696,43 @@ return((int)(double_buffer[((y<<8) + (y<<6)) + x]));
 
 void Set_Visual_Page_Mode_Z(int page)
 {
-// this function sets the visual page that will be displayed by the VGA
+throw "Set_Visual_Page_Mode_Z is not implemented.";
 
-if (page==PAGE_0)
-   {
-   // re-program the start address registers in the CRT controller
-   // to point at page 0 @ 0xA000:0000
-
-   // first low byte of address
-
-   _outp(CRT_CONTROLLER,CRT_ADDR_LOW);
-   _outp(CRT_CONTROLLER+1,0x00);
-
-   // now high byte
-
-   _outp(CRT_CONTROLLER,CRT_ADDR_HI);
-   _outp(CRT_CONTROLLER+1,0x00);
-
-   } // end if page 0
-else
-if (page==PAGE_1)
-   {
-   // re-program the start address registers in the CRT controller
-   // to point at page 1 @ 0xA000:8000
-
-   // first low byte of address
-
-   _outp(CRT_CONTROLLER,CRT_ADDR_LOW);
-   _outp(CRT_CONTROLLER+1,0x00);
-
-   // now high byte
-
-   _outp(CRT_CONTROLLER,CRT_ADDR_HI);
-   _outp(CRT_CONTROLLER+1,0x80);
+// this function sets the visual page that will be displayed by the VGA
 
-   } // end else page 1
+//if (page==PAGE_0)
+//   {
+//   // re-program the start address registers in the CRT controller
+//   // to point at page 0 @ 0xA000:0000
+//
+//   // first low byte of address
+//
+//   _outp(CRT_CONTROLLER,CRT_ADDR_LOW);
+//   _outp(CRT_CONTROLLER+1,0x00);
+//
+//   // now high byte
+//
+//   _outp(CRT_CONTROLLER,CRT_ADDR_HI);
+//   _outp(CRT_CONTROLLER+1,0x00);
+//
+//   } // end if page 0
+//else
+//if (page==PAGE_1)
+//   {
+//   // re-program the start address registers in the CRT controller
+//   // to point at page 1 @ 0xA000:8000
+//
+//   // first low byte of address
+//
+//   _outp(CRT_CONTROLLER,CRT_ADDR_LOW);
+//   _outp(CRT_CONTROLLER+1,0x00);
+//
+//   // now high byte
+//
+//   _outp(CRT_CONTROLLER,CRT_ADDR_HI);
+//   _outp(CRT_CONTROLLER+1,0x80);
+//
+//   } // end else page 1
 
 // note: we could use WORD out's, but this is clearer, feel free to change them
 
@@ -1731,15 +1742,14 @@ if (page==PAGE_1)
 
 void Set_Working_Page_Mode_Z(int page)
 {
+throw "Set_Working_Page_Mode_Z is not implemented.";
+
 // this function sets the page that all mode Z functions will update when
 // called
 
-if (page==PAGE_0)
-   video_buffer = page_0_buffer;
-else
-   video_buffer = page_1_buffer;
+//if (page==PAGE_0)
+//   video_buffer = page_0_buffer;
+//else
+//   video_buffer = page_1_buffer;
 
 } // end Set_Working_Page_Mode_Z
-
-
-
\ No newline at end of file
diff --git a/CHAP_4/BLACK4.H b/CHAP_4/BLACK4.H
index 06ba0c3..a0c62cb 100755
--- a/CHAP_4/BLACK4.H
+++ b/CHAP_4/BLACK4.H
@@ -57,15 +57,15 @@ typedef struct pcx_header_typ
         char version;               // the file format version
         char encoding;              // type of compression
         char bits_per_pixel;        // number of bits per pixel
-        int x,y;                    // starting location of image
-        int width,height;           // size of image
-        int horz_res;               // resolution in DPI (dots per inch)
-        int vert_res;
+        int16_t x,y;                    // starting location of image
+        int16_t width,height;           // size of image
+        int16_t horz_res;               // resolution in DPI (dots per inch)
+        int16_t vert_res;
         char ega_palette[48];       // the old EGA palette (usually ignored)
         char reserved;              // don't care
         char num_color_planes;      // number of color planes
-        int bytes_per_line;         // number of bytes per line of the image
-        int palette_type;           // 1 for color, 2 for grey scale palette
+        int16_t bytes_per_line;         // number of bytes per line of the image
+        int16_t palette_type;           // 1 for color, 2 for grey scale palette
         char padding[58];           // extra bytes
 
         } pcx_header, *pcx_header_ptr;
@@ -76,7 +76,7 @@ typedef struct pcx_picture_typ
         {
         pcx_header header;          // the header of the PCX file
         RGB_color palette[256];     // the palette data
-        unsigned char far *buffer;  // a pointer to the 64,000 byte buffer
+        unsigned char *buffer;  // a pointer to the 64,000 byte buffer
                                     // holding the decompressed image
 
         } pcx_picture, *pcx_picture_ptr;
@@ -97,13 +97,13 @@ typedef struct sprite_typ
         int threshold_2;
         int threshold_3;
 
-        unsigned char far *frames[MAX_SPRITE_FRAMES]; // array of pointers to
+        unsigned char *frames[MAX_SPRITE_FRAMES]; // array of pointers to
                                                       // the images
 
         int curr_frame;                // current frame being displayed
         int num_frames;                // total number of frames
         int state;                     // state of sprite, alive, dead...
-        unsigned char far *background; // image under the sprite
+        unsigned char *background; // image under the sprite
 
         int x_clip,y_clip;             // clipped position of sprite
         int width_clip,height_clip;    // clipped size of sprite
@@ -120,7 +120,7 @@ typedef struct bitmap_typ
         {
         int x,y;                    // position of bitmap
         int width,height;           // size of bitmap
-        unsigned char far *buffer;  // buffer holding image
+        unsigned char *buffer;  // buffer holding image
 
         } bitmap, *bitmap_ptr;
 
@@ -135,13 +135,13 @@ typedef struct layer_typ
 
         int width,height;  // size of layer,note:width must be divisible by 2
 
-        unsigned char far *buffer;  // the layer buffer
+        unsigned char *buffer;  // the layer buffer
 
         } layer, *layer_ptr;
 
 // E X T E R N A L S /////////////////////////////////////////////////////////
 
-extern unsigned char far *double_buffer;     // the double buffer
+extern unsigned char *double_buffer;     // the double buffer
 
 extern unsigned int double_buffer_height;    // height of double buffer
 
@@ -151,9 +151,9 @@ extern unsigned int sprite_width;            // width of a sprite
 
 extern unsigned int sprite_height;           // of a sprite
 
-extern unsigned char far *page_0_buffer;     // pointer to mode z page 0
+extern unsigned char *page_0_buffer;     // pointer to mode z page 0
 
-extern unsigned char far *page_1_buffer;     // pointer to mode z page 0
+extern unsigned char *page_1_buffer;     // pointer to mode z page 0
 
 extern int mode_z_page;                      // current mode z page
 
@@ -167,7 +167,7 @@ void PCX_Delete(pcx_picture_ptr image);
 
 void PCX_Show_Buffer(pcx_picture_ptr image);
 
-void PCX_Copy_To_Buffer(pcx_picture_ptr image,unsigned char far *buffer);
+void PCX_Copy_To_Buffer(pcx_picture_ptr image,unsigned char *buffer);
 
 void PCX_Get_Sprite(pcx_picture_ptr image,
                      sprite_ptr sprite,
@@ -180,22 +180,22 @@ void Sprite_Init(sprite_ptr sprite,int x,int y, int width, int height,
 
 void Sprite_Delete(sprite_ptr sprite);
 
-void Sprite_Under(sprite_ptr sprite, unsigned char far *buffer);
+void Sprite_Under(sprite_ptr sprite, unsigned char *buffer);
 
-void Sprite_Erase(sprite_ptr sprite, unsigned char far *buffer);
+void Sprite_Erase(sprite_ptr sprite, unsigned char *buffer);
 
-void Sprite_Draw(sprite_ptr sprite, unsigned char far *buffer,int transparent);
+void Sprite_Draw(sprite_ptr sprite, unsigned char *buffer,int transparent);
 
 
-void Sprite_Under_Clip(sprite_ptr sprite, unsigned char far *buffer);
+void Sprite_Under_Clip(sprite_ptr sprite, unsigned char *buffer);
 
-void Sprite_Erase_Clip(sprite_ptr sprite, unsigned char far *buffer);
+void Sprite_Erase_Clip(sprite_ptr sprite, unsigned char *buffer);
 
-void Sprite_Draw_Clip(sprite_ptr sprite, unsigned char far *buffer,int transparent);
+void Sprite_Draw_Clip(sprite_ptr sprite, unsigned char *buffer,int transparent);
 
 int  Sprite_Collide(sprite_ptr sprite_1, sprite_ptr sprite_2);
 
-void Display_Double_Buffer(unsigned char far *buffer,int y);
+void Display_Double_Buffer(unsigned char *buffer,int y);
 
 int  Create_Double_Buffer(int num_lines);
 
@@ -207,11 +207,11 @@ void Screen_Transition(int effect);
 
 void Wait_For_Vertical_Retrace(void);
 
-void fwordcpy(void far *destination, void far *source,int num_words);
+void fwordcpy(void *destination, void *source,int num_words);
 
-void Bitmap_Get(bitmap_ptr image, unsigned char far *source);
+void Bitmap_Get(bitmap_ptr image, unsigned char *source);
 
-void Bitmap_Put(bitmap_ptr image, unsigned char far *destination,int transparent);
+void Bitmap_Put(bitmap_ptr image, unsigned char *destination,int transparent);
 
 int Bitmap_Allocate(bitmap_ptr image, int width, int height);
 
@@ -220,11 +220,11 @@ void Bitmap_Delete(bitmap_ptr the_bitmap);
 int Layer_Create(layer_ptr dest_layer, int width, int height);
 
 void Layer_Build(layer_ptr dest_layer,int dest_x, int dest_y,
-                unsigned char far *source_buffer,int source_x,int source_y,
+                unsigned char *source_buffer,int source_x,int source_y,
                 int width,int height);
 
 void Layer_Draw(layer_ptr source_layer, int source_x, int source_y,
-                unsigned char far *dest_buffer,int dest_y,int dest_height,
+                unsigned char *dest_buffer,int dest_y,int dest_height,
                 int transparent);
 
 void Layer_Delete(layer_ptr the_layer);
@@ -240,6 +240,3 @@ int Read_Pixel_DB(int x,int y);
 void Set_Working_Page_Mode_Z(int page);
 
 void Set_Visual_Page_Mode_Z(int page);
-
-
-
\ No newline at end of file
diff --git a/CHAP_4/HostApp/CHAP4.xcodeproj/project.pbxproj b/CHAP_4/HostApp/CHAP4.xcodeproj/project.pbxproj
new file mode 100644
index 0000000..54dddfd
--- /dev/null
+++ b/CHAP_4/HostApp/CHAP4.xcodeproj/project.pbxproj
@@ -0,0 +1,363 @@
+// !$*UTF8*$!
+{
+	archiveVersion = 1;
+	classes = {
+	};
+	objectVersion = 50;
+	objects = {
+
+/* Begin PBXBuildFile section */
+		2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 2DA6C5AF258AA66B002B1931 /* main.cpp */; };
+		3E358ABF28E8C96800692096 /* SPEED.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E358ABE28E8C96800692096 /* SPEED.C */; };
+		3E358AC128E8C98100692096 /* SPEED.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3E358AC028E8C97C00692096 /* SPEED.PCX */; };
+		3E3C579628E883D700637704 /* BLACK3.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E3C579528E883D300637704 /* BLACK3.C */; };
+		3E3C579928E883F800637704 /* BLACK4.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E3C579728E883F800637704 /* BLACK4.C */; };
+		3E3C579E28E88C0400637704 /* ANDRE.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3E3C579D28E88BC400637704 /* ANDRE.PCX */; };
+		3EB1E91C28E89E18003B3625 /* WORMIMG.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3E3C57A228E89DCD00637704 /* WORMIMG.PCX */; };
+		3EB1E91D28E89E1A003B3625 /* ANTIMG.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3E3C57A328E89DD500637704 /* ANTIMG.PCX */; };
+		3EB1E91E28E89E1C003B3625 /* MUSHROOM.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3E3C57A428E89DDC00637704 /* MUSHROOM.PCX */; };
+		3EB1E92428E8B248003B3625 /* ALIENIMG.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EB1E92228E8B242003B3625 /* ALIENIMG.PCX */; };
+		3EB1E92528E8B24B003B3625 /* ALIENWLD.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EB1E92328E8B242003B3625 /* ALIENWLD.PCX */; };
+/* End PBXBuildFile section */
+
+/* Begin PBXCopyFilesBuildPhase section */
+		2DA6C5AA258AA66B002B1931 /* CopyFiles */ = {
+			isa = PBXCopyFilesBuildPhase;
+			buildActionMask = 12;
+			dstPath = "";
+			dstSubfolderSpec = 16;
+			files = (
+				3E3C579E28E88C0400637704 /* ANDRE.PCX in CopyFiles */,
+				3EB1E91C28E89E18003B3625 /* WORMIMG.PCX in CopyFiles */,
+				3EB1E91D28E89E1A003B3625 /* ANTIMG.PCX in CopyFiles */,
+				3EB1E91E28E89E1C003B3625 /* MUSHROOM.PCX in CopyFiles */,
+				3EB1E92428E8B248003B3625 /* ALIENIMG.PCX in CopyFiles */,
+				3EB1E92528E8B24B003B3625 /* ALIENWLD.PCX in CopyFiles */,
+				3E358AC128E8C98100692096 /* SPEED.PCX in CopyFiles */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXCopyFilesBuildPhase section */
+
+/* Begin PBXFileReference section */
+		2D2793D725AD90B500DEC620 /* font.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = font.h; sourceTree = "<group>"; };
+		2D9EAF1F258E6A4300297C9C /* sdl.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = sdl.h; sourceTree = "<group>"; };
+		2D9EAF26258E750E00297C9C /* HostApp.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = HostApp.entitlements; sourceTree = "<group>"; };
+		2DA6C5AC258AA66B002B1931 /* CHAP4 */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = CHAP4; sourceTree = BUILT_PRODUCTS_DIR; };
+		2DA6C5AF258AA66B002B1931 /* main.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = main.cpp; sourceTree = "<group>"; };
+		2DB9F18C258EA679000A3299 /* ega.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = ega.h; sourceTree = "<group>"; };
+		3E358ABE28E8C96800692096 /* SPEED.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = SPEED.C; path = ../../SPEED.C; sourceTree = "<group>"; };
+		3E358AC028E8C97C00692096 /* SPEED.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = SPEED.PCX; path = ../../SPEED.PCX; sourceTree = "<group>"; };
+		3E358AC228E8C99E00692096 /* SPEED.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = SPEED.h; sourceTree = "<group>"; };
+		3E3C579428E883D300637704 /* BLACK3.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK3.H; path = ../../../CHAP_3/BLACK3.H; sourceTree = "<group>"; };
+		3E3C579528E883D300637704 /* BLACK3.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK3.C; path = ../../../CHAP_3/BLACK3.C; sourceTree = "<group>"; };
+		3E3C579728E883F800637704 /* BLACK4.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK4.C; path = ../../BLACK4.C; sourceTree = "<group>"; };
+		3E3C579828E883F800637704 /* BLACK4.H */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.h; name = BLACK4.H; path = ../../BLACK4.H; sourceTree = "<group>"; };
+		3E3C579A28E88B0D00637704 /* PCXDEMO.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = PCXDEMO.C; path = ../../PCXDEMO.C; sourceTree = "<group>"; };
+		3E3C579C28E88B7B00637704 /* PCXDEMO.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = PCXDEMO.h; sourceTree = "<group>"; };
+		3E3C579D28E88BC400637704 /* ANDRE.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = ANDRE.PCX; path = ../../ANDRE.PCX; sourceTree = "<group>"; };
+		3E3C579F28E89D1A00637704 /* WORMS.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = WORMS.C; path = ../../WORMS.C; sourceTree = "<group>"; };
+		3E3C57A128E89D5600637704 /* WORMS.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = WORMS.h; sourceTree = "<group>"; };
+		3E3C57A228E89DCD00637704 /* WORMIMG.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = WORMIMG.PCX; path = ../../WORMIMG.PCX; sourceTree = "<group>"; };
+		3E3C57A328E89DD500637704 /* ANTIMG.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = ANTIMG.PCX; path = ../../ANTIMG.PCX; sourceTree = "<group>"; };
+		3E3C57A428E89DDC00637704 /* MUSHROOM.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = MUSHROOM.PCX; path = ../../MUSHROOM.PCX; sourceTree = "<group>"; };
+		3EB1E91F28E8B1DC003B3625 /* ALIEN.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = ALIEN.C; path = ../../ALIEN.C; sourceTree = "<group>"; };
+		3EB1E92128E8B1F5003B3625 /* ALIEN.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = ALIEN.h; sourceTree = "<group>"; };
+		3EB1E92228E8B242003B3625 /* ALIENIMG.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = ALIENIMG.PCX; path = ../../ALIENIMG.PCX; sourceTree = "<group>"; };
+		3EB1E92328E8B242003B3625 /* ALIENWLD.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = ALIENWLD.PCX; path = ../../ALIENWLD.PCX; sourceTree = "<group>"; };
+/* End PBXFileReference section */
+
+/* Begin PBXFrameworksBuildPhase section */
+		2DA6C5A9258AA66B002B1931 /* Frameworks */ = {
+			isa = PBXFrameworksBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXFrameworksBuildPhase section */
+
+/* Begin PBXGroup section */
+		2DA6C5A3258AA66B002B1931 = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AE258AA66B002B1931 /* HostApp */,
+				2DA6C5AD258AA66B002B1931 /* Products */,
+			);
+			sourceTree = "<group>";
+		};
+		2DA6C5AD258AA66B002B1931 /* Products */ = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AC258AA66B002B1931 /* CHAP4 */,
+			);
+			name = Products;
+			sourceTree = "<group>";
+		};
+		2DA6C5AE258AA66B002B1931 /* HostApp */ = {
+			isa = PBXGroup;
+			children = (
+				2D9EAF26258E750E00297C9C /* HostApp.entitlements */,
+				2DA6C5AF258AA66B002B1931 /* main.cpp */,
+				2D9EAF1F258E6A4300297C9C /* sdl.h */,
+				2DB9F18C258EA679000A3299 /* ega.h */,
+				2D2793D725AD90B500DEC620 /* font.h */,
+				3E3C579528E883D300637704 /* BLACK3.C */,
+				3E3C579428E883D300637704 /* BLACK3.H */,
+				3E3C579728E883F800637704 /* BLACK4.C */,
+				3E3C579828E883F800637704 /* BLACK4.H */,
+				3E3C579A28E88B0D00637704 /* PCXDEMO.C */,
+				3E3C579C28E88B7B00637704 /* PCXDEMO.h */,
+				3E3C579D28E88BC400637704 /* ANDRE.PCX */,
+				3E3C579F28E89D1A00637704 /* WORMS.C */,
+				3E3C57A128E89D5600637704 /* WORMS.h */,
+				3E3C57A228E89DCD00637704 /* WORMIMG.PCX */,
+				3E3C57A328E89DD500637704 /* ANTIMG.PCX */,
+				3E3C57A428E89DDC00637704 /* MUSHROOM.PCX */,
+				3EB1E91F28E8B1DC003B3625 /* ALIEN.C */,
+				3EB1E92128E8B1F5003B3625 /* ALIEN.h */,
+				3EB1E92228E8B242003B3625 /* ALIENIMG.PCX */,
+				3EB1E92328E8B242003B3625 /* ALIENWLD.PCX */,
+				3E358ABE28E8C96800692096 /* SPEED.C */,
+				3E358AC228E8C99E00692096 /* SPEED.h */,
+				3E358AC028E8C97C00692096 /* SPEED.PCX */,
+			);
+			path = HostApp;
+			sourceTree = "<group>";
+		};
+/* End PBXGroup section */
+
+/* Begin PBXNativeTarget section */
+		2DA6C5AB258AA66B002B1931 /* CHAP4 */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = 2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP4" */;
+			buildPhases = (
+				2DA6C5A8258AA66B002B1931 /* Sources */,
+				2DA6C5A9258AA66B002B1931 /* Frameworks */,
+				2DA6C5AA258AA66B002B1931 /* CopyFiles */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+			);
+			name = CHAP4;
+			productName = CicParserSim;
+			productReference = 2DA6C5AC258AA66B002B1931 /* CHAP4 */;
+			productType = "com.apple.product-type.tool";
+		};
+/* End PBXNativeTarget section */
+
+/* Begin PBXProject section */
+		2DA6C5A4258AA66B002B1931 /* Project object */ = {
+			isa = PBXProject;
+			attributes = {
+				LastUpgradeCheck = 1240;
+				TargetAttributes = {
+					2DA6C5AB258AA66B002B1931 = {
+						CreatedOnToolsVersion = 12.2;
+					};
+				};
+			};
+			buildConfigurationList = 2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP4" */;
+			compatibilityVersion = "Xcode 9.3";
+			developmentRegion = en;
+			hasScannedForEncodings = 0;
+			knownRegions = (
+				en,
+				Base,
+			);
+			mainGroup = 2DA6C5A3258AA66B002B1931;
+			productRefGroup = 2DA6C5AD258AA66B002B1931 /* Products */;
+			projectDirPath = "";
+			projectRoot = "";
+			targets = (
+				2DA6C5AB258AA66B002B1931 /* CHAP4 */,
+			);
+		};
+/* End PBXProject section */
+
+/* Begin PBXSourcesBuildPhase section */
+		2DA6C5A8258AA66B002B1931 /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */,
+				3E358ABF28E8C96800692096 /* SPEED.C in Sources */,
+				3E3C579928E883F800637704 /* BLACK4.C in Sources */,
+				3E3C579628E883D700637704 /* BLACK3.C in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXSourcesBuildPhase section */
+
+/* Begin XCBuildConfiguration section */
+		2DA6C5B1258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = dwarf;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				ENABLE_TESTABILITY = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_OPTIMIZATION_LEVEL = 0;
+				GCC_PREPROCESSOR_DEFINITIONS = (
+					"DEBUG=1",
+					"$(inherited)",
+				);
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Debug;
+		};
+		2DA6C5B2258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				ENABLE_NS_ASSERTIONS = NO;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = NO;
+				MTL_FAST_MATH = YES;
+				SDKROOT = macosx;
+			};
+			name = Release;
+		};
+		2DA6C5B4258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = /opt/homebrew/Cellar/sdl2/2.24.0/include/SDL2;
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/Cellar/sdl2/2.24.0/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Debug;
+		};
+		2DA6C5B5258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = /opt/homebrew/Cellar/sdl2/2.24.0/include/SDL2;
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/Cellar/sdl2/2.24.0/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Release;
+		};
+/* End XCBuildConfiguration section */
+
+/* Begin XCConfigurationList section */
+		2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP4" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B1258AA66B002B1931 /* Debug */,
+				2DA6C5B2258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP4" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B4258AA66B002B1931 /* Debug */,
+				2DA6C5B5258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+/* End XCConfigurationList section */
+	};
+	rootObject = 2DA6C5A4258AA66B002B1931 /* Project object */;
+}
diff --git a/CHAP_4/HostApp/CHAP4.xcodeproj/project.xcworkspace/contents.xcworkspacedata b/CHAP_4/HostApp/CHAP4.xcodeproj/project.xcworkspace/contents.xcworkspacedata
new file mode 100644
index 0000000..bf06c0f
--- /dev/null
+++ b/CHAP_4/HostApp/CHAP4.xcodeproj/project.xcworkspace/contents.xcworkspacedata
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "self:/Users/ac27/Dev/black_art/black_art_3d_revival/CHAP_4/HostApp/CHAP4.xcodeproj">
+   </FileRef>
+</Workspace>
diff --git a/CHAP_4/HostApp/CHAP4.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist b/CHAP_4/HostApp/CHAP4.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
new file mode 100644
index 0000000..18d9810
--- /dev/null
+++ b/CHAP_4/HostApp/CHAP4.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IDEDidComputeMac32BitWarning</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_4/HostApp/HostApp/ALIEN.h b/CHAP_4/HostApp/HostApp/ALIEN.h
new file mode 100644
index 0000000..01d7f4b
--- /dev/null
+++ b/CHAP_4/HostApp/HostApp/ALIEN.h
@@ -0,0 +1,13 @@
+//
+//  ALIEN.h
+//  CHAP4
+//
+//  Created by Tosha on 01/10/2022.
+//
+
+#ifndef ALIEN_h
+#define ALIEN_h
+
+void start_alien(CEga *ega);
+
+#endif /* ALIEN_h */
diff --git a/CHAP_4/HostApp/HostApp/HostApp.entitlements b/CHAP_4/HostApp/HostApp/HostApp.entitlements
new file mode 100644
index 0000000..8cc185a
--- /dev/null
+++ b/CHAP_4/HostApp/HostApp/HostApp.entitlements
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>com.apple.security.cs.disable-library-validation</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_4/HostApp/HostApp/PCXDEMO.h b/CHAP_4/HostApp/HostApp/PCXDEMO.h
new file mode 100644
index 0000000..e0d754e
--- /dev/null
+++ b/CHAP_4/HostApp/HostApp/PCXDEMO.h
@@ -0,0 +1,13 @@
+//
+//  PCXDEMO.h
+//  CHAP4
+//
+//  Created by Tosha on 01/10/2022.
+//
+
+#ifndef PCXDEMO_h
+#define PCXDEMO_h
+
+void start(CEga *ega);
+
+#endif /* PCXDEMO_h */
diff --git a/CHAP_4/HostApp/HostApp/SPEED.h b/CHAP_4/HostApp/HostApp/SPEED.h
new file mode 100644
index 0000000..9c15c3f
--- /dev/null
+++ b/CHAP_4/HostApp/HostApp/SPEED.h
@@ -0,0 +1,13 @@
+//
+//  SPEED.h
+//  CHAP4
+//
+//  Created by Tosha on 01/10/2022.
+//
+
+#ifndef SPEED_h
+#define SPEED_h
+
+void start_speed(CEga *ega);
+
+#endif /* SPEED_h */
diff --git a/CHAP_4/HostApp/HostApp/WORMS.h b/CHAP_4/HostApp/HostApp/WORMS.h
new file mode 100644
index 0000000..fa75178
--- /dev/null
+++ b/CHAP_4/HostApp/HostApp/WORMS.h
@@ -0,0 +1,13 @@
+//
+//  WORMS.h
+//  CHAP4
+//
+//  Created by Tosha on 01/10/2022.
+//
+
+#ifndef WORMS_h
+#define WORMS_h
+
+void start_worms(CEga *ega);
+
+#endif /* WORMS_h */
diff --git a/CHAP_4/HostApp/HostApp/cpu.cpp b/CHAP_4/HostApp/HostApp/cpu.cpp
new file mode 100644
index 0000000..fdf299e
--- /dev/null
+++ b/CHAP_4/HostApp/HostApp/cpu.cpp
@@ -0,0 +1,316 @@
+//
+//  cpu.c
+//  HostApp
+//
+//  Created by Tosha on 25/09/2022.
+//
+
+#include "cpu.h"
+
+#include <iostream>
+#include <sstream>
+#include <iomanip>
+#include <list>
+
+template <class DST, class SRC, class DIR>
+void _movsb()
+{
+    //memory[adr(_es, _di)] = memory[adr(_ds, _si)];
+    DIR::Assert();
+    DST::Set8(_es, DIR::Move(_di), SRC::Get8(_ds, DIR::Move(_si)));
+}
+
+
+
+template <class DST, class SRC, class DIR>
+void _rep_movsb()
+{
+    _ASSERT(_cx < 0x6000);
+    _ASSERT(_cx);
+    while (_cx--)
+        _movsb<DST, SRC, DIR>();
+    _cx = 0;
+}
+
+template <class DST, class SRC, class DIR>
+void _movsw()
+{
+    DIR::Assert();
+    DST::Set8(_es, DIR::Move(_di), SRC::Get8(_ds, DIR::Move(_si)));
+    DST::Set8(_es, DIR::Move(_di), SRC::Get8(_ds, DIR::Move(_si)));
+}
+
+template <class DST, class SRC, class DIR>
+void _rep_movsw()
+{
+    _ASSERT(_cx < 0x6000);
+    _ASSERT(_cx);
+    while (_cx--)
+        _movsw<DST, SRC, DIR>();
+    _cx = 0;
+}
+
+template <class DST, class DIR>
+void _rep_stosb()
+{
+    _ASSERT(_cx < 0x7000);
+    _ASSERT(_cx);
+    while (_cx--)
+        _stosb<DST, DIR>();
+    _cx = 0;
+}
+
+template <class DST, class DIR>
+void _stosb()
+{
+    DIR::Assert();
+    DST::Set8(_es, DIR::Move(_di), _al);
+}
+
+template <class DST, class DIR>
+void _rep_stosw()
+{
+    _ASSERT(_cx == 0x7a34 || _cx < 0x5000);
+    if (_cx)
+    {
+        while (_cx--)
+            _stosw<DST, DIR>();
+        _cx = 0;
+
+    }
+}
+
+template <class DST, class DIR>
+void _stosw()
+{
+    DIR::Assert();
+    DST::Set8(_es, DIR::Move(_di), _al);
+    DST::Set8(_es, DIR::Move(_di), _ah);
+}
+/*
+template <class SRC, class DIR>
+void _rep_lodsw()
+{
+    _ASSERT(_cx);
+    while (_cx--)
+        _lodsw<SRC, DIR>();
+    _cx = 0;
+}*/
+
+template <class SRC, class DIR>
+void _lodsw()
+{
+    DIR::Assert();
+    _al = SRC::Get8(_ds, DIR::Move(_si));
+    _ah = SRC::Get8(_ds, DIR::Move(_si));
+}
+
+template <class SRC, class DIR>
+void _lodsb()
+{
+    DIR::Assert();
+    _al = SRC::Get8(_ds, DIR::Move(_si));
+}
+
+
+std::vector<WORD> m_arrStack;
+//
+
+void StackWrite(int nOffset, WORD nData)
+{
+    _ASSERT(nOffset/2 >= 0 && nOffset/2 < (int)m_arrStack.size());
+    _ASSERT((nOffset&1) == 0);
+    m_arrStack[nOffset/2] = nData;
+}
+
+WORD StackRead(int nOffset)
+{
+    _ASSERT(nOffset/2 >= 0 && nOffset/2 < (int)m_arrStack.size());
+    _ASSERT((nOffset&1) == 0);
+    return m_arrStack[nOffset/2];
+}
+
+void _push(WORD data)
+{
+    StackWrite(_sp, data);
+    _sp -= 2;
+}
+
+WORD _pop()
+{
+    _sp += 2;
+    return StackRead(_sp);
+}
+
+void _xchg(BYTE& a, BYTE& b) { BYTE t = a; a = b; b = t; }
+void _xchg(WORD& a, WORD& b) { WORD t = a; a = b; b = t; }
+//void _lea(WORD& r, WORD o) { _ASSERT(0); }
+void _lea(WORD& r, WORD s, WORD o)
+{
+    r = o;
+}
+
+void _repne_scasw();
+void _les(WORD& reg, WORD addr)
+{
+    reg = memory16(_ds, addr);
+    _es = memory16(_ds, addr+2);
+}
+template <typename INT>
+INT rol(INT val) {
+    return (val << 1) | (val >> (sizeof(INT)*CHAR_BIT-1));
+}
+template <typename INT>
+INT ror(INT val) {
+    return (val >> 1) | (val << (sizeof(INT)*CHAR_BIT-1));
+}
+
+void _rol(WORD& b, BYTE l)
+{
+    _ASSERT(l>=0 && l <= 7);
+    while (l--) b = rol<WORD>(b);
+}
+
+void _rol(BYTE& b, BYTE l)
+{
+    _ASSERT(l>=0 && l <= 7);
+    while (l--) b = rol<BYTE>(b);
+}
+
+void _ror(WORD & b, BYTE l)
+{
+    _ASSERT(l == 1);
+    b = ror<WORD>(b);
+}
+
+
+void _ror(BYTE& b, BYTE l)
+{
+    _ASSERT(l == 1);
+    b = ror<BYTE>(b);
+}
+
+void _div(WORD& r)
+{
+    _ASSERT(r != 0);
+    WORD result = _ax / r;
+    WORD remain = _ax % r;
+    _ax = result;
+    _dx = remain;
+}
+
+void _rcl(WORD& r, BYTE c)
+{
+    _ASSERT(c == 1);
+    int newCarry = !!(r & 0x8000);
+    r <<= 1;
+    r |= _flags.carry;
+    _flags.carry = newCarry;
+}
+
+void _cwd()
+{
+    if (_ax & 0x8000)
+        _dx = 0xffff;
+    else
+        _dx = 0x0000;
+}
+
+void _rcl(BYTE& r, BYTE c)
+{
+    _ASSERT(c == 1);
+    int newCarry = !!(r & 0x80);
+    r <<= 1;
+    r |= _flags.carry;
+    _flags.carry = newCarry;
+}
+
+void _repne_scasb()
+{
+    _ASSERT(_flags.direction == 0);
+    _flags.zero = 0;
+    while ( _cx-- && _flags.zero == 0 )
+    {
+        _flags.zero = (_al - memory(_es, _di)) == 0;
+        _di++;
+    }
+}
+
+void _idiv(WORD d)
+{
+    // DX:AX / d -> AX result, DX remainder
+    int32_t dw = (_dx << 16) | _ax;
+    WORD result = dw / d;
+    WORD remainder = dw % d;
+    _ax = result;
+    _dx = remainder;
+}
+
+void _div(BYTE dby)
+{
+  int res = _ax / dby;
+  int rem = _ax % dby;
+  _al = res;
+  _ah = rem;
+}
+
+void _sar(WORD& a, BYTE b)
+{
+    int16_t& sa = (short&)a;
+    sa >>= b;
+}
+
+void _cbw()
+{
+    if (_al & 0x80)
+        _ah = 0xff;
+    else
+        _ah = 0;
+}
+
+WORD& _stack16(int ofs)
+{
+    int nOffset = ofs;
+    _ASSERT(nOffset/2 >= 0 && nOffset/2 < (int)m_arrStack.size());
+    _ASSERT((nOffset&1) == 0);
+    return m_arrStack.data()[nOffset/2];
+}
+
+WORD& _stack16(int a, int b)
+{
+    return _stack16(a+b);
+}
+
+void _stackReduce(int n)
+{
+    _sp += n;
+    _ASSERT( _sp >= 0 && _sp < m_arrStack.size());
+}
+
+void _mul(WORD w)
+{
+    int v = w * _ax;
+    _ax = v & 0xffff;
+    _dx = v >> 16;
+}
+void _mul(BYTE b)
+{
+    int v = b * _ax;
+    _ax = v & 0xffff;
+}
+
+void _xlat()
+{
+    _al = memory(_ds, _bx+_al);
+}
+
+void _repne_scasw()
+{
+    _ASSERT(0);
+}
+
+bool _fixme_()
+{
+    _ASSERT(0);
+    return false;
+}
diff --git a/CHAP_4/HostApp/HostApp/ega.h b/CHAP_4/HostApp/HostApp/ega.h
new file mode 100644
index 0000000..72f315a
--- /dev/null
+++ b/CHAP_4/HostApp/HostApp/ega.h
@@ -0,0 +1,62 @@
+#ifndef EGA_h
+#define EGA_h
+
+#include "font.h"
+
+typedef uint16_t WORD;
+typedef uint8_t BYTE;
+typedef uint8_t FLAG;
+typedef uint16_t WORD;
+
+typedef uint32_t DWORD;
+
+class CVideoAdapter
+{
+public:
+	virtual DWORD GetPixel(int x, int y, int p) = 0;
+};
+
+class CEga : public CVideoAdapter
+{
+	enum {
+		MemSize = 0x10000*2
+	};
+
+public:
+	DWORD memory[MemSize];
+
+    // https://www.ditig.com/256-colors-cheat-sheet
+    // Note: this is not really an VGA default palette, but Xterm one
+    DWORD palette[256] = {
+        0x000000, 0x800000, 0x008000, 0x808000, 0x000080, 0x800080, 0x008080, 0xc0c0c0, 0x808080, 0xff0000, 0x00ff00, 0xffff00, 0x0000ff, 0xff00ff, 0x00ffff, 0xffffff, 0x000000, 0x00005f, 0x000087, 0x0000af, 0x0000d7, 0x0000ff, 0x005f00, 0x005f5f, 0x005f87, 0x005faf, 0x005fd7, 0x005fff, 0x008700, 0x00875f, 0x008787, 0x0087af, 0x0087d7, 0x0087ff, 0x00af00, 0x00af5f, 0x00af87, 0x00afaf, 0x00afd7, 0x00afff, 0x00d700, 0x00d75f, 0x00d787, 0x00d7af, 0x00d7d7, 0x00d7ff, 0x00ff00, 0x00ff5f, 0x00ff87, 0x00ffaf, 0x00ffd7, 0x00ffff, 0x5f0000, 0x5f005f, 0x5f0087, 0x5f00af, 0x5f00d7, 0x5f00ff, 0x5f5f00, 0x5f5f5f, 0x5f5f87, 0x5f5faf, 0x5f5fd7, 0x5f5fff, 0x5f8700, 0x5f875f, 0x5f8787, 0x5f87af, 0x5f87d7, 0x5f87ff, 0x5faf00, 0x5faf5f, 0x5faf87, 0x5fafaf, 0x5fafd7, 0x5fafff, 0x5fd700, 0x5fd75f, 0x5fd787, 0x5fd7af, 0x5fd7d7, 0x5fd7ff, 0x5fff00, 0x5fff5f, 0x5fff87, 0x5fffaf, 0x5fffd7, 0x5fffff, 0x870000, 0x87005f, 0x870087, 0x8700af, 0x8700d7, 0x8700ff, 0x875f00, 0x875f5f, 0x875f87, 0x875faf, 0x875fd7, 0x875fff, 0x878700, 0x87875f, 0x878787, 0x8787af, 0x8787d7, 0x8787ff, 0x87af00, 0x87af5f, 0x87af87, 0x87afaf, 0x87afd7, 0x87afff, 0x87d700, 0x87d75f, 0x87d787, 0x87d7af, 0x87d7d7, 0x87d7ff, 0x87ff00, 0x87ff5f, 0x87ff87, 0x87ffaf, 0x87ffd7, 0x87ffff, 0xaf0000, 0xaf005f, 0xaf0087, 0xaf00af, 0xaf00d7, 0xaf00ff, 0xaf5f00, 0xaf5f5f, 0xaf5f87, 0xaf5faf, 0xaf5fd7, 0xaf5fff, 0xaf8700, 0xaf875f, 0xaf8787, 0xaf87af, 0xaf87d7, 0xaf87ff, 0xafaf00, 0xafaf5f, 0xafaf87, 0xafafaf, 0xafafd7, 0xafafff, 0xafd700, 0xafd75f, 0xafd787, 0xafd7af, 0xafd7d7, 0xafd7ff, 0xafff00, 0xafff5f, 0xafff87, 0xafffaf, 0xafffd7, 0xafffff, 0xd70000, 0xd7005f, 0xd70087, 0xd700af, 0xd700d7, 0xd700ff, 0xd75f00, 0xd75f5f, 0xd75f87, 0xd75faf, 0xd75fd7, 0xd75fff, 0xd78700, 0xd7875f, 0xd78787, 0xd787af, 0xd787d7, 0xd787ff, 0xd7af00, 0xd7af5f, 0xd7af87, 0xd7afaf, 0xd7afd7, 0xd7afff, 0xd7d700, 0xd7d75f, 0xd7d787, 0xd7d7af, 0xd7d7d7, 0xd7d7ff, 0xd7ff00, 0xd7ff5f, 0xd7ff87, 0xd7ffaf, 0xd7ffd7, 0xd7ffff, 0xff0000, 0xff005f, 0xff0087, 0xff00af, 0xff00d7, 0xff00ff, 0xff5f00, 0xff5f5f, 0xff5f87, 0xff5faf, 0xff5fd7, 0xff5fff, 0xff8700, 0xff875f, 0xff8787, 0xff87af, 0xff87d7, 0xff87ff, 0xffaf00, 0xffaf5f, 0xffaf87, 0xffafaf, 0xffafd7, 0xffafff, 0xffd700, 0xffd75f, 0xffd787, 0xffd7af, 0xffd7d7, 0xffd7ff, 0xffff00, 0xffff5f, 0xffff87, 0xffffaf, 0xffffd7, 0xffffff, 0x080808, 0x121212, 0x1c1c1c, 0x262626, 0x303030, 0x3a3a3a, 0x444444, 0x4e4e4e, 0x585858, 0x626262, 0x6c6c6c, 0x767676, 0x808080, 0x8a8a8a, 0x949494, 0x9e9e9e, 0xa8a8a8, 0xb2b2b2, 0xbcbcbc, 0xc6c6c6, 0xd0d0d0, 0xdadada, 0xe4e4e4, 0xeeeeee
+    };
+
+public:
+	CEga()
+	{
+        memset(memory, 0, sizeof(memory));
+	}
+	
+    void SetPaletteIndex(int index, int rgb)
+    {
+        int r = ((rgb & 4) ? 2 : 0) + ((rgb & 32) ? 1 : 0);
+        int g = ((rgb & 2) ? 2 : 0) + ((rgb & 16) ? 1 : 0);
+        int b = ((rgb & 1) ? 2 : 0) + ((rgb & 8) ? 1 : 0);
+        r = r * 255 / 3;
+        g = g * 255 / 3;
+        b = b * 255 / 3;
+        palette[index] = b | (g << 8) | (r << 16);
+
+    }
+    
+	virtual DWORD GetPixel(int x, int y, int page = -1) override
+	{
+        BYTE* _video = (BYTE*)memory;
+        int idx = (int)_video[((y<<8) + (y<<6)) + x];
+        return palette[idx];
+	}
+};
+
+void _sync();
+
+#endif
diff --git a/CHAP_4/HostApp/HostApp/font.h b/CHAP_4/HostApp/HostApp/font.h
new file mode 100644
index 0000000..8be86b2
--- /dev/null
+++ b/CHAP_4/HostApp/HostApp/font.h
@@ -0,0 +1,313 @@
+#ifndef FONT_h
+#define FONT_h
+
+#pragma once
+
+// http://www.hampa.ch/pce/download.html
+// genoa-ega-2.41.rom
+// dd if=genoa-ega-2.41.rom of=font bs=1 skip=8224 count=3584
+// xxd -i font > font.h
+
+static const uint8_t font[] = {
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81,
+  0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xff,
+  0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
+  0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
+  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff,
+  0xff, 0xff, 0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc,
+  0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30,
+  0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x63,
+  0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06,
+  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66,
+  0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xdb,
+  0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c,
+  0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c,
+  0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c,
+  0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06,
+  0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6,
+  0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c,
+  0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x30,
+  0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c,
+  0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38, 0x78, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c,
+  0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66,
+  0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0,
+  0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x6c,
+  0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66,
+  0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x0c,
+  0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66,
+  0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
+  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60,
+  0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x30, 0x30, 0x30,
+  0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0,
+  0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
+  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xff, 0x00, 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76,
+  0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66,
+  0x3c, 0x00, 0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66,
+  0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec,
+  0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60,
+  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c,
+  0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30,
+  0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38,
+  0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38,
+  0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66,
+  0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00, 0x00,
+  0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc,
+  0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x38,
+  0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
+  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe,
+  0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x38,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x66,
+  0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x60,
+  0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c,
+  0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x76,
+  0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x6c,
+  0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00, 0x10,
+  0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00, 0x00, 0xc6,
+  0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60,
+  0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xcc, 0xcc,
+  0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x0e,
+  0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
+  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
+  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
+  0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
+  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06,
+  0x06, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c,
+  0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c,
+  0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x44, 0x11, 0x44,
+  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x55, 0xaa,
+  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
+  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
+  0xdd, 0x77, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
+  0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff,
+  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
+  0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
+  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
+  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30,
+  0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c,
+  0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c,
+  0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00,
+  0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e,
+  0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18,
+  0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00,
+  0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c,
+  0x1c, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8,
+  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+};
+
+#endif
diff --git a/CHAP_4/HostApp/HostApp/main.cpp b/CHAP_4/HostApp/HostApp/main.cpp
new file mode 100644
index 0000000..1dbc4b0
--- /dev/null
+++ b/CHAP_4/HostApp/HostApp/main.cpp
@@ -0,0 +1,61 @@
+//
+//  main.cpp
+//  HostApp
+//
+//
+
+#include <iostream>
+#include <vector>
+#include <sstream>
+#include <iomanip>
+#include <list>
+
+#include "sdl.h"
+#include "ega.h"
+
+//#include "PCXDEMO.h"
+//#include "WORMS.h"
+//#include "ALIEN.h"
+#include "SPEED.h"
+
+CEga mVideo;
+CSdl mSdl;
+std::list<int> keyboardBuffer;
+
+void onKey(int k, int p)
+{
+    if (!p)
+        return;
+
+    int key = 0;
+    switch (k)
+    {
+        case SDL_SCANCODE_UP: key = 0x4800; break;
+        case SDL_SCANCODE_DOWN: key = 0x5000; break;
+        case SDL_SCANCODE_LEFT: key = 0x4b00; break;
+        case SDL_SCANCODE_RIGHT: key = 0x4d00; break;
+        case SDL_SCANCODE_SPACE: key = 0x3920; break;
+        case SDL_SCANCODE_RETURN: key = 0x1c0d; break;
+    }
+
+    if (key)
+    {
+        keyboardBuffer.push_back(key);
+    }
+}
+
+void _sync()
+{
+    for (int y=0; y<mSdl.Height; y++)
+      for (int x=0; x<mSdl.Width; x++)
+        mSdl.SetPixel(x, y, mVideo.GetPixel(x, y));
+    
+    mSdl.Loop();
+}
+
+int main(int argc, const char * argv[]) {
+    mSdl.Init();
+    start_speed(&mVideo);
+    mSdl.Deinit();
+    return 0;
+}
diff --git a/CHAP_4/HostApp/HostApp/sdl.h b/CHAP_4/HostApp/HostApp/sdl.h
new file mode 100644
index 0000000..767a163
--- /dev/null
+++ b/CHAP_4/HostApp/HostApp/sdl.h
@@ -0,0 +1,144 @@
+#ifndef SDL_h
+#define SDL_h
+
+typedef uint32_t Uint32;
+#include <SDL.h>
+#include <SDL_render.h>
+
+void onKey(int k, int p);
+
+class CSdl
+{
+    
+    std::vector< unsigned char > pixels;
+    const int pixelSize = 2;
+
+    SDL_Renderer* renderer{nullptr};
+    SDL_Texture* texture{nullptr};
+    SDL_Window* window{nullptr};
+    bool running{true};
+    int lastKey{0};
+
+public:
+    enum {
+        Width = 320,//640,
+        Height = 200//350
+    };
+
+    void Init()
+    {
+        pixels.resize(Width*Height*4);
+        SDL_Init( SDL_INIT_EVERYTHING );
+        atexit( SDL_Quit );
+        
+        window = SDL_CreateWindow
+        (
+         "BlackArt simulator",
+         SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
+         Width*pixelSize, Height*pixelSize,
+         SDL_WINDOW_SHOWN
+         );
+        
+        renderer = SDL_CreateRenderer
+        (
+         window,
+         -1,
+         SDL_RENDERER_ACCELERATED
+         );
+
+        texture = SDL_CreateTexture
+        (
+         renderer,
+         SDL_PIXELFORMAT_ARGB8888,
+         SDL_TEXTUREACCESS_STREAMING,
+         Width, Height
+         );
+    }
+    
+    void Blit()
+    {
+        SDL_SetRenderDrawColor( renderer, 0, 0, 0, SDL_ALPHA_OPAQUE );
+        SDL_RenderClear( renderer );
+        
+        SDL_UpdateTexture
+        (
+         texture,
+         NULL,
+         &pixels[0],
+         Width * 4
+         );
+        
+        SDL_RenderCopy( renderer, texture, NULL, NULL );
+        SDL_RenderPresent( renderer );
+    }
+    
+    void Loop()
+    {
+//        SDL_Event event;
+//
+//        while( SDL_PollEvent( &event ) )
+//        {
+//            if (SDL_KEYDOWN == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 1);
+//            }
+//
+//            if (SDL_KEYUP == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 0);
+//            }
+//
+//            if( ( SDL_QUIT == event.type ) ||
+//               ( SDL_KEYDOWN == event.type && SDL_SCANCODE_ESCAPE == event.key.keysym.scancode ) )
+//            {
+//                running = false;
+//                break;
+//            }
+//        }
+        
+        Blit();
+        
+        //const Uint64 end = SDL_GetPerformanceCounter();
+        //const static Uint64 freq = SDL_GetPerformanceFrequency();
+        //const double seconds = ( end - start ) / static_cast< double >( freq );
+        //std::cout << "Frame time: " << seconds * 1000.0 << "ms" << std::endl;
+        if (running)
+            SDL_Delay(20);
+    }
+    
+    void Deinit()
+    {
+        SDL_DestroyRenderer( renderer );
+        SDL_DestroyWindow( window );
+        SDL_Quit();
+    }
+    
+    void SetPixel(int x, int y, uint32_t c)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        pixels[ offset + 0 ] = (uint8_t)c;
+        pixels[ offset + 1 ] = (uint8_t)(c >> 8);
+        pixels[ offset + 2 ] = (uint8_t)(c >> 16);
+        pixels[ offset + 3 ] = SDL_ALPHA_OPAQUE;
+    }
+
+    uint32_t GetPixel(int x, int y)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        int b = pixels[ offset + 0 ];
+        int g = pixels[ offset + 1 ];
+        int r = pixels[ offset + 2 ];
+        return r | (g << 8) | (b << 16);
+    }
+
+};
+
+#endif
diff --git a/CHAP_4/PCXDEMO.C b/CHAP_4/PCXDEMO.C
index 5c730c8..00d5c90 100755
--- a/CHAP_4/PCXDEMO.C
+++ b/CHAP_4/PCXDEMO.C
@@ -3,15 +3,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 
@@ -25,12 +22,22 @@ pcx_picture image_pcx;  // general PCX image used to load background and imagery
 
 // M A I N ///////////////////////////////////////////////////////////////////
 
-void main(int argc, char **argv)
+void getch() {
+    _sync();
+    SDL_Event event;
+    while(1) {    // wait for input to break
+        SDL_PollEvent(&event);
+        if(event.type == SDL_KEYDOWN)
+            return;
+    }
+}
+
+void start(CEga *ega)
 {
 
 // set the graphics mode to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // load the screen image
 
@@ -38,7 +45,7 @@ PCX_Init((pcx_picture_ptr)&image_pcx);
 
 // load a PCX file (make sure it's there)
 
-if (PCX_Load("andre.pcx", (pcx_picture_ptr)&image_pcx,1))
+if (PCX_Load("ANDRE.PCX", (pcx_picture_ptr)&image_pcx,1))
    {
    // copy the image to the display buffer
 
@@ -50,7 +57,8 @@ if (PCX_Load("andre.pcx", (pcx_picture_ptr)&image_pcx,1))
 
    // wait for a keyboard press
 
-   while(!kbhit()){}
+   //while(!kbhit()){}
+   getch();
 
    // use a screen transition to exit
 
@@ -60,8 +68,7 @@ if (PCX_Load("andre.pcx", (pcx_picture_ptr)&image_pcx,1))
 
 // reset graphics to text mode
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 } // end main
 
-
\ No newline at end of file
diff --git a/CHAP_4/SPEED.C b/CHAP_4/SPEED.C
index a645b60..99c08fb 100755
--- a/CHAP_4/SPEED.C
+++ b/CHAP_4/SPEED.C
@@ -3,15 +3,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 
@@ -35,7 +32,7 @@ pcx_picture image_pcx;  // general PCX image used to load background and imagery
 
 // M A I N ///////////////////////////////////////////////////////////////////
 
-void main(int argc, char **argv)
+void start_speed(CEga *ega)
 {
 
 RGB_color color_1, color_2;  // used to perform the color rotation
@@ -44,7 +41,7 @@ int index;                   // looping variable
 
 // set the graphics mode to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // load the screen image
 
@@ -98,8 +95,18 @@ if (PCX_Load("speed.pcx", (pcx_picture_ptr)&image_pcx,1))
 
    // wait for a keyboard press
 
-   while(!kbhit())
+   bool running = true;
+   while(running)
         {
+            SDL_Event event;
+            while( SDL_PollEvent( &event ) )
+            {
+                if (SDL_KEYDOWN == event.type)
+                {
+                    running = false;
+                    break;
+                }
+            }
 
         // rotate road colors
 
@@ -152,7 +159,8 @@ if (PCX_Load("speed.pcx", (pcx_picture_ptr)&image_pcx,1))
 
         // synchronize to 2/18th of second or 9 FPS
 
-        Time_Delay(1);
+        _sync();
+        Time_Delay(50000);
 
         } // end main loop
 
@@ -164,8 +172,6 @@ if (PCX_Load("speed.pcx", (pcx_picture_ptr)&image_pcx,1))
 
 // reset graphics to text mode
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 } // end main
-
-
\ No newline at end of file
diff --git a/CHAP_4/WORMS.C b/CHAP_4/WORMS.C
index 238c424..ca9ac66 100755
--- a/CHAP_4/WORMS.C
+++ b/CHAP_4/WORMS.C
@@ -3,15 +3,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 
@@ -26,14 +23,14 @@ sprite worm,ant;        // the worm and ant
 
 // M A I N //////////////////////////////////////////////////////////////////
 
-void main(int argc, char **argv)
+void start_worms(CEga *ega)
 {
 
 int index;  // loop variable
 
 // set the graphics mode to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // create the double buffer
 
@@ -96,9 +93,18 @@ Sprite_Under((sprite_ptr)&ant,double_buffer);
 Sprite_Under_Clip((sprite_ptr)&worm,double_buffer);
 
 // main event loop, process until keyboard hit
-
-while(!kbhit())
+bool running = true;
+while(running)
      {
+         SDL_Event event;
+         while( SDL_PollEvent( &event ) )
+         {
+             if (SDL_KEYDOWN == event.type)
+             {
+                 running = false;
+                 break;
+             }
+         }
 
      // do animation cycle, erase, move draw...
 
@@ -141,7 +147,8 @@ while(!kbhit())
 
      // lock onto 18 frames per second max
 
-     Time_Delay(1);
+     _sync();
+     Time_Delay(50000);
 
      } // end while
 
@@ -157,8 +164,6 @@ Sprite_Delete((sprite_ptr)&ant);
 
 Delete_Double_Buffer();
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 } // end main
-
-
\ No newline at end of file
diff --git a/CHAP_7/CRITTERS.C b/CHAP_7/CRITTERS.C
index c270159..f5e42b4 100755
--- a/CHAP_7/CRITTERS.C
+++ b/CHAP_7/CRITTERS.C
@@ -3,15 +3,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 
@@ -42,7 +39,7 @@ critter critters[NUM_CRITTERS];  // the array that hold all the critters
 
 // M A I N //////////////////////////////////////////////////////////////////
 
-void main(int argc, char **argv)
+void start_critters(CEga *ega)
 {
 
 int index;   // loop variable
@@ -56,7 +53,7 @@ float speed,        // used to scale velocity vector of trajectory
 
 // set the graphics mode to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // create the double buffer
 
@@ -148,9 +145,18 @@ for (index=0; index<NUM_CRITTERS; index++)
                                          (int)critters[index].y);
 
 // main event loop, process until keyboard hit
-
-while(!kbhit())
+bool done = false;
+while(!done)
      {
+         
+     SDL_Event event;
+     while( SDL_PollEvent( &event ) )
+     {
+         if (SDL_KEYDOWN == event.type) {
+             done = true;
+             break;
+         }
+     }
 
      // do animation cycle, erase, move draw...
 
@@ -202,7 +208,8 @@ while(!kbhit())
 
      // lock onto 9 frames per second max
 
-     Time_Delay(2);
+     _sync();
+     Time_Delay(CLOCKS_PER_SEC/9);
 
      } // end while
 
@@ -214,8 +221,6 @@ Screen_Transition(SCREEN_SWIPE_X);
 
 Delete_Double_Buffer();
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 } // end main
-
-
\ No newline at end of file
diff --git a/CHAP_7/FLOATER.C b/CHAP_7/FLOATER.C
index 7a31696..03af944 100755
--- a/CHAP_7/FLOATER.C
+++ b/CHAP_7/FLOATER.C
@@ -3,15 +3,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 
@@ -28,7 +25,7 @@ sprite speeder;         // the floating speeder
 
 // M A I N //////////////////////////////////////////////////////////////////
 
-void main(int argc, char **argv)
+void start_floater(CEga* ega)
 {
 
 int index,         // loop variable
@@ -48,7 +45,7 @@ scanf("%d",&hover_height);
 
 // set the graphics mode to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // create the double buffer
 
@@ -76,7 +73,7 @@ PCX_Delete((pcx_picture_ptr)&image_pcx);
 
 // seed the random number generator with current time
 
-srand(*(int far *)0x0000046CL);
+srand(time(0));
 
 for (x=0; x<320; x++)
     {
@@ -109,8 +106,18 @@ Print_String_DB(80,2,9,"Hit any key to exit",1);
 
 // main event loop, process until keyboard hit
 
-while(!kbhit())
+bool done = false;
+while(!done)
+     {
+         
+     SDL_Event event;
+     while( SDL_PollEvent( &event ) )
      {
+         if (SDL_KEYDOWN == event.type) {
+             done = true;
+             break;
+         }
+     }
 
      // do animation cycle, erase, move draw...
 
@@ -163,7 +170,8 @@ while(!kbhit())
 
      // lock onto 18 frames per second max
 
-     Time_Delay(1);
+     _sync();
+     Time_Delay(CLOCKS_PER_SEC/18);
 
      } // end while
 
@@ -176,8 +184,6 @@ Screen_Transition(SCREEN_DARKNESS);
 Sprite_Delete((sprite_ptr)&speeder);
 Delete_Double_Buffer();
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 } // end main
-
-
\ No newline at end of file
diff --git a/CHAP_7/HostApp/CHAP7.xcodeproj/project.pbxproj b/CHAP_7/HostApp/CHAP7.xcodeproj/project.pbxproj
new file mode 100644
index 0000000..58c9989
--- /dev/null
+++ b/CHAP_7/HostApp/CHAP7.xcodeproj/project.pbxproj
@@ -0,0 +1,375 @@
+// !$*UTF8*$!
+{
+	archiveVersion = 1;
+	classes = {
+	};
+	objectVersion = 50;
+	objects = {
+
+/* Begin PBXBuildFile section */
+		2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 2DA6C5AF258AA66B002B1931 /* main.cpp */; };
+		3E3C579628E883D700637704 /* BLACK3.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E3C579528E883D300637704 /* BLACK3.C */; };
+		3EF00A5628E9A021000AC74A /* LOCKALN.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EF00A5528E9A018000AC74A /* LOCKALN.PCX */; };
+		3EF00A5728E9A023000AC74A /* LOCKBAK.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EF00A5328E9A018000AC74A /* LOCKBAK.PCX */; };
+		3EF00A5828E9A024000AC74A /* LOCKCRT.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EF00A5428E9A018000AC74A /* LOCKCRT.PCX */; };
+		3EF00A5928E9A177000AC74A /* BLACK4.C in Sources */ = {isa = PBXBuildFile; fileRef = 3EF00A4F28E99F84000AC74A /* BLACK4.C */; };
+		3EF00A5F28E9C4B0000AC74A /* LOSTBACK.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EF00A5E28E9C4A7000AC74A /* LOSTBACK.PCX */; };
+		3EF00A6028E9C4B3000AC74A /* LOSTSHIP.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EF00A5D28E9C4A7000AC74A /* LOSTSHIP.PCX */; };
+		3EF00A6428E9C538000AC74A /* CRITBACK.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EF00A6328E9C530000AC74A /* CRITBACK.PCX */; };
+		3EF00A6C28E9C67B000AC74A /* JUMPBAK.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EF00A6A28E9C66F000AC74A /* JUMPBAK.PCX */; };
+		3EF00A6D28E9C67F000AC74A /* JUMPSPD.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EF00A6B28E9C675000AC74A /* JUMPSPD.PCX */; };
+		3EF00A7128E9C7C0000AC74A /* FLOATSPD.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EF00A7028E9C7BC000AC74A /* FLOATSPD.PCX */; };
+		3EF00A7328E9C7D5000AC74A /* FLOATER.C in Sources */ = {isa = PBXBuildFile; fileRef = 3EF00A7228E9C7D5000AC74A /* FLOATER.C */; };
+/* End PBXBuildFile section */
+
+/* Begin PBXCopyFilesBuildPhase section */
+		2DA6C5AA258AA66B002B1931 /* CopyFiles */ = {
+			isa = PBXCopyFilesBuildPhase;
+			buildActionMask = 12;
+			dstPath = "";
+			dstSubfolderSpec = 16;
+			files = (
+				3EF00A7128E9C7C0000AC74A /* FLOATSPD.PCX in CopyFiles */,
+				3EF00A5628E9A021000AC74A /* LOCKALN.PCX in CopyFiles */,
+				3EF00A5728E9A023000AC74A /* LOCKBAK.PCX in CopyFiles */,
+				3EF00A5828E9A024000AC74A /* LOCKCRT.PCX in CopyFiles */,
+				3EF00A5F28E9C4B0000AC74A /* LOSTBACK.PCX in CopyFiles */,
+				3EF00A6028E9C4B3000AC74A /* LOSTSHIP.PCX in CopyFiles */,
+				3EF00A6428E9C538000AC74A /* CRITBACK.PCX in CopyFiles */,
+				3EF00A6C28E9C67B000AC74A /* JUMPBAK.PCX in CopyFiles */,
+				3EF00A6D28E9C67F000AC74A /* JUMPSPD.PCX in CopyFiles */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXCopyFilesBuildPhase section */
+
+/* Begin PBXFileReference section */
+		2D2793D725AD90B500DEC620 /* font.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = font.h; sourceTree = "<group>"; };
+		2D9EAF1F258E6A4300297C9C /* sdl.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = sdl.h; sourceTree = "<group>"; };
+		2D9EAF26258E750E00297C9C /* HostApp.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = HostApp.entitlements; sourceTree = "<group>"; };
+		2DA6C5AC258AA66B002B1931 /* CHAP7 */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = CHAP7; sourceTree = BUILT_PRODUCTS_DIR; };
+		2DA6C5AF258AA66B002B1931 /* main.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = main.cpp; sourceTree = "<group>"; };
+		2DB9F18C258EA679000A3299 /* ega.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = ega.h; sourceTree = "<group>"; };
+		3E3C579428E883D300637704 /* BLACK3.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK3.H; path = ../../../CHAP_3/BLACK3.H; sourceTree = "<group>"; };
+		3E3C579528E883D300637704 /* BLACK3.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK3.C; path = ../../../CHAP_3/BLACK3.C; sourceTree = "<group>"; };
+		3EF00A4E28E99F84000AC74A /* BLACK4.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK4.H; path = ../../../CHAP_4/BLACK4.H; sourceTree = "<group>"; };
+		3EF00A4F28E99F84000AC74A /* BLACK4.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK4.C; path = ../../../CHAP_4/BLACK4.C; sourceTree = "<group>"; };
+		3EF00A5028E99F9F000AC74A /* LOCKON.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = LOCKON.C; path = ../../LOCKON.C; sourceTree = "<group>"; };
+		3EF00A5228E99FA8000AC74A /* LOCKON.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = LOCKON.h; sourceTree = "<group>"; };
+		3EF00A5328E9A018000AC74A /* LOCKBAK.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = LOCKBAK.PCX; path = ../../LOCKBAK.PCX; sourceTree = "<group>"; };
+		3EF00A5428E9A018000AC74A /* LOCKCRT.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = LOCKCRT.PCX; path = ../../LOCKCRT.PCX; sourceTree = "<group>"; };
+		3EF00A5528E9A018000AC74A /* LOCKALN.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = LOCKALN.PCX; path = ../../LOCKALN.PCX; sourceTree = "<group>"; };
+		3EF00A5A28E9C3A6000AC74A /* LOSTNSPC.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = LOSTNSPC.C; path = ../../LOSTNSPC.C; sourceTree = "<group>"; };
+		3EF00A5C28E9C45B000AC74A /* LOSTNSPC.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = LOSTNSPC.h; sourceTree = "<group>"; };
+		3EF00A5D28E9C4A7000AC74A /* LOSTSHIP.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = LOSTSHIP.PCX; path = ../../LOSTSHIP.PCX; sourceTree = "<group>"; };
+		3EF00A5E28E9C4A7000AC74A /* LOSTBACK.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = LOSTBACK.PCX; path = ../../LOSTBACK.PCX; sourceTree = "<group>"; };
+		3EF00A6128E9C526000AC74A /* CRITTERS.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = CRITTERS.C; path = ../../CRITTERS.C; sourceTree = "<group>"; };
+		3EF00A6328E9C530000AC74A /* CRITBACK.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = CRITBACK.PCX; path = ../../CRITBACK.PCX; sourceTree = "<group>"; };
+		3EF00A6628E9C5AC000AC74A /* CRITTERS.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = CRITTERS.h; sourceTree = "<group>"; };
+		3EF00A6728E9C64C000AC74A /* JUMPER.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = JUMPER.C; path = ../../JUMPER.C; sourceTree = "<group>"; };
+		3EF00A6928E9C655000AC74A /* JUMPER.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = JUMPER.h; sourceTree = "<group>"; };
+		3EF00A6A28E9C66F000AC74A /* JUMPBAK.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = JUMPBAK.PCX; path = ../../JUMPBAK.PCX; sourceTree = "<group>"; };
+		3EF00A6B28E9C675000AC74A /* JUMPSPD.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = JUMPSPD.PCX; path = ../../JUMPSPD.PCX; sourceTree = "<group>"; };
+		3EF00A6F28E9C7B5000AC74A /* FLOATER.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = FLOATER.h; sourceTree = "<group>"; };
+		3EF00A7028E9C7BC000AC74A /* FLOATSPD.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = FLOATSPD.PCX; path = ../../FLOATSPD.PCX; sourceTree = "<group>"; };
+		3EF00A7228E9C7D5000AC74A /* FLOATER.C */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = FLOATER.C; path = ../../FLOATER.C; sourceTree = "<group>"; };
+/* End PBXFileReference section */
+
+/* Begin PBXFrameworksBuildPhase section */
+		2DA6C5A9258AA66B002B1931 /* Frameworks */ = {
+			isa = PBXFrameworksBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXFrameworksBuildPhase section */
+
+/* Begin PBXGroup section */
+		2DA6C5A3258AA66B002B1931 = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AE258AA66B002B1931 /* HostApp */,
+				2DA6C5AD258AA66B002B1931 /* Products */,
+			);
+			sourceTree = "<group>";
+		};
+		2DA6C5AD258AA66B002B1931 /* Products */ = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AC258AA66B002B1931 /* CHAP7 */,
+			);
+			name = Products;
+			sourceTree = "<group>";
+		};
+		2DA6C5AE258AA66B002B1931 /* HostApp */ = {
+			isa = PBXGroup;
+			children = (
+				2D9EAF26258E750E00297C9C /* HostApp.entitlements */,
+				2DA6C5AF258AA66B002B1931 /* main.cpp */,
+				2D9EAF1F258E6A4300297C9C /* sdl.h */,
+				2DB9F18C258EA679000A3299 /* ega.h */,
+				2D2793D725AD90B500DEC620 /* font.h */,
+				3E3C579528E883D300637704 /* BLACK3.C */,
+				3E3C579428E883D300637704 /* BLACK3.H */,
+				3EF00A4F28E99F84000AC74A /* BLACK4.C */,
+				3EF00A4E28E99F84000AC74A /* BLACK4.H */,
+				3EF00A5028E99F9F000AC74A /* LOCKON.C */,
+				3EF00A5228E99FA8000AC74A /* LOCKON.h */,
+				3EF00A5528E9A018000AC74A /* LOCKALN.PCX */,
+				3EF00A5328E9A018000AC74A /* LOCKBAK.PCX */,
+				3EF00A5428E9A018000AC74A /* LOCKCRT.PCX */,
+				3EF00A5A28E9C3A6000AC74A /* LOSTNSPC.C */,
+				3EF00A5C28E9C45B000AC74A /* LOSTNSPC.h */,
+				3EF00A5E28E9C4A7000AC74A /* LOSTBACK.PCX */,
+				3EF00A5D28E9C4A7000AC74A /* LOSTSHIP.PCX */,
+				3EF00A6128E9C526000AC74A /* CRITTERS.C */,
+				3EF00A6628E9C5AC000AC74A /* CRITTERS.h */,
+				3EF00A6328E9C530000AC74A /* CRITBACK.PCX */,
+				3EF00A6728E9C64C000AC74A /* JUMPER.C */,
+				3EF00A6928E9C655000AC74A /* JUMPER.h */,
+				3EF00A6A28E9C66F000AC74A /* JUMPBAK.PCX */,
+				3EF00A6B28E9C675000AC74A /* JUMPSPD.PCX */,
+				3EF00A7228E9C7D5000AC74A /* FLOATER.C */,
+				3EF00A6F28E9C7B5000AC74A /* FLOATER.h */,
+				3EF00A7028E9C7BC000AC74A /* FLOATSPD.PCX */,
+			);
+			path = HostApp;
+			sourceTree = "<group>";
+		};
+/* End PBXGroup section */
+
+/* Begin PBXNativeTarget section */
+		2DA6C5AB258AA66B002B1931 /* CHAP7 */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = 2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP7" */;
+			buildPhases = (
+				2DA6C5A8258AA66B002B1931 /* Sources */,
+				2DA6C5A9258AA66B002B1931 /* Frameworks */,
+				2DA6C5AA258AA66B002B1931 /* CopyFiles */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+			);
+			name = CHAP7;
+			productName = CicParserSim;
+			productReference = 2DA6C5AC258AA66B002B1931 /* CHAP7 */;
+			productType = "com.apple.product-type.tool";
+		};
+/* End PBXNativeTarget section */
+
+/* Begin PBXProject section */
+		2DA6C5A4258AA66B002B1931 /* Project object */ = {
+			isa = PBXProject;
+			attributes = {
+				LastUpgradeCheck = 1240;
+				TargetAttributes = {
+					2DA6C5AB258AA66B002B1931 = {
+						CreatedOnToolsVersion = 12.2;
+					};
+				};
+			};
+			buildConfigurationList = 2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP7" */;
+			compatibilityVersion = "Xcode 9.3";
+			developmentRegion = en;
+			hasScannedForEncodings = 0;
+			knownRegions = (
+				en,
+				Base,
+			);
+			mainGroup = 2DA6C5A3258AA66B002B1931;
+			productRefGroup = 2DA6C5AD258AA66B002B1931 /* Products */;
+			projectDirPath = "";
+			projectRoot = "";
+			targets = (
+				2DA6C5AB258AA66B002B1931 /* CHAP7 */,
+			);
+		};
+/* End PBXProject section */
+
+/* Begin PBXSourcesBuildPhase section */
+		2DA6C5A8258AA66B002B1931 /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */,
+				3EF00A7328E9C7D5000AC74A /* FLOATER.C in Sources */,
+				3EF00A5928E9A177000AC74A /* BLACK4.C in Sources */,
+				3E3C579628E883D700637704 /* BLACK3.C in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXSourcesBuildPhase section */
+
+/* Begin XCBuildConfiguration section */
+		2DA6C5B1258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = dwarf;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				ENABLE_TESTABILITY = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_OPTIMIZATION_LEVEL = 0;
+				GCC_PREPROCESSOR_DEFINITIONS = (
+					"DEBUG=1",
+					"$(inherited)",
+				);
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Debug;
+		};
+		2DA6C5B2258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				ENABLE_NS_ASSERTIONS = NO;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = NO;
+				MTL_FAST_MATH = YES;
+				SDKROOT = macosx;
+			};
+			name = Release;
+		};
+		2DA6C5B4258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = /opt/homebrew/Cellar/sdl2/2.24.0/include/SDL2;
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/Cellar/sdl2/2.24.0/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Debug;
+		};
+		2DA6C5B5258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = /opt/homebrew/Cellar/sdl2/2.24.0/include/SDL2;
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/Cellar/sdl2/2.24.0/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Release;
+		};
+/* End XCBuildConfiguration section */
+
+/* Begin XCConfigurationList section */
+		2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP7" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B1258AA66B002B1931 /* Debug */,
+				2DA6C5B2258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP7" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B4258AA66B002B1931 /* Debug */,
+				2DA6C5B5258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+/* End XCConfigurationList section */
+	};
+	rootObject = 2DA6C5A4258AA66B002B1931 /* Project object */;
+}
diff --git a/CHAP_7/HostApp/CHAP7.xcodeproj/project.xcworkspace/contents.xcworkspacedata b/CHAP_7/HostApp/CHAP7.xcodeproj/project.xcworkspace/contents.xcworkspacedata
new file mode 100644
index 0000000..948dd4f
--- /dev/null
+++ b/CHAP_7/HostApp/CHAP7.xcodeproj/project.xcworkspace/contents.xcworkspacedata
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "self:/Users/ac27/Dev/black_art/black_art_3d_revival/CHAP_7/HostApp/CHAP7.xcodeproj">
+   </FileRef>
+</Workspace>
diff --git a/CHAP_7/HostApp/CHAP7.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist b/CHAP_7/HostApp/CHAP7.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
new file mode 100644
index 0000000..18d9810
--- /dev/null
+++ b/CHAP_7/HostApp/CHAP7.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IDEDidComputeMac32BitWarning</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_7/HostApp/HostApp/CRITTERS.h b/CHAP_7/HostApp/HostApp/CRITTERS.h
new file mode 100644
index 0000000..b7e3903
--- /dev/null
+++ b/CHAP_7/HostApp/HostApp/CRITTERS.h
@@ -0,0 +1,13 @@
+//
+//  CRITTERS.h
+//  CHAP7
+//
+//  Created by Tosha on 02/10/2022.
+//
+
+#ifndef CRITTERS_h
+#define CRITTERS_h
+
+void start_critters(CEga *ega);
+
+#endif /* CRITTERS_h */
diff --git a/CHAP_7/HostApp/HostApp/FLOATER.h b/CHAP_7/HostApp/HostApp/FLOATER.h
new file mode 100644
index 0000000..4174407
--- /dev/null
+++ b/CHAP_7/HostApp/HostApp/FLOATER.h
@@ -0,0 +1,13 @@
+//
+//  FLOATER.h
+//  CHAP7
+//
+//  Created by Tosha on 02/10/2022.
+//
+
+#ifndef FLOATER_h
+#define FLOATER_h
+
+void start_floater(CEga* ega);
+
+#endif /* FLOATER_h */
diff --git a/CHAP_7/HostApp/HostApp/HostApp.entitlements b/CHAP_7/HostApp/HostApp/HostApp.entitlements
new file mode 100644
index 0000000..8cc185a
--- /dev/null
+++ b/CHAP_7/HostApp/HostApp/HostApp.entitlements
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>com.apple.security.cs.disable-library-validation</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_7/HostApp/HostApp/JUMPER.h b/CHAP_7/HostApp/HostApp/JUMPER.h
new file mode 100644
index 0000000..23f668e
--- /dev/null
+++ b/CHAP_7/HostApp/HostApp/JUMPER.h
@@ -0,0 +1,13 @@
+//
+//  JUMPER.h
+//  CHAP7
+//
+//  Created by Tosha on 02/10/2022.
+//
+
+#ifndef JUMPER_h
+#define JUMPER_h
+
+void start_jumper(CEga *ega);
+
+#endif /* JUMPER_h */
diff --git a/CHAP_7/HostApp/HostApp/LOCKON.h b/CHAP_7/HostApp/HostApp/LOCKON.h
new file mode 100644
index 0000000..e4ec35d
--- /dev/null
+++ b/CHAP_7/HostApp/HostApp/LOCKON.h
@@ -0,0 +1,13 @@
+//
+//  LOCKON.h
+//  CHAP7
+//
+//  Created by Tosha on 02/10/2022.
+//
+
+#ifndef LOCKON_h
+#define LOCKON_h
+
+void start_lockon(CEga *ega);
+
+#endif /* LOCKON_h */
diff --git a/CHAP_7/HostApp/HostApp/LOSTNSPC.h b/CHAP_7/HostApp/HostApp/LOSTNSPC.h
new file mode 100644
index 0000000..b540d73
--- /dev/null
+++ b/CHAP_7/HostApp/HostApp/LOSTNSPC.h
@@ -0,0 +1,13 @@
+//
+//  LOSTNSPC.h
+//  CHAP7
+//
+//  Created by Tosha on 02/10/2022.
+//
+
+#ifndef LOSTNSPC_h
+#define LOSTNSPC_h
+
+void start_lostnspc(CEga *ega);
+
+#endif /* LOSTNSPC_h */
diff --git a/CHAP_7/HostApp/HostApp/ega.h b/CHAP_7/HostApp/HostApp/ega.h
new file mode 100644
index 0000000..72f315a
--- /dev/null
+++ b/CHAP_7/HostApp/HostApp/ega.h
@@ -0,0 +1,62 @@
+#ifndef EGA_h
+#define EGA_h
+
+#include "font.h"
+
+typedef uint16_t WORD;
+typedef uint8_t BYTE;
+typedef uint8_t FLAG;
+typedef uint16_t WORD;
+
+typedef uint32_t DWORD;
+
+class CVideoAdapter
+{
+public:
+	virtual DWORD GetPixel(int x, int y, int p) = 0;
+};
+
+class CEga : public CVideoAdapter
+{
+	enum {
+		MemSize = 0x10000*2
+	};
+
+public:
+	DWORD memory[MemSize];
+
+    // https://www.ditig.com/256-colors-cheat-sheet
+    // Note: this is not really an VGA default palette, but Xterm one
+    DWORD palette[256] = {
+        0x000000, 0x800000, 0x008000, 0x808000, 0x000080, 0x800080, 0x008080, 0xc0c0c0, 0x808080, 0xff0000, 0x00ff00, 0xffff00, 0x0000ff, 0xff00ff, 0x00ffff, 0xffffff, 0x000000, 0x00005f, 0x000087, 0x0000af, 0x0000d7, 0x0000ff, 0x005f00, 0x005f5f, 0x005f87, 0x005faf, 0x005fd7, 0x005fff, 0x008700, 0x00875f, 0x008787, 0x0087af, 0x0087d7, 0x0087ff, 0x00af00, 0x00af5f, 0x00af87, 0x00afaf, 0x00afd7, 0x00afff, 0x00d700, 0x00d75f, 0x00d787, 0x00d7af, 0x00d7d7, 0x00d7ff, 0x00ff00, 0x00ff5f, 0x00ff87, 0x00ffaf, 0x00ffd7, 0x00ffff, 0x5f0000, 0x5f005f, 0x5f0087, 0x5f00af, 0x5f00d7, 0x5f00ff, 0x5f5f00, 0x5f5f5f, 0x5f5f87, 0x5f5faf, 0x5f5fd7, 0x5f5fff, 0x5f8700, 0x5f875f, 0x5f8787, 0x5f87af, 0x5f87d7, 0x5f87ff, 0x5faf00, 0x5faf5f, 0x5faf87, 0x5fafaf, 0x5fafd7, 0x5fafff, 0x5fd700, 0x5fd75f, 0x5fd787, 0x5fd7af, 0x5fd7d7, 0x5fd7ff, 0x5fff00, 0x5fff5f, 0x5fff87, 0x5fffaf, 0x5fffd7, 0x5fffff, 0x870000, 0x87005f, 0x870087, 0x8700af, 0x8700d7, 0x8700ff, 0x875f00, 0x875f5f, 0x875f87, 0x875faf, 0x875fd7, 0x875fff, 0x878700, 0x87875f, 0x878787, 0x8787af, 0x8787d7, 0x8787ff, 0x87af00, 0x87af5f, 0x87af87, 0x87afaf, 0x87afd7, 0x87afff, 0x87d700, 0x87d75f, 0x87d787, 0x87d7af, 0x87d7d7, 0x87d7ff, 0x87ff00, 0x87ff5f, 0x87ff87, 0x87ffaf, 0x87ffd7, 0x87ffff, 0xaf0000, 0xaf005f, 0xaf0087, 0xaf00af, 0xaf00d7, 0xaf00ff, 0xaf5f00, 0xaf5f5f, 0xaf5f87, 0xaf5faf, 0xaf5fd7, 0xaf5fff, 0xaf8700, 0xaf875f, 0xaf8787, 0xaf87af, 0xaf87d7, 0xaf87ff, 0xafaf00, 0xafaf5f, 0xafaf87, 0xafafaf, 0xafafd7, 0xafafff, 0xafd700, 0xafd75f, 0xafd787, 0xafd7af, 0xafd7d7, 0xafd7ff, 0xafff00, 0xafff5f, 0xafff87, 0xafffaf, 0xafffd7, 0xafffff, 0xd70000, 0xd7005f, 0xd70087, 0xd700af, 0xd700d7, 0xd700ff, 0xd75f00, 0xd75f5f, 0xd75f87, 0xd75faf, 0xd75fd7, 0xd75fff, 0xd78700, 0xd7875f, 0xd78787, 0xd787af, 0xd787d7, 0xd787ff, 0xd7af00, 0xd7af5f, 0xd7af87, 0xd7afaf, 0xd7afd7, 0xd7afff, 0xd7d700, 0xd7d75f, 0xd7d787, 0xd7d7af, 0xd7d7d7, 0xd7d7ff, 0xd7ff00, 0xd7ff5f, 0xd7ff87, 0xd7ffaf, 0xd7ffd7, 0xd7ffff, 0xff0000, 0xff005f, 0xff0087, 0xff00af, 0xff00d7, 0xff00ff, 0xff5f00, 0xff5f5f, 0xff5f87, 0xff5faf, 0xff5fd7, 0xff5fff, 0xff8700, 0xff875f, 0xff8787, 0xff87af, 0xff87d7, 0xff87ff, 0xffaf00, 0xffaf5f, 0xffaf87, 0xffafaf, 0xffafd7, 0xffafff, 0xffd700, 0xffd75f, 0xffd787, 0xffd7af, 0xffd7d7, 0xffd7ff, 0xffff00, 0xffff5f, 0xffff87, 0xffffaf, 0xffffd7, 0xffffff, 0x080808, 0x121212, 0x1c1c1c, 0x262626, 0x303030, 0x3a3a3a, 0x444444, 0x4e4e4e, 0x585858, 0x626262, 0x6c6c6c, 0x767676, 0x808080, 0x8a8a8a, 0x949494, 0x9e9e9e, 0xa8a8a8, 0xb2b2b2, 0xbcbcbc, 0xc6c6c6, 0xd0d0d0, 0xdadada, 0xe4e4e4, 0xeeeeee
+    };
+
+public:
+	CEga()
+	{
+        memset(memory, 0, sizeof(memory));
+	}
+	
+    void SetPaletteIndex(int index, int rgb)
+    {
+        int r = ((rgb & 4) ? 2 : 0) + ((rgb & 32) ? 1 : 0);
+        int g = ((rgb & 2) ? 2 : 0) + ((rgb & 16) ? 1 : 0);
+        int b = ((rgb & 1) ? 2 : 0) + ((rgb & 8) ? 1 : 0);
+        r = r * 255 / 3;
+        g = g * 255 / 3;
+        b = b * 255 / 3;
+        palette[index] = b | (g << 8) | (r << 16);
+
+    }
+    
+	virtual DWORD GetPixel(int x, int y, int page = -1) override
+	{
+        BYTE* _video = (BYTE*)memory;
+        int idx = (int)_video[((y<<8) + (y<<6)) + x];
+        return palette[idx];
+	}
+};
+
+void _sync();
+
+#endif
diff --git a/CHAP_7/HostApp/HostApp/font.h b/CHAP_7/HostApp/HostApp/font.h
new file mode 100644
index 0000000..8be86b2
--- /dev/null
+++ b/CHAP_7/HostApp/HostApp/font.h
@@ -0,0 +1,313 @@
+#ifndef FONT_h
+#define FONT_h
+
+#pragma once
+
+// http://www.hampa.ch/pce/download.html
+// genoa-ega-2.41.rom
+// dd if=genoa-ega-2.41.rom of=font bs=1 skip=8224 count=3584
+// xxd -i font > font.h
+
+static const uint8_t font[] = {
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81,
+  0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xff,
+  0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
+  0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
+  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff,
+  0xff, 0xff, 0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc,
+  0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30,
+  0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x63,
+  0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06,
+  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66,
+  0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xdb,
+  0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c,
+  0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c,
+  0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c,
+  0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06,
+  0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6,
+  0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c,
+  0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x30,
+  0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c,
+  0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38, 0x78, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c,
+  0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66,
+  0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0,
+  0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x6c,
+  0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66,
+  0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x0c,
+  0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66,
+  0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
+  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60,
+  0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x30, 0x30, 0x30,
+  0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0,
+  0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
+  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xff, 0x00, 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76,
+  0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66,
+  0x3c, 0x00, 0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66,
+  0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec,
+  0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60,
+  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c,
+  0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30,
+  0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38,
+  0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38,
+  0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66,
+  0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00, 0x00,
+  0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc,
+  0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x38,
+  0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
+  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe,
+  0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x38,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x66,
+  0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x60,
+  0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c,
+  0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x76,
+  0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x6c,
+  0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00, 0x10,
+  0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00, 0x00, 0xc6,
+  0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60,
+  0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xcc, 0xcc,
+  0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x0e,
+  0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
+  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
+  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
+  0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
+  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06,
+  0x06, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c,
+  0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c,
+  0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x44, 0x11, 0x44,
+  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x55, 0xaa,
+  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
+  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
+  0xdd, 0x77, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
+  0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff,
+  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
+  0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
+  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
+  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30,
+  0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c,
+  0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c,
+  0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00,
+  0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e,
+  0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18,
+  0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00,
+  0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c,
+  0x1c, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8,
+  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+};
+
+#endif
diff --git a/CHAP_7/HostApp/HostApp/main.cpp b/CHAP_7/HostApp/HostApp/main.cpp
new file mode 100644
index 0000000..e3e4858
--- /dev/null
+++ b/CHAP_7/HostApp/HostApp/main.cpp
@@ -0,0 +1,62 @@
+//
+//  main.cpp
+//  HostApp
+//
+//
+
+#include <iostream>
+#include <vector>
+#include <sstream>
+#include <iomanip>
+#include <list>
+
+#include "sdl.h"
+#include "ega.h"
+
+//#include "LOCKON.h"
+//#include "LOSTNSPC.h"
+//#include "CRITTERS.h"
+//#include "JUMPER.h"
+#include "FLOATER.h"
+
+CEga mVideo;
+CSdl mSdl;
+std::list<int> keyboardBuffer;
+
+void onKey(int k, int p)
+{
+    if (!p)
+        return;
+
+    int key = 0;
+    switch (k)
+    {
+        case SDL_SCANCODE_UP: key = 0x4800; break;
+        case SDL_SCANCODE_DOWN: key = 0x5000; break;
+        case SDL_SCANCODE_LEFT: key = 0x4b00; break;
+        case SDL_SCANCODE_RIGHT: key = 0x4d00; break;
+        case SDL_SCANCODE_SPACE: key = 0x3920; break;
+        case SDL_SCANCODE_RETURN: key = 0x1c0d; break;
+    }
+
+    if (key)
+    {
+        keyboardBuffer.push_back(key);
+    }
+}
+
+void _sync()
+{
+    for (int y=0; y<mSdl.Height; y++)
+      for (int x=0; x<mSdl.Width; x++)
+        mSdl.SetPixel(x, y, mVideo.GetPixel(x, y));
+    
+    mSdl.Loop();
+}
+
+int main(int argc, const char * argv[]) {
+    mSdl.Init();
+    start_floater(&mVideo);
+    mSdl.Deinit();
+    return 0;
+}
diff --git a/CHAP_7/HostApp/HostApp/sdl.h b/CHAP_7/HostApp/HostApp/sdl.h
new file mode 100644
index 0000000..e733a4a
--- /dev/null
+++ b/CHAP_7/HostApp/HostApp/sdl.h
@@ -0,0 +1,144 @@
+#ifndef SDL_h
+#define SDL_h
+
+typedef uint32_t Uint32;
+#include <SDL.h>
+#include <SDL_render.h>
+
+void onKey(int k, int p);
+
+class CSdl
+{
+    
+    std::vector< unsigned char > pixels;
+    const int pixelSize = 2;
+
+    SDL_Renderer* renderer{nullptr};
+    SDL_Texture* texture{nullptr};
+    SDL_Window* window{nullptr};
+    bool running{true};
+    int lastKey{0};
+
+public:
+    enum {
+        Width = 320,//640,
+        Height = 200//350
+    };
+
+    void Init()
+    {
+        pixels.resize(Width*Height*4);
+        SDL_Init( SDL_INIT_EVERYTHING );
+        atexit( SDL_Quit );
+        
+        window = SDL_CreateWindow
+        (
+         "BlackArt simulator",
+         SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
+         Width*pixelSize, Height*pixelSize,
+         SDL_WINDOW_SHOWN
+         );
+        
+        renderer = SDL_CreateRenderer
+        (
+         window,
+         -1,
+         SDL_RENDERER_ACCELERATED
+         );
+
+        texture = SDL_CreateTexture
+        (
+         renderer,
+         SDL_PIXELFORMAT_ARGB8888,
+         SDL_TEXTUREACCESS_STREAMING,
+         Width, Height
+         );
+    }
+    
+    void Blit()
+    {
+        SDL_SetRenderDrawColor( renderer, 0, 0, 0, SDL_ALPHA_OPAQUE );
+        SDL_RenderClear( renderer );
+        
+        SDL_UpdateTexture
+        (
+         texture,
+         NULL,
+         &pixels[0],
+         Width * 4
+         );
+        
+        SDL_RenderCopy( renderer, texture, NULL, NULL );
+        SDL_RenderPresent( renderer );
+    }
+    
+    void Loop()
+    {
+//        SDL_Event event;
+//
+//        while( SDL_PollEvent( &event ) )
+//        {
+//            if (SDL_KEYDOWN == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 1);
+//            }
+//
+//            if (SDL_KEYUP == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 0);
+//            }
+//
+//            if( ( SDL_QUIT == event.type ) ||
+//               ( SDL_KEYDOWN == event.type && SDL_SCANCODE_ESCAPE == event.key.keysym.scancode ) )
+//            {
+//                running = false;
+//                break;
+//            }
+//        }
+        
+        Blit();
+        
+        //const Uint64 end = SDL_GetPerformanceCounter();
+        //const static Uint64 freq = SDL_GetPerformanceFrequency();
+        //const double seconds = ( end - start ) / static_cast< double >( freq );
+        //std::cout << "Frame time: " << seconds * 1000.0 << "ms" << std::endl;
+//        if (running)
+//            SDL_Delay(20);
+    }
+    
+    void Deinit()
+    {
+        SDL_DestroyRenderer( renderer );
+        SDL_DestroyWindow( window );
+        SDL_Quit();
+    }
+    
+    void SetPixel(int x, int y, uint32_t c)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        pixels[ offset + 0 ] = (uint8_t)c;
+        pixels[ offset + 1 ] = (uint8_t)(c >> 8);
+        pixels[ offset + 2 ] = (uint8_t)(c >> 16);
+        pixels[ offset + 3 ] = SDL_ALPHA_OPAQUE;
+    }
+
+    uint32_t GetPixel(int x, int y)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        int b = pixels[ offset + 0 ];
+        int g = pixels[ offset + 1 ];
+        int r = pixels[ offset + 2 ];
+        return r | (g << 8) | (b << 16);
+    }
+
+};
+
+#endif
diff --git a/CHAP_7/JUMPER.C b/CHAP_7/JUMPER.C
index 7bdfdfd..3c1c457 100755
--- a/CHAP_7/JUMPER.C
+++ b/CHAP_7/JUMPER.C
@@ -3,15 +3,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 
@@ -43,7 +40,7 @@ char *patterns[NUM_PATTERNS] = {
 
 // M A I N //////////////////////////////////////////////////////////////////
 
-void main(int argc, char **argv)
+void start_jumper(CEga* ega)
 {
 
 int index;         // loop variable
@@ -52,7 +49,7 @@ char buffer[64];   // used to print strings
 
 // set the graphics mode to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // create the double buffer
 
@@ -98,9 +95,18 @@ Sprite_Under_Clip((sprite_ptr)&spider,double_buffer);
 Print_String_DB(80,2,9,"Hit any key to exit",1);
 
 // main event loop, process until keyboard hit
-
-while(!kbhit())
+bool done = false;
+while(!done)
      {
+         
+     SDL_Event event;
+     while( SDL_PollEvent( &event ) )
+     {
+         if (SDL_KEYDOWN == event.type) {
+             done = true;
+             break;
+         }
+     }
 
      // do animation cycle, erase, move draw...
 
@@ -209,7 +215,7 @@ while(!kbhit())
      sprintf(buffer,"Pattern #%d, data=%c",spider.state,
                                 patterns[spider.state][spider.counter_1]);
 
-     Print_String_DB(88,190,15,buffer,0);
+     Print_String_DB(88,SCREEN_HEIGHT-ROM_CHAR_HEIGHT-2,15,buffer,0);
 
      // ready to draw spider, but first scan background under it
 
@@ -223,7 +229,8 @@ while(!kbhit())
 
      // lock onto 18 frames per second max
 
-     Time_Delay(1);
+     _sync();
+     Time_Delay(CLOCKS_PER_SEC/18);
 
      } // end while
 
@@ -236,8 +243,6 @@ Screen_Transition(SCREEN_DARKNESS);
 Sprite_Delete((sprite_ptr)&spider);
 Delete_Double_Buffer();
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 } // end main
-
-
\ No newline at end of file
diff --git a/CHAP_7/LOCKON.C b/CHAP_7/LOCKON.C
index d17fafc..9c2ed64 100755
--- a/CHAP_7/LOCKON.C
+++ b/CHAP_7/LOCKON.C
@@ -3,21 +3,18 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 
 #include "black3.h"
 #include "black4.h"
-#include "black5.h"
+//#include "black5.h"
 
 // D E F I N E S /////////////////////////////////////////////////////////////
 
@@ -49,7 +46,7 @@ sprite alien, creature; // the players alien and the creature
 
 // M A I N //////////////////////////////////////////////////////////////////
 
-void main(int argc, char **argv)
+void start_lockon(CEga *ega)
 {
 
 int index,    // loop variable
@@ -60,7 +57,7 @@ char buffer[64]; // used to print srtrings
 
 // set the graphics mode to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // create the double buffer
 
@@ -125,7 +122,7 @@ Sprite_Under_Clip((sprite_ptr)&creature,double_buffer);
 
 // install new keyboard driver
 
-Keyboard_Install_Driver();
+//Keyboard_Install_Driver();
 
 // put up exit instructions
 
@@ -133,238 +130,261 @@ Print_String_DB(96,2,9,"Press Q to exit",0);
 
 // main event loop, process until keyboard hit
 
-while(!done)
-     {
-
-     // do animation cycle, erase, move draw...
-
-     // erase all objects by replacing what was under them
-
-     Sprite_Erase_Clip((sprite_ptr)&alien,double_buffer);
-     Sprite_Erase_Clip((sprite_ptr)&creature,double_buffer);
-
-     // move player
-
-     // test for right motion
-
-     if (keyboard_state[MAKE_RIGHT])
-        {
+while(!done) {
+    
+    // do animation cycle, erase, move draw...
+    
+    // erase all objects by replacing what was under them
+    
+    Sprite_Erase_Clip((sprite_ptr)&alien,double_buffer);
+    Sprite_Erase_Clip((sprite_ptr)&creature,double_buffer);
+    
+    SDL_Scancode lastKey = SDL_SCANCODE_UNKNOWN;
+    SDL_Event event;
+    while( SDL_PollEvent( &event ) )
+    {
+        if (SDL_KEYDOWN == event.type) {
+            switch (event.key.keysym.scancode) {
+                case SDL_SCANCODE_RIGHT:
+                case SDL_SCANCODE_LEFT:
+                case SDL_SCANCODE_UP:
+                case SDL_SCANCODE_DOWN:
+                case SDL_SCANCODE_SPACE:
+                case SDL_SCANCODE_Q:
+                    lastKey = event.key.keysym.scancode;
+                    break;
+                    
+                default:
+                    break;
+            }
+        }
+    }
+    
+    // move player
+    
+    // test for right motion
+    
+    if (SDL_SCANCODE_RIGHT == lastKey)
+    {
         // move alien
-
+        
         if ((alien.x+=2)>320)
             alien.x=-8;
-
+        
         // first test if alien was already moving right
-
+        
         if (alien.state==ALIEN_RIGHT)
-           {
-           // animate and test for end of sequence
-
-           if (++alien.curr_frame==ALIEN_END_RIGHT)
-              alien.curr_frame = ALIEN_START_RIGHT;
-           }
-        else
-           {
-           // set state and current frame to right
-
-           alien.state      = ALIEN_RIGHT;
-           alien.curr_frame = ALIEN_START_RIGHT;
-
-           } // end else
-
-        } // end if right
-
-     // test for left motion
-     else
-     if (keyboard_state[MAKE_LEFT])
         {
-        // move alien
-
-        if ((alien.x-=2)<-8)
-             alien.x=320;
-
-        // first test if alien was already moving left
-
-        if (alien.state==ALIEN_LEFT)
-           {
-           // animate and test for end of sequence
-
-           if (++alien.curr_frame==ALIEN_END_LEFT)
-              alien.curr_frame = ALIEN_START_LEFT;
-           }
+            // animate and test for end of sequence
+            
+            if (++alien.curr_frame==ALIEN_END_RIGHT)
+                alien.curr_frame = ALIEN_START_RIGHT;
+        }
         else
-           {
-           // set state and current frame to right
-
-           alien.state      = ALIEN_LEFT;
-           alien.curr_frame = ALIEN_START_LEFT;
-
-           } // end else
-
-        } // end if left
-
-     // test for upward motion
-     else
-     if (keyboard_state[MAKE_UP])
         {
-        // move alien
-
-        if ((alien.y-=2) < -12)
-           alien.y=200;
-
-        // first test if alien was already moving up
-
-        if (alien.state==ALIEN_UP)
-           {
-           // animate and test for end of sequence
-
-           if (++alien.curr_frame==ALIEN_END_UP)
-              alien.curr_frame = ALIEN_START_UP;
-           }
-        else
-           {
-           // set state and current frame to right
-
-           alien.state      = ALIEN_UP;
-           alien.curr_frame = ALIEN_START_UP;
-
-           } // end else
-
-        } // end if up
-
-     // test for downward motion
-     else
-     if (keyboard_state[MAKE_DOWN])
+            // set state and current frame to right
+            
+            alien.state      = ALIEN_RIGHT;
+            alien.curr_frame = ALIEN_START_RIGHT;
+            
+        } // end else
+        
+    } // end if right
+    
+    // test for left motion
+    else
+        if (SDL_SCANCODE_LEFT == lastKey)
         {
-        // move alien
-
-        if ((alien.y+=2)>200)
-            alien.y=-12;
-
-        // first test if alien was already moving down
-
-        if (alien.state==ALIEN_DOWN)
-           {
-           // animate and test for end of sequence
-
-           if (++alien.curr_frame==ALIEN_END_DOWN)
-              alien.curr_frame = ALIEN_START_DOWN;
-
-           }
+            // move alien
+            
+            if ((alien.x-=2)<-8)
+                alien.x=320;
+            
+            // first test if alien was already moving left
+            
+            if (alien.state==ALIEN_LEFT)
+            {
+                // animate and test for end of sequence
+                
+                if (++alien.curr_frame==ALIEN_END_LEFT)
+                    alien.curr_frame = ALIEN_START_LEFT;
+            }
+            else
+            {
+                // set state and current frame to right
+                
+                alien.state      = ALIEN_LEFT;
+                alien.curr_frame = ALIEN_START_LEFT;
+                
+            } // end else
+            
+        } // end if left
+    
+    // test for upward motion
         else
-           {
-           // set state and current frame to right
-
-           alien.state      = ALIEN_DOWN;
-           alien.curr_frame = ALIEN_START_DOWN;
-
-           } // end else
-
-        } // end if down
-
-     // test for tracking toggle
-
-     if (keyboard_state[MAKE_SPACE])
-        {
+            if (SDL_SCANCODE_UP == lastKey)
+            {
+                // move alien
+                
+                if ((alien.y-=2) < -12)
+                    alien.y=200;
+                
+                // first test if alien was already moving up
+                
+                if (alien.state==ALIEN_UP)
+                {
+                    // animate and test for end of sequence
+                    
+                    if (++alien.curr_frame==ALIEN_END_UP)
+                        alien.curr_frame = ALIEN_START_UP;
+                }
+                else
+                {
+                    // set state and current frame to right
+                    
+                    alien.state      = ALIEN_UP;
+                    alien.curr_frame = ALIEN_START_UP;
+                    
+                } // end else
+                
+            } // end if up
+    
+    // test for downward motion
+            else
+                if (SDL_SCANCODE_DOWN == lastKey)
+                {
+                    // move alien
+                    
+                    if ((alien.y+=2)>200)
+                        alien.y=-12;
+                    
+                    // first test if alien was already moving down
+                    
+                    if (alien.state==ALIEN_DOWN)
+                    {
+                        // animate and test for end of sequence
+                        
+                        if (++alien.curr_frame==ALIEN_END_DOWN)
+                            alien.curr_frame = ALIEN_START_DOWN;
+                        
+                    }
+                    else
+                    {
+                        // set state and current frame to right
+                        
+                        alien.state      = ALIEN_DOWN;
+                        alien.curr_frame = ALIEN_START_DOWN;
+                        
+                    } // end else
+                    
+                } // end if down
+    
+    // test for tracking toggle
+    
+    if (SDL_SCANCODE_SPACE == lastKey)
+    {
         chase=-chase;
-        while(keyboard_state[MAKE_SPACE]);
-        }
-
-     // test for exit key
-
-     if (keyboard_state[MAKE_Q])
+        //while(keyboard_state[MAKE_SPACE]);
+    }
+    
+    // test for exit key
+    
+    if (SDL_SCANCODE_Q == lastKey)
         done=1;
-
-// BEGIN TRACKING LOGIC ///////////////////////////////////////////////////////
-
-     // move creature, test if creature is chasing or evading player
-
-     if (chase==1)
-        {
+    
+    //}
+    
+    // BEGIN TRACKING LOGIC ///////////////////////////////////////////////////////
+    
+    // move creature, test if creature is chasing or evading player
+    
+    if (chase==1)
+    {
         // track on x coordinate
-
+        
         if (alien.x > creature.x)
-           creature.x++;
+            creature.x++;
         else
-        if (alien.x < creature.x)
-           creature.x--;
-
+            if (alien.x < creature.x)
+                creature.x--;
+        
         // now track on y coordinate
-
+        
         if (alien.y > creature.y)
-           creature.y++;
+            creature.y++;
         else
-        if (alien.y < creature.y)
-           creature.y--;
-
-        } // end if chase
-     else
-        {
+            if (alien.y < creature.y)
+                creature.y--;
+        
+    } // end if chase
+    else
+    {
         // must be evading
-
+        
         // evade on x coordinate
-
+        
         if (alien.x < creature.x)
-           creature.x++;
+            creature.x++;
         else
-        if (alien.x > creature.x)
-           creature.x--;
-
+            if (alien.x > creature.x)
+                creature.x--;
+        
         // now evade on y coordinate
-
+        
         if (alien.y < creature.y)
-           creature.y++;
+            creature.y++;
         else
-        if (alien.y > creature.y)
-           creature.y--;
-
-        } // end else
-
-     // test of creature has moved off screen
-
-     if (creature.x>310)
+            if (alien.y > creature.y)
+                creature.y--;
+        
+    } // end else
+    
+    // test of creature has moved off screen
+    
+    if (creature.x>310)
         creature.x = 310;
-     else
-     if (creature.x<-14)
-        creature.x = -14;
-
-      if (creature.y>190)
-         creature.y = 190;
-      else
-      if (creature.y<-2)
-         creature.y = -2;
-
-// END TRACKING LOGIC /////////////////////////////////////////////////////////
-
-     // do animation for creature
-
-     if (++creature.curr_frame==4)
+    else
+        if (creature.x<-14)
+            creature.x = -14;
+    
+    if (creature.y>190)
+        creature.y = 190;
+    else
+        if (creature.y<-2)
+            creature.y = -2;
+    
+    // END TRACKING LOGIC /////////////////////////////////////////////////////////
+    
+    // do animation for creature
+    
+    if (++creature.curr_frame==4)
         creature.curr_frame=0;
-
-     // ready to draw objects, but first scan background under them
-
-     Sprite_Under_Clip((sprite_ptr)&alien,double_buffer);
-     Sprite_Under_Clip((sprite_ptr)&creature,double_buffer);
-
-     Sprite_Draw_Clip((sprite_ptr)&alien,double_buffer,1);
-     Sprite_Draw_Clip((sprite_ptr)&creature,double_buffer,1);
-
-     // display text message of current tracking mode
-
-     if (chase==1)
+    
+    // ready to draw objects, but first scan background under them
+    
+    Sprite_Under_Clip((sprite_ptr)&alien,double_buffer);
+    Sprite_Under_Clip((sprite_ptr)&creature,double_buffer);
+    
+    Sprite_Draw_Clip((sprite_ptr)&alien,double_buffer,1);
+    Sprite_Draw_Clip((sprite_ptr)&creature,double_buffer,1);
+    
+    // display text message of current tracking mode
+    
+    if (chase==1)
         sprintf(buffer,"Creature is Chasing!!!");
-     else
+    else
         sprintf(buffer,"Creature is Evading!!!");
-
-     Print_String_DB(64,190,12,buffer,0);
-
-     // display double buffer
-
-     Display_Double_Buffer(double_buffer,0);
-
-     // lock onto 18 frames per second max
-
-     Time_Delay(1);
+    
+    Print_String_DB(64,SCREEN_HEIGHT-ROM_CHAR_HEIGHT-2,12,buffer,0);
+    
+    // display double buffer
+    
+    Display_Double_Buffer(double_buffer,0);
+    
+    // lock onto 18 frames per second max
+    
+    _sync();
+    Time_Delay(CLOCKS_PER_SEC/18);
 
      } // end while
 
@@ -378,10 +398,8 @@ Sprite_Delete((sprite_ptr)&alien);
 Sprite_Delete((sprite_ptr)&creature);
 Delete_Double_Buffer();
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
-Keyboard_Remove_Driver();
+//Keyboard_Remove_Driver();
 
 } // end main
-
-
\ No newline at end of file
diff --git a/CHAP_7/LOSTNSPC.C b/CHAP_7/LOSTNSPC.C
index 4b631b0..610cdea 100755
--- a/CHAP_7/LOSTNSPC.C
+++ b/CHAP_7/LOSTNSPC.C
@@ -3,15 +3,12 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 
@@ -26,7 +23,7 @@ sprite ship;            // the alien ship
 
 // M A I N //////////////////////////////////////////////////////////////////
 
-void main(int argc, char **argv)
+void start_lostnspc(CEga *ega)
 {
 
 int index,         // loop variable
@@ -35,7 +32,7 @@ int index,         // loop variable
 
 // set the graphics mode to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // create the double buffer
 
@@ -83,9 +80,18 @@ Sprite_Under_Clip((sprite_ptr)&ship,double_buffer);
 Print_String_DB(80,2,9,"Hit any key to exit",1);
 
 // main event loop, process until keyboard hit
-
-while(!kbhit())
+bool done = false;
+while(!done)
      {
+         
+     SDL_Event event;
+     while( SDL_PollEvent( &event ) )
+     {
+         if (SDL_KEYDOWN == event.type) {
+             done = true;
+             break;
+         }
+     }
 
      // do animation cycle, erase, move draw...
 
@@ -161,7 +167,8 @@ while(!kbhit())
 
      // lock onto 18 frames per second max
 
-     Time_Delay(1);
+     _sync();
+     Time_Delay(CLOCKS_PER_SEC/18);
 
      } // end while
 
@@ -174,8 +181,6 @@ Screen_Transition(SCREEN_DARKNESS);
 Sprite_Delete((sprite_ptr)&ship);
 Delete_Double_Buffer();
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 } // end main
-
-
\ No newline at end of file
diff --git a/CHAP_8/BLACK8.C b/CHAP_8/BLACK8.C
index 6ee2c85..895ea43 100755
--- a/CHAP_8/BLACK8.C
+++ b/CHAP_8/BLACK8.C
@@ -3,17 +3,13 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
+#include <time.h>
 
 #include "black8.h"
 
@@ -28,10 +24,7 @@ long Timer_Query(void)
 {
 // this function is used to record the current time
 
-long far *clock = (long far *)0x0000046CL; // address of timer
-
-return(*clock);
-
+return clock();
 } // end Timer_Query
 
 //////////////////////////////////////////////////////////////////////////////
@@ -39,23 +32,21 @@ return(*clock);
 void Timer_Program(int timer,unsigned int rate)
 {
 
-// this function re-programs the internal timer
-
-// first program the timer to mode 2 - binary and data loading sequence of
-// low byte then high byte
-
-_outp(TIMER_CONTROL, TIMER_SET_BITS);
-
-// write least significant byte of the new rate to the counter register
-
-_outp(timer,LOW_BYTE(rate));
-
-// and now the the most significant byte
-
-_outp(timer,HI_BYTE(rate));
+//// this function re-programs the internal timer
+//
+//// first program the timer to mode 2 - binary and data loading sequence of
+//// low byte then high byte
+//
+//_outp(TIMER_CONTROL, TIMER_SET_BITS);
+//
+//// write least significant byte of the new rate to the counter register
+//
+//_outp(timer,LOW_BYTE(rate));
+//
+//// and now the the most significant byte
+//
+//_outp(timer,HI_BYTE(rate));
 
 } // end Timer_Program
 
 ///////////////////////////////////////////////////////////////////////////////
-
-
\ No newline at end of file
diff --git a/CHAP_8/BLACK8.H b/CHAP_8/BLACK8.H
index 020ef55..6a81c7b 100755
--- a/CHAP_8/BLACK8.H
+++ b/CHAP_8/BLACK8.H
@@ -46,5 +46,3 @@ extern long starting_time, // these are used to compute the length of some event
 long Timer_Query(void);
 
 void Timer_Program(int timer,unsigned int rate);
-
-
\ No newline at end of file
diff --git a/CHAP_8/HostApp/CHAP8.xcodeproj/project.pbxproj b/CHAP_8/HostApp/CHAP8.xcodeproj/project.pbxproj
new file mode 100644
index 0000000..7610892
--- /dev/null
+++ b/CHAP_8/HostApp/CHAP8.xcodeproj/project.pbxproj
@@ -0,0 +1,327 @@
+// !$*UTF8*$!
+{
+	archiveVersion = 1;
+	classes = {
+	};
+	objectVersion = 50;
+	objects = {
+
+/* Begin PBXBuildFile section */
+		2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 2DA6C5AF258AA66B002B1931 /* main.cpp */; };
+		3E3C579628E883D700637704 /* BLACK3.C in Sources */ = {isa = PBXBuildFile; fileRef = 3E3C579528E883D300637704 /* BLACK3.C */; };
+		3EF00A5928E9A177000AC74A /* BLACK4.C in Sources */ = {isa = PBXBuildFile; fileRef = 3EF00A4F28E99F84000AC74A /* BLACK4.C */; };
+		3EF00A7628E9FBAD000AC74A /* VOLCANO.C in Sources */ = {isa = PBXBuildFile; fileRef = 3EF00A7428E9FB9C000AC74A /* VOLCANO.C */; };
+		3EF00A7728E9FBCE000AC74A /* VOLCANO.PCX in CopyFiles */ = {isa = PBXBuildFile; fileRef = 3EF00A7528E9FBA0000AC74A /* VOLCANO.PCX */; };
+/* End PBXBuildFile section */
+
+/* Begin PBXCopyFilesBuildPhase section */
+		2DA6C5AA258AA66B002B1931 /* CopyFiles */ = {
+			isa = PBXCopyFilesBuildPhase;
+			buildActionMask = 12;
+			dstPath = "";
+			dstSubfolderSpec = 16;
+			files = (
+				3EF00A7728E9FBCE000AC74A /* VOLCANO.PCX in CopyFiles */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXCopyFilesBuildPhase section */
+
+/* Begin PBXFileReference section */
+		2D2793D725AD90B500DEC620 /* font.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = font.h; sourceTree = "<group>"; };
+		2D9EAF1F258E6A4300297C9C /* sdl.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = sdl.h; sourceTree = "<group>"; };
+		2D9EAF26258E750E00297C9C /* HostApp.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = HostApp.entitlements; sourceTree = "<group>"; };
+		2DA6C5AC258AA66B002B1931 /* CHAP8 */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = CHAP8; sourceTree = BUILT_PRODUCTS_DIR; };
+		2DA6C5AF258AA66B002B1931 /* main.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = main.cpp; sourceTree = "<group>"; };
+		2DB9F18C258EA679000A3299 /* ega.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = ega.h; sourceTree = "<group>"; };
+		3E3C579428E883D300637704 /* BLACK3.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK3.H; path = ../../../CHAP_3/BLACK3.H; sourceTree = "<group>"; };
+		3E3C579528E883D300637704 /* BLACK3.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK3.C; path = ../../../CHAP_3/BLACK3.C; sourceTree = "<group>"; };
+		3EF00A4E28E99F84000AC74A /* BLACK4.H */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; name = BLACK4.H; path = ../../../CHAP_4/BLACK4.H; sourceTree = "<group>"; };
+		3EF00A4F28E99F84000AC74A /* BLACK4.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = BLACK4.C; path = ../../../CHAP_4/BLACK4.C; sourceTree = "<group>"; };
+		3EF00A7428E9FB9C000AC74A /* VOLCANO.C */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; name = VOLCANO.C; path = ../../VOLCANO.C; sourceTree = "<group>"; };
+		3EF00A7528E9FBA0000AC74A /* VOLCANO.PCX */ = {isa = PBXFileReference; lastKnownFileType = file; name = VOLCANO.PCX; path = ../../VOLCANO.PCX; sourceTree = "<group>"; };
+		3EF00A7828E9FC3F000AC74A /* VOCLANO.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = VOCLANO.h; sourceTree = "<group>"; };
+/* End PBXFileReference section */
+
+/* Begin PBXFrameworksBuildPhase section */
+		2DA6C5A9258AA66B002B1931 /* Frameworks */ = {
+			isa = PBXFrameworksBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXFrameworksBuildPhase section */
+
+/* Begin PBXGroup section */
+		2DA6C5A3258AA66B002B1931 = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AE258AA66B002B1931 /* HostApp */,
+				2DA6C5AD258AA66B002B1931 /* Products */,
+			);
+			sourceTree = "<group>";
+		};
+		2DA6C5AD258AA66B002B1931 /* Products */ = {
+			isa = PBXGroup;
+			children = (
+				2DA6C5AC258AA66B002B1931 /* CHAP8 */,
+			);
+			name = Products;
+			sourceTree = "<group>";
+		};
+		2DA6C5AE258AA66B002B1931 /* HostApp */ = {
+			isa = PBXGroup;
+			children = (
+				2D9EAF26258E750E00297C9C /* HostApp.entitlements */,
+				2DA6C5AF258AA66B002B1931 /* main.cpp */,
+				2D9EAF1F258E6A4300297C9C /* sdl.h */,
+				2DB9F18C258EA679000A3299 /* ega.h */,
+				2D2793D725AD90B500DEC620 /* font.h */,
+				3E3C579528E883D300637704 /* BLACK3.C */,
+				3E3C579428E883D300637704 /* BLACK3.H */,
+				3EF00A4F28E99F84000AC74A /* BLACK4.C */,
+				3EF00A4E28E99F84000AC74A /* BLACK4.H */,
+				3EF00A7428E9FB9C000AC74A /* VOLCANO.C */,
+				3EF00A7828E9FC3F000AC74A /* VOCLANO.h */,
+				3EF00A7528E9FBA0000AC74A /* VOLCANO.PCX */,
+			);
+			path = HostApp;
+			sourceTree = "<group>";
+		};
+/* End PBXGroup section */
+
+/* Begin PBXNativeTarget section */
+		2DA6C5AB258AA66B002B1931 /* CHAP8 */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = 2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP8" */;
+			buildPhases = (
+				2DA6C5A8258AA66B002B1931 /* Sources */,
+				2DA6C5A9258AA66B002B1931 /* Frameworks */,
+				2DA6C5AA258AA66B002B1931 /* CopyFiles */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+			);
+			name = CHAP8;
+			productName = CicParserSim;
+			productReference = 2DA6C5AC258AA66B002B1931 /* CHAP8 */;
+			productType = "com.apple.product-type.tool";
+		};
+/* End PBXNativeTarget section */
+
+/* Begin PBXProject section */
+		2DA6C5A4258AA66B002B1931 /* Project object */ = {
+			isa = PBXProject;
+			attributes = {
+				LastUpgradeCheck = 1240;
+				TargetAttributes = {
+					2DA6C5AB258AA66B002B1931 = {
+						CreatedOnToolsVersion = 12.2;
+					};
+				};
+			};
+			buildConfigurationList = 2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP8" */;
+			compatibilityVersion = "Xcode 9.3";
+			developmentRegion = en;
+			hasScannedForEncodings = 0;
+			knownRegions = (
+				en,
+				Base,
+			);
+			mainGroup = 2DA6C5A3258AA66B002B1931;
+			productRefGroup = 2DA6C5AD258AA66B002B1931 /* Products */;
+			projectDirPath = "";
+			projectRoot = "";
+			targets = (
+				2DA6C5AB258AA66B002B1931 /* CHAP8 */,
+			);
+		};
+/* End PBXProject section */
+
+/* Begin PBXSourcesBuildPhase section */
+		2DA6C5A8258AA66B002B1931 /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				3EF00A7628E9FBAD000AC74A /* VOLCANO.C in Sources */,
+				2DA6C5B0258AA66B002B1931 /* main.cpp in Sources */,
+				3EF00A5928E9A177000AC74A /* BLACK4.C in Sources */,
+				3E3C579628E883D700637704 /* BLACK3.C in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXSourcesBuildPhase section */
+
+/* Begin XCBuildConfiguration section */
+		2DA6C5B1258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = dwarf;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				ENABLE_TESTABILITY = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_OPTIMIZATION_LEVEL = 0;
+				GCC_PREPROCESSOR_DEFINITIONS = (
+					"DEBUG=1",
+					"$(inherited)",
+				);
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
+				MTL_FAST_MATH = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Debug;
+		};
+		2DA6C5B2258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_ENABLE_OBJC_WEAK = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				ENABLE_NS_ASSERTIONS = NO;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu11;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.15;
+				MTL_ENABLE_DEBUG_INFO = NO;
+				MTL_FAST_MATH = YES;
+				SDKROOT = macosx;
+			};
+			name = Release;
+		};
+		2DA6C5B4258AA66B002B1931 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = /opt/homebrew/Cellar/sdl2/2.24.0/include/SDL2;
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/Cellar/sdl2/2.24.0/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Debug;
+		};
+		2DA6C5B5258AA66B002B1931 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				CODE_SIGN_ENTITLEMENTS = HostApp/HostApp.entitlements;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Automatic;
+				DEVELOPMENT_TEAM = LHXY425M9Z;
+				ENABLE_HARDENED_RUNTIME = YES;
+				HEADER_SEARCH_PATHS = /opt/homebrew/Cellar/sdl2/2.24.0/include/SDL2;
+				OTHER_LDFLAGS = (
+					"-lSDL2",
+					"-L/opt/homebrew/Cellar/sdl2/2.24.0/lib",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+			};
+			name = Release;
+		};
+/* End XCBuildConfiguration section */
+
+/* Begin XCConfigurationList section */
+		2DA6C5A7258AA66B002B1931 /* Build configuration list for PBXProject "CHAP8" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B1258AA66B002B1931 /* Debug */,
+				2DA6C5B2258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		2DA6C5B3258AA66B002B1931 /* Build configuration list for PBXNativeTarget "CHAP8" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				2DA6C5B4258AA66B002B1931 /* Debug */,
+				2DA6C5B5258AA66B002B1931 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+/* End XCConfigurationList section */
+	};
+	rootObject = 2DA6C5A4258AA66B002B1931 /* Project object */;
+}
diff --git a/CHAP_8/HostApp/CHAP8.xcodeproj/project.xcworkspace/contents.xcworkspacedata b/CHAP_8/HostApp/CHAP8.xcodeproj/project.xcworkspace/contents.xcworkspacedata
new file mode 100644
index 0000000..c744be7
--- /dev/null
+++ b/CHAP_8/HostApp/CHAP8.xcodeproj/project.xcworkspace/contents.xcworkspacedata
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "self:/Users/ac27/Dev/black_art/black_art_3d_revival/CHAP_8/HostApp/CHAP8.xcodeproj">
+   </FileRef>
+</Workspace>
diff --git a/CHAP_8/HostApp/CHAP8.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist b/CHAP_8/HostApp/CHAP8.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
new file mode 100644
index 0000000..18d9810
--- /dev/null
+++ b/CHAP_8/HostApp/CHAP8.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IDEDidComputeMac32BitWarning</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_8/HostApp/HostApp/HostApp.entitlements b/CHAP_8/HostApp/HostApp/HostApp.entitlements
new file mode 100644
index 0000000..8cc185a
--- /dev/null
+++ b/CHAP_8/HostApp/HostApp/HostApp.entitlements
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>com.apple.security.cs.disable-library-validation</key>
+	<true/>
+</dict>
+</plist>
diff --git a/CHAP_8/HostApp/HostApp/VOCLANO.h b/CHAP_8/HostApp/HostApp/VOCLANO.h
new file mode 100644
index 0000000..de90c05
--- /dev/null
+++ b/CHAP_8/HostApp/HostApp/VOCLANO.h
@@ -0,0 +1,13 @@
+//
+//  VOCLANO.h
+//  CHAP8
+//
+//  Created by Tosha on 02/10/2022.
+//
+
+#ifndef VOCLANO_h
+#define VOCLANO_h
+
+void start_volcano(CEga* ega);
+
+#endif /* VOCLANO_h */
diff --git a/CHAP_8/HostApp/HostApp/ega.h b/CHAP_8/HostApp/HostApp/ega.h
new file mode 100644
index 0000000..72f315a
--- /dev/null
+++ b/CHAP_8/HostApp/HostApp/ega.h
@@ -0,0 +1,62 @@
+#ifndef EGA_h
+#define EGA_h
+
+#include "font.h"
+
+typedef uint16_t WORD;
+typedef uint8_t BYTE;
+typedef uint8_t FLAG;
+typedef uint16_t WORD;
+
+typedef uint32_t DWORD;
+
+class CVideoAdapter
+{
+public:
+	virtual DWORD GetPixel(int x, int y, int p) = 0;
+};
+
+class CEga : public CVideoAdapter
+{
+	enum {
+		MemSize = 0x10000*2
+	};
+
+public:
+	DWORD memory[MemSize];
+
+    // https://www.ditig.com/256-colors-cheat-sheet
+    // Note: this is not really an VGA default palette, but Xterm one
+    DWORD palette[256] = {
+        0x000000, 0x800000, 0x008000, 0x808000, 0x000080, 0x800080, 0x008080, 0xc0c0c0, 0x808080, 0xff0000, 0x00ff00, 0xffff00, 0x0000ff, 0xff00ff, 0x00ffff, 0xffffff, 0x000000, 0x00005f, 0x000087, 0x0000af, 0x0000d7, 0x0000ff, 0x005f00, 0x005f5f, 0x005f87, 0x005faf, 0x005fd7, 0x005fff, 0x008700, 0x00875f, 0x008787, 0x0087af, 0x0087d7, 0x0087ff, 0x00af00, 0x00af5f, 0x00af87, 0x00afaf, 0x00afd7, 0x00afff, 0x00d700, 0x00d75f, 0x00d787, 0x00d7af, 0x00d7d7, 0x00d7ff, 0x00ff00, 0x00ff5f, 0x00ff87, 0x00ffaf, 0x00ffd7, 0x00ffff, 0x5f0000, 0x5f005f, 0x5f0087, 0x5f00af, 0x5f00d7, 0x5f00ff, 0x5f5f00, 0x5f5f5f, 0x5f5f87, 0x5f5faf, 0x5f5fd7, 0x5f5fff, 0x5f8700, 0x5f875f, 0x5f8787, 0x5f87af, 0x5f87d7, 0x5f87ff, 0x5faf00, 0x5faf5f, 0x5faf87, 0x5fafaf, 0x5fafd7, 0x5fafff, 0x5fd700, 0x5fd75f, 0x5fd787, 0x5fd7af, 0x5fd7d7, 0x5fd7ff, 0x5fff00, 0x5fff5f, 0x5fff87, 0x5fffaf, 0x5fffd7, 0x5fffff, 0x870000, 0x87005f, 0x870087, 0x8700af, 0x8700d7, 0x8700ff, 0x875f00, 0x875f5f, 0x875f87, 0x875faf, 0x875fd7, 0x875fff, 0x878700, 0x87875f, 0x878787, 0x8787af, 0x8787d7, 0x8787ff, 0x87af00, 0x87af5f, 0x87af87, 0x87afaf, 0x87afd7, 0x87afff, 0x87d700, 0x87d75f, 0x87d787, 0x87d7af, 0x87d7d7, 0x87d7ff, 0x87ff00, 0x87ff5f, 0x87ff87, 0x87ffaf, 0x87ffd7, 0x87ffff, 0xaf0000, 0xaf005f, 0xaf0087, 0xaf00af, 0xaf00d7, 0xaf00ff, 0xaf5f00, 0xaf5f5f, 0xaf5f87, 0xaf5faf, 0xaf5fd7, 0xaf5fff, 0xaf8700, 0xaf875f, 0xaf8787, 0xaf87af, 0xaf87d7, 0xaf87ff, 0xafaf00, 0xafaf5f, 0xafaf87, 0xafafaf, 0xafafd7, 0xafafff, 0xafd700, 0xafd75f, 0xafd787, 0xafd7af, 0xafd7d7, 0xafd7ff, 0xafff00, 0xafff5f, 0xafff87, 0xafffaf, 0xafffd7, 0xafffff, 0xd70000, 0xd7005f, 0xd70087, 0xd700af, 0xd700d7, 0xd700ff, 0xd75f00, 0xd75f5f, 0xd75f87, 0xd75faf, 0xd75fd7, 0xd75fff, 0xd78700, 0xd7875f, 0xd78787, 0xd787af, 0xd787d7, 0xd787ff, 0xd7af00, 0xd7af5f, 0xd7af87, 0xd7afaf, 0xd7afd7, 0xd7afff, 0xd7d700, 0xd7d75f, 0xd7d787, 0xd7d7af, 0xd7d7d7, 0xd7d7ff, 0xd7ff00, 0xd7ff5f, 0xd7ff87, 0xd7ffaf, 0xd7ffd7, 0xd7ffff, 0xff0000, 0xff005f, 0xff0087, 0xff00af, 0xff00d7, 0xff00ff, 0xff5f00, 0xff5f5f, 0xff5f87, 0xff5faf, 0xff5fd7, 0xff5fff, 0xff8700, 0xff875f, 0xff8787, 0xff87af, 0xff87d7, 0xff87ff, 0xffaf00, 0xffaf5f, 0xffaf87, 0xffafaf, 0xffafd7, 0xffafff, 0xffd700, 0xffd75f, 0xffd787, 0xffd7af, 0xffd7d7, 0xffd7ff, 0xffff00, 0xffff5f, 0xffff87, 0xffffaf, 0xffffd7, 0xffffff, 0x080808, 0x121212, 0x1c1c1c, 0x262626, 0x303030, 0x3a3a3a, 0x444444, 0x4e4e4e, 0x585858, 0x626262, 0x6c6c6c, 0x767676, 0x808080, 0x8a8a8a, 0x949494, 0x9e9e9e, 0xa8a8a8, 0xb2b2b2, 0xbcbcbc, 0xc6c6c6, 0xd0d0d0, 0xdadada, 0xe4e4e4, 0xeeeeee
+    };
+
+public:
+	CEga()
+	{
+        memset(memory, 0, sizeof(memory));
+	}
+	
+    void SetPaletteIndex(int index, int rgb)
+    {
+        int r = ((rgb & 4) ? 2 : 0) + ((rgb & 32) ? 1 : 0);
+        int g = ((rgb & 2) ? 2 : 0) + ((rgb & 16) ? 1 : 0);
+        int b = ((rgb & 1) ? 2 : 0) + ((rgb & 8) ? 1 : 0);
+        r = r * 255 / 3;
+        g = g * 255 / 3;
+        b = b * 255 / 3;
+        palette[index] = b | (g << 8) | (r << 16);
+
+    }
+    
+	virtual DWORD GetPixel(int x, int y, int page = -1) override
+	{
+        BYTE* _video = (BYTE*)memory;
+        int idx = (int)_video[((y<<8) + (y<<6)) + x];
+        return palette[idx];
+	}
+};
+
+void _sync();
+
+#endif
diff --git a/CHAP_8/HostApp/HostApp/font.h b/CHAP_8/HostApp/HostApp/font.h
new file mode 100644
index 0000000..8be86b2
--- /dev/null
+++ b/CHAP_8/HostApp/HostApp/font.h
@@ -0,0 +1,313 @@
+#ifndef FONT_h
+#define FONT_h
+
+#pragma once
+
+// http://www.hampa.ch/pce/download.html
+// genoa-ega-2.41.rom
+// dd if=genoa-ega-2.41.rom of=font bs=1 skip=8224 count=3584
+// xxd -i font > font.h
+
+static const uint8_t font[] = {
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81,
+  0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xff,
+  0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
+  0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
+  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff,
+  0xff, 0xff, 0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc,
+  0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30,
+  0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x63,
+  0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06,
+  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66,
+  0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xdb,
+  0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c,
+  0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c,
+  0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c,
+  0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06,
+  0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6,
+  0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c,
+  0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x30,
+  0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c,
+  0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38, 0x78, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c,
+  0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6,
+  0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18,
+  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30,
+  0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66,
+  0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0,
+  0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x6c,
+  0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66,
+  0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x0c,
+  0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce,
+  0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x66,
+  0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
+  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60,
+  0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x30, 0x30, 0x30,
+  0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0,
+  0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
+  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xff, 0x00, 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76,
+  0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00, 0x00, 0x00, 0xe0, 0x60,
+  0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66,
+  0x3c, 0x00, 0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66,
+  0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec,
+  0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60,
+  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c,
+  0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66,
+  0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c,
+  0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x30,
+  0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38,
+  0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6,
+  0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38,
+  0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66,
+  0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00, 0x00,
+  0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
+  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc,
+  0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x78,
+  0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x38,
+  0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
+  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe,
+  0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x38,
+  0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x66,
+  0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x60,
+  0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
+  0x00, 0x00, 0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c,
+  0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x76,
+  0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x6c,
+  0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00, 0x10,
+  0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6,
+  0x7c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc,
+  0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6,
+  0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00, 0x00, 0xc6,
+  0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
+  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
+  0x00, 0x00, 0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60,
+  0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x3c, 0x18,
+  0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xcc, 0xcc,
+  0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x0e,
+  0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
+  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
+  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18,
+  0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x60, 0x00, 0xcc,
+  0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
+  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60,
+  0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
+  0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
+  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06,
+  0x06, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c,
+  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c,
+  0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c,
+  0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x44, 0x11, 0x44,
+  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x55, 0xaa,
+  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
+  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
+  0xdd, 0x77, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8,
+  0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
+  0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36,
+  0x36, 0x36, 0x36, 0x36, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0xff,
+  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
+  0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
+  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
+  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c,
+  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30,
+  0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e,
+  0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c,
+  0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c,
+  0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6,
+  0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00,
+  0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e,
+  0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18,
+  0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
+  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8,
+  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00,
+  0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc,
+  0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x6c, 0x6c,
+  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c,
+  0x1c, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8,
+  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+};
+
+#endif
diff --git a/CHAP_8/HostApp/HostApp/main.cpp b/CHAP_8/HostApp/HostApp/main.cpp
new file mode 100644
index 0000000..f02df43
--- /dev/null
+++ b/CHAP_8/HostApp/HostApp/main.cpp
@@ -0,0 +1,58 @@
+//
+//  main.cpp
+//  HostApp
+//
+//
+
+#include <iostream>
+#include <vector>
+#include <sstream>
+#include <iomanip>
+#include <list>
+
+#include "sdl.h"
+#include "ega.h"
+
+#include "VOCLANO.h"
+
+CEga mVideo;
+CSdl mSdl;
+std::list<int> keyboardBuffer;
+
+void onKey(int k, int p)
+{
+    if (!p)
+        return;
+
+    int key = 0;
+    switch (k)
+    {
+        case SDL_SCANCODE_UP: key = 0x4800; break;
+        case SDL_SCANCODE_DOWN: key = 0x5000; break;
+        case SDL_SCANCODE_LEFT: key = 0x4b00; break;
+        case SDL_SCANCODE_RIGHT: key = 0x4d00; break;
+        case SDL_SCANCODE_SPACE: key = 0x3920; break;
+        case SDL_SCANCODE_RETURN: key = 0x1c0d; break;
+    }
+
+    if (key)
+    {
+        keyboardBuffer.push_back(key);
+    }
+}
+
+void _sync()
+{
+    for (int y=0; y<mSdl.Height; y++)
+      for (int x=0; x<mSdl.Width; x++)
+        mSdl.SetPixel(x, y, mVideo.GetPixel(x, y));
+    
+    mSdl.Loop();
+}
+
+int main(int argc, const char * argv[]) {
+    mSdl.Init();
+    start_volcano(&mVideo);
+    mSdl.Deinit();
+    return 0;
+}
diff --git a/CHAP_8/HostApp/HostApp/sdl.h b/CHAP_8/HostApp/HostApp/sdl.h
new file mode 100644
index 0000000..e733a4a
--- /dev/null
+++ b/CHAP_8/HostApp/HostApp/sdl.h
@@ -0,0 +1,144 @@
+#ifndef SDL_h
+#define SDL_h
+
+typedef uint32_t Uint32;
+#include <SDL.h>
+#include <SDL_render.h>
+
+void onKey(int k, int p);
+
+class CSdl
+{
+    
+    std::vector< unsigned char > pixels;
+    const int pixelSize = 2;
+
+    SDL_Renderer* renderer{nullptr};
+    SDL_Texture* texture{nullptr};
+    SDL_Window* window{nullptr};
+    bool running{true};
+    int lastKey{0};
+
+public:
+    enum {
+        Width = 320,//640,
+        Height = 200//350
+    };
+
+    void Init()
+    {
+        pixels.resize(Width*Height*4);
+        SDL_Init( SDL_INIT_EVERYTHING );
+        atexit( SDL_Quit );
+        
+        window = SDL_CreateWindow
+        (
+         "BlackArt simulator",
+         SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
+         Width*pixelSize, Height*pixelSize,
+         SDL_WINDOW_SHOWN
+         );
+        
+        renderer = SDL_CreateRenderer
+        (
+         window,
+         -1,
+         SDL_RENDERER_ACCELERATED
+         );
+
+        texture = SDL_CreateTexture
+        (
+         renderer,
+         SDL_PIXELFORMAT_ARGB8888,
+         SDL_TEXTUREACCESS_STREAMING,
+         Width, Height
+         );
+    }
+    
+    void Blit()
+    {
+        SDL_SetRenderDrawColor( renderer, 0, 0, 0, SDL_ALPHA_OPAQUE );
+        SDL_RenderClear( renderer );
+        
+        SDL_UpdateTexture
+        (
+         texture,
+         NULL,
+         &pixels[0],
+         Width * 4
+         );
+        
+        SDL_RenderCopy( renderer, texture, NULL, NULL );
+        SDL_RenderPresent( renderer );
+    }
+    
+    void Loop()
+    {
+//        SDL_Event event;
+//
+//        while( SDL_PollEvent( &event ) )
+//        {
+//            if (SDL_KEYDOWN == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 1);
+//            }
+//
+//            if (SDL_KEYUP == event.type)
+//            {
+//                lastKey = event.key.keysym.scancode;
+//                onKey(event.key.keysym.scancode, 0);
+//            }
+//
+//            if( ( SDL_QUIT == event.type ) ||
+//               ( SDL_KEYDOWN == event.type && SDL_SCANCODE_ESCAPE == event.key.keysym.scancode ) )
+//            {
+//                running = false;
+//                break;
+//            }
+//        }
+        
+        Blit();
+        
+        //const Uint64 end = SDL_GetPerformanceCounter();
+        //const static Uint64 freq = SDL_GetPerformanceFrequency();
+        //const double seconds = ( end - start ) / static_cast< double >( freq );
+        //std::cout << "Frame time: " << seconds * 1000.0 << "ms" << std::endl;
+//        if (running)
+//            SDL_Delay(20);
+    }
+    
+    void Deinit()
+    {
+        SDL_DestroyRenderer( renderer );
+        SDL_DestroyWindow( window );
+        SDL_Quit();
+    }
+    
+    void SetPixel(int x, int y, uint32_t c)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        pixels[ offset + 0 ] = (uint8_t)c;
+        pixels[ offset + 1 ] = (uint8_t)(c >> 8);
+        pixels[ offset + 2 ] = (uint8_t)(c >> 16);
+        pixels[ offset + 3 ] = SDL_ALPHA_OPAQUE;
+    }
+
+    uint32_t GetPixel(int x, int y)
+    {
+        assert(x >= 0 && x < Width);
+        assert(y >= 0 && y < Height);
+        
+        const unsigned int offset = ( Width * 4 * y ) + x * 4;
+        int b = pixels[ offset + 0 ];
+        int g = pixels[ offset + 1 ];
+        int r = pixels[ offset + 2 ];
+        return r | (g << 8) | (b << 16);
+    }
+
+};
+
+#endif
diff --git a/CHAP_8/VOLCANO.C b/CHAP_8/VOLCANO.C
index 2bcdc91..53ef712 100755
--- a/CHAP_8/VOLCANO.C
+++ b/CHAP_8/VOLCANO.C
@@ -3,21 +3,18 @@
 
 // I N C L U D E S ///////////////////////////////////////////////////////////
 
-#include <io.h>
-#include <conio.h>
+#include <SDL.h>
+
 #include <stdio.h>
 #include <stdlib.h>
-#include <dos.h>
-#include <bios.h>
 #include <fcntl.h>
 #include <memory.h>
-#include <malloc.h>
 #include <math.h>
 #include <string.h>
 
 #include "black3.h"
 #include "black4.h"
-#include "black8.h"
+//#include "black8.h"
 
 // D E F I N E S ////////////////////////////////////////////////////////////
 
@@ -223,12 +220,12 @@ for (index=0; index<active_cinders; index++)
 
 // M A I N //////////////////////////////////////////////////////////////////
 
-void main(int argc, char **argv)
+void start_volcano(CEga* ega)
 {
 
 // set the graphics mode to mode 13h
 
-Set_Graphics_Mode(GRAPHICS_MODE13);
+Set_Graphics_Mode(ega, GRAPHICS_MODE13);
 
 // create the double buffer
 
@@ -256,8 +253,18 @@ active_cinders = 20;
 
 // main event loop, process until keyboard hit
 
-while(!kbhit())
+bool done = false;
+while(!done)
+{
+     SDL_Event event;
+     while( SDL_PollEvent( &event ) )
      {
+         if (SDL_KEYDOWN == event.type) {
+             done = true;
+             break;
+         }
+     }
+
      // erase all the cinders coming out of the volcano
 
      Erase_Cinders();
@@ -277,7 +284,8 @@ while(!kbhit())
 
      // lock onto 18 frames per second max
 
-     Time_Delay(1);
+     _sync();
+     Time_Delay(CLOCKS_PER_SEC/18);
 
      } // end while
 
@@ -289,8 +297,6 @@ Screen_Transition(SCREEN_DARKNESS);
 
 Delete_Double_Buffer();
 
-Set_Graphics_Mode(TEXT_MODE);
+//Set_Graphics_Mode(TEXT_MODE);
 
 } // end main
-
-
\ No newline at end of file
-- 
2.37.1 (Apple Git-137.1)

